{
	"id": "50cd927441a6996ab107f72a95f5e24c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ToonzRewardsCardV2.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"erc721a/contracts/ERC721A.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract ToonzRewardsCardV2 is ERC721A, Ownable {\n  using Strings for uint;\n  using Counters for Counters.Counter;\n\n  string public baseURI;\n  string public baseExtension;\n\n  constructor() ERC721A(\"Toonz Minter Rewards Card\", \"MINTR\") {}\n\n  function tokenURI(uint tokenId) public view virtual override returns (string memory) {\n    require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n    return bytes(baseURI).length > 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString(), baseExtension)): \"\";\n  }\n\n  function giftCard(address[] calldata _recipients) public onlyOwner {\n    uint _amount = _recipients.length;\n      for (uint i = 0; i < _amount; i++) {\n        _safeMint(_recipients[i], 1);\n      }\n  }\n\n  function setBaseURI(string memory _baseURI, string memory _baseExtension) public onlyOwner {\n    baseURI = _baseURI;\n    baseExtension = _baseExtension;\n  }\n\n}"
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"erc721a/contracts/ERC721A.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerQueryForNonexistentToken();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr && curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721A.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\n    }\n\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity, _data, true);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 quantity,\n        bytes memory _data,\n        bool safe\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (safe && to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex != end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex != end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = to;\n            currSlot.startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev This is equivalent to _burn(tokenId, false)\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        address from = prevOwnership.addr;\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            AddressData storage addressData = _addressData[from];\n            addressData.balance -= 1;\n            addressData.numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = from;\n            currSlot.startTimestamp = uint64(block.timestamp);\n            currSlot.burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 10
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122075f2e29035bb7b1c4107a699487eca309ed85450a9df3f40304e32dc0eee4c1764736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075f2e29035bb7b1c4107a699487eca309ed85450a9df3f40304e32dc0eee4c1764736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xF2E29035BB7B1C4107A699487ECA309ED85450A9DF3F BLOCKHASH ADDRESS 0x4E ORIGIN 0xDC 0xE 0xEE 0x4C OR PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8061:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075f2e29035bb7b1c4107a699487eca309ed85450a9df3f40304e32dc0eee4c1764736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xF2E29035BB7B1C4107A699487ECA309ED85450A9DF3F BLOCKHASH ADDRESS 0x4E ORIGIN 0xDC 0xE 0xEE 0x4C OR PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122075f2e29035bb7b1c4107a699487eca309ed85450a9df3f40304e32dc0eee4c1764736f6c634300080d0033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d764c5335e1bbdf7b12e5519ddfc77f82753b061b3d2be6a1ffc67b6a5a9571964736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d764c5335e1bbdf7b12e5519ddfc77f82753b061b3d2be6a1ffc67b6a5a9571964736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 PUSH5 0xC5335E1BBD 0xF7 0xB1 0x2E SSTORE NOT 0xDD 0xFC PUSH24 0xF82753B061B3D2BE6A1FFC67B6A5A9571964736F6C634300 ADDMOD 0xD STOP CALLER ",
							"sourceMap": "424:971:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d764c5335e1bbdf7b12e5519ddfc77f82753b061b3d2be6a1ffc67b6a5a9571964736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 PUSH5 0xC5335E1BBD 0xF7 0xB1 0x2E SSTORE NOT 0xDD 0xFC PUSH24 0xF82753B061B3D2BE6A1FFC67B6A5A9571964736F6C634300 ADDMOD 0xD STOP CALLER ",
							"sourceMap": "424:971:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite",
								"reset(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d764c5335e1bbdf7b12e5519ddfc77f82753b061b3d2be6a1ffc67b6a5a9571964736f6c634300080d0033",
									".code": [
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b8df2a394d2504338f99d397db3d1437ecb2fad8fe37e4a24c0edccb7722e33564736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b8df2a394d2504338f99d397db3d1437ecb2fad8fe37e4a24c0edccb7722e33564736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 0xDF 0x2A CODECOPY 0x4D 0x25 DIV CALLER DUP16 SWAP10 0xD3 SWAP8 0xDB RETURNDATASIZE EQ CALLDATACOPY 0xEC 0xB2 STATICCALL 0xD8 INVALID CALLDATACOPY 0xE4 LOG2 0x4C 0xE 0xDC 0xCB PUSH24 0x22E33564736F6C634300080D003300000000000000000000 ",
							"sourceMap": "146:1885:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b8df2a394d2504338f99d397db3d1437ecb2fad8fe37e4a24c0edccb7722e33564736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 0xDF 0x2A CODECOPY 0x4D 0x25 DIV CALLER DUP16 SWAP10 0xD3 SWAP8 0xDB RETURNDATASIZE EQ CALLDATACOPY 0xEC 0xB2 STATICCALL 0xD8 INVALID CALLDATACOPY 0xE4 LOG2 0x4C 0xE 0xDC 0xCB PUSH24 0x22E33564736F6C634300080D003300000000000000000000 ",
							"sourceMap": "146:1885:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b8df2a394d2504338f99d397db3d1437ecb2fad8fe37e4a24c0edccb7722e33564736f6c634300080d0033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ToonzRewardsCardV2.sol": {
				"ToonzRewardsCardV2": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "baseExtension",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "baseURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipients",
									"type": "address[]"
								}
							],
							"name": "giftCard",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_baseURI",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "_baseExtension",
									"type": "string"
								}
							],
							"name": "setBaseURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ToonzRewardsCardV2.sol\":206:1107  contract ToonzRewardsCardV2 is ERC721A, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/ToonzRewardsCardV2.sol\":381:443  constructor() ERC721A(\"Toonz Minter Rewards Card\", \"MINTR\") {} */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3357:3511  constructor(string memory name_, string memory symbol_) {... */\n  0x40\n  dup1\n  mload\n  dup1\n  dup3\n  add\n  dup3\n  mstore\n  0x19\n  dup2\n  mstore\n  0x546f6f6e7a204d696e7465722052657761726473204361726400000000000000\n  0x20\n  dup1\n  dup4\n  add\n  swap2\n  dup3\n  mstore\n  dup4\n  mload\n  dup1\n  dup6\n  add\n  swap1\n  swap5\n  mstore\n  0x05\n  dup5\n  mstore\n  shl(0xd9, 0x26a4a72a29)\n  swap1\n  dup5\n  add\n  mstore\n    /* \"erc721a/contracts/ERC721A.sol\":3423:3436  _name = name_ */\n  dup2\n  mload\n    /* \"erc721a/contracts/ERC721A.sol\":3357:3511  constructor(string memory name_, string memory symbol_) {... */\n  swap2\n  swap3\n  swap2\n    /* \"erc721a/contracts/ERC721A.sol\":3423:3436  _name = name_ */\n  tag_6\n  swap2\n    /* \"erc721a/contracts/ERC721A.sol\":3423:3428  _name */\n  0x02\n  swap2\n    /* \"erc721a/contracts/ERC721A.sol\":3423:3436  _name = name_ */\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3446:3463  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3446:3453  _symbol */\n  0x03\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3446:3463  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3659:3666  uint256 */\n  0x00\n    /* \"erc721a/contracts/ERC721A.sol\":3473:3504  _currentIndex = _startTokenId() */\n  dup1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_12\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_15\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_12:\n    /* \"contracts/ToonzRewardsCardV2.sol\":206:1107  contract ToonzRewardsCardV2 is ERC721A, Ownable {... */\n  jump(tag_32)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_15:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x08\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"contracts/ToonzRewardsCardV2.sol\":206:1107  contract ToonzRewardsCardV2 is ERC721A, Ownable {... */\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_21\n  swap1\n  tag_22\n  jump\t// in\ntag_21:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_24\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_27)\ntag_24:\n  dup3\n  0x1f\n  lt\n  tag_25\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_27)\ntag_25:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_27\n  jumpi\n  swap2\n  dup3\n  add\ntag_26:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_27\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_26)\ntag_27:\n  pop\n  tag_28\n  swap3\n  swap2\n  pop\n  tag_29\n  jump\t// in\ntag_28:\n  pop\n  swap1\n  jump\t// out\ntag_29:\ntag_30:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_28\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_30)\n    /* \"#utility.yul\":14:394   */\ntag_22:\n    /* \"#utility.yul\":93:94   */\n  0x01\n    /* \"#utility.yul\":89:101   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":136:148   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":157:218   */\n  tag_34\n  jumpi\n    /* \"#utility.yul\":211:215   */\n  0x7f\n    /* \"#utility.yul\":203:209   */\n  dup3\n    /* \"#utility.yul\":199:216   */\n  and\n    /* \"#utility.yul\":189:216   */\n  swap2\n  pop\n    /* \"#utility.yul\":157:218   */\ntag_34:\n    /* \"#utility.yul\":264:266   */\n  0x20\n    /* \"#utility.yul\":256:262   */\n  dup3\n    /* \"#utility.yul\":253:267   */\n  lt\n    /* \"#utility.yul\":233:251   */\n  dup2\n    /* \"#utility.yul\":230:268   */\n  sub\n    /* \"#utility.yul\":227:388   */\n  tag_35\n  jumpi\n    /* \"#utility.yul\":310:320   */\n  0x4e487b71\n    /* \"#utility.yul\":305:308   */\n  0xe0\n    /* \"#utility.yul\":301:321   */\n  shl\n    /* \"#utility.yul\":298:299   */\n  0x00\n    /* \"#utility.yul\":291:322   */\n  mstore\n    /* \"#utility.yul\":345:349   */\n  0x22\n    /* \"#utility.yul\":342:343   */\n  0x04\n    /* \"#utility.yul\":335:350   */\n  mstore\n    /* \"#utility.yul\":373:377   */\n  0x24\n    /* \"#utility.yul\":370:371   */\n  0x00\n    /* \"#utility.yul\":363:378   */\n  revert\n    /* \"#utility.yul\":227:388   */\ntag_35:\n  pop\n    /* \"#utility.yul\":14:394   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_32:\n    /* \"contracts/ToonzRewardsCardV2.sol\":206:1107  contract ToonzRewardsCardV2 is ERC721A, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ToonzRewardsCardV2.sol\":206:1107  contract ToonzRewardsCardV2 is ERC721A, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x6790a9de\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x6c0360eb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x7a2d0163\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xc6682862\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_23\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":4551:4851  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_24\n      tag_25\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_25:\n      tag_27\n      jump\t// in\n    tag_24:\n      mload(0x40)\n        /* \"#utility.yul\":565:579   */\n      swap1\n      iszero\n        /* \"#utility.yul\":558:580   */\n      iszero\n        /* \"#utility.yul\":540:581   */\n      dup2\n      mstore\n        /* \"#utility.yul\":528:530   */\n      0x20\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":4551:4851  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_28:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"erc721a/contracts/ERC721A.sol\":7579:7677  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      tag_28\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9035:9235  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_5:\n      tag_34\n      tag_35\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_35:\n      tag_37\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1692:1724   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1674:1725   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1662:1664   */\n      0x20\n        /* \"#utility.yul\":1647:1665   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":9035:9235  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      tag_28\n        /* \"#utility.yul\":1528:1731   */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":8612:8974  function approve(address to, uint256 tokenId) public override {... */\n    tag_6:\n      tag_40\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n    tag_40:\n      stop\n        /* \"erc721a/contracts/ERC721A.sol\":3822:4119  function totalSupply() public view returns (uint256) {... */\n    tag_7:\n        /* \"erc721a/contracts/ERC721A.sol\":4072:4084  _burnCounter */\n      sload(0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":3866:3873  uint256 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":4056:4069  _currentIndex */\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":4056:4084  _currentIndex - _burnCounter */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":3822:4119  function totalSupply() public view returns (uint256) {... */\n    tag_44:\n      mload(0x40)\n        /* \"#utility.yul\":2319:2344   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":2307:2309   */\n      0x20\n        /* \"#utility.yul\":2292:2310   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":3822:4119  function totalSupply() public view returns (uint256) {... */\n      tag_28\n        /* \"#utility.yul\":2173:2350   */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":9874:10038  function transferFrom(... */\n    tag_8:\n      tag_40\n      tag_49\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10104:10283  function safeTransferFrom(... */\n    tag_9:\n      tag_40\n      tag_53\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_53:\n      tag_54\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7394:7517  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_10:\n      tag_34\n      tag_56\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_56:\n      tag_57\n      jump\t// in\n        /* \"contracts/ToonzRewardsCardV2.sol\":948:1104  function setBaseURI(string memory _baseURI, string memory _baseExtension) public onlyOwner {... */\n    tag_11:\n      tag_40\n      tag_60\n      calldatasize\n      0x04\n      tag_61\n      jump\t// in\n    tag_60:\n      tag_62\n      jump\t// in\n        /* \"contracts/ToonzRewardsCardV2.sol\":324:345  string public baseURI */\n    tag_12:\n      tag_30\n      tag_64\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":4910:5113  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_13:\n      tag_44\n      tag_67\n      calldatasize\n      0x04\n      tag_68\n      jump\t// in\n    tag_67:\n      tag_69\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_40\n      tag_72\n      jump\t// in\n        /* \"contracts/ToonzRewardsCardV2.sol\":744:944  function giftCard(address[] calldata _recipients) public onlyOwner {... */\n    tag_15:\n      tag_40\n      tag_74\n      calldatasize\n      0x04\n      tag_75\n      jump\t// in\n    tag_74:\n      tag_76\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_16:\n      tag_34\n      tag_78\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7741:7843  function symbol() public view virtual override returns (string memory) {... */\n    tag_17:\n      tag_30\n      tag_81\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9302:9584  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_18:\n      tag_40\n      tag_84\n      calldatasize\n      0x04\n      tag_85\n      jump\t// in\n    tag_84:\n      tag_86\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10349:10708  function safeTransferFrom(... */\n    tag_19:\n      tag_40\n      tag_88\n      calldatasize\n      0x04\n      tag_89\n      jump\t// in\n    tag_88:\n      tag_90\n      jump\t// in\n        /* \"contracts/ToonzRewardsCardV2.sol\":349:376  string public baseExtension */\n    tag_20:\n      tag_30\n      tag_92\n      jump\t// in\n        /* \"contracts/ToonzRewardsCardV2.sol\":447:740  function tokenURI(uint tokenId) public view virtual override returns (string memory) {... */\n    tag_21:\n      tag_30\n      tag_95\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_95:\n      tag_96\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9650:9812  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_22:\n      tag_24\n      tag_99\n      calldatasize\n      0x04\n      tag_100\n      jump\t// in\n    tag_99:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9795  _operatorApprovals[owner] */\n      swap2\n      dup3\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":9747:9751  bool */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9795  _operatorApprovals[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9788  _operatorApprovals */\n      0x07\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9795  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9805  _operatorApprovals[owner][operator] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9650:9812  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_23:\n      tag_40\n      tag_104\n      calldatasize\n      0x04\n      tag_68\n      jump\t// in\n    tag_104:\n      tag_105\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":4551:4851  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_27:\n        /* \"erc721a/contracts/ERC721A.sol\":4653:4657  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":4688:4728  interfaceId == type(IERC721).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x80ac58cd)\n      eq\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":4688:4792  interfaceId == type(IERC721).interfaceId ||... */\n      tag_107\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":4744:4792  interfaceId == type(IERC721Metadata).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5b5e139f)\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":4688:4792  interfaceId == type(IERC721).interfaceId ||... */\n    tag_107:\n        /* \"erc721a/contracts/ERC721A.sol\":4688:4844  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_109\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":4808:4844  super.supportsInterface(interfaceId) */\n    tag_109:\n        /* \"erc721a/contracts/ERC721A.sol\":4669:4844  return... */\n      swap3\n        /* \"erc721a/contracts/ERC721A.sol\":4551:4851  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7579:7677  function name() public view virtual override returns (string memory) {... */\n    tag_31:\n        /* \"erc721a/contracts/ERC721A.sol\":7633:7646  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":7665:7670  _name */\n      0x02\n        /* \"erc721a/contracts/ERC721A.sol\":7658:7670  return _name */\n      dup1\n      sload\n      tag_112\n      swap1\n      tag_113\n      jump\t// in\n    tag_112:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_114\n      swap1\n      tag_113\n      jump\t// in\n    tag_114:\n      dup1\n      iszero\n      tag_115\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_116\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_115)\n    tag_116:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_117:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_117\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_115:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":7579:7677  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9035:9235  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_37:\n        /* \"erc721a/contracts/ERC721A.sol\":9103:9110  address */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":9127:9143  _exists(tokenId) */\n      tag_119\n        /* \"erc721a/contracts/ERC721A.sol\":9135:9142  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":9127:9134  _exists */\n      tag_120\n        /* \"erc721a/contracts/ERC721A.sol\":9127:9143  _exists(tokenId) */\n      jump\t// in\n    tag_119:\n        /* \"erc721a/contracts/ERC721A.sol\":9122:9186  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n      tag_121\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9152:9186  ApprovalQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe2, 0x33d1c039)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9122:9186  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n    tag_121:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9204:9228  _tokenApprovals[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9204:9219  _tokenApprovals */\n      0x06\n        /* \"erc721a/contracts/ERC721A.sol\":9204:9228  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9035:9235  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":8612:8974  function approve(address to, uint256 tokenId) public override {... */\n    tag_43:\n        /* \"erc721a/contracts/ERC721A.sol\":8684:8697  address owner */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":8700:8724  ERC721A.ownerOf(tokenId) */\n      tag_123\n        /* \"erc721a/contracts/ERC721A.sol\":8716:8723  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":8700:8715  ERC721A.ownerOf */\n      tag_57\n        /* \"erc721a/contracts/ERC721A.sol\":8700:8724  ERC721A.ownerOf(tokenId) */\n      jump\t// in\n    tag_123:\n        /* \"erc721a/contracts/ERC721A.sol\":8684:8724  address owner = ERC721A.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8744:8749  owner */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":8738:8749  to == owner */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":8738:8740  to */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":8738:8749  to == owner */\n      and\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":8734:8782  if (to == owner) revert ApprovalToCurrentOwner() */\n      tag_124\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":8758:8782  ApprovalToCurrentOwner() */\n      mload(0x40)\n      shl(0xe2, 0x250fdee3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":8734:8782  if (to == owner) revert ApprovalToCurrentOwner() */\n    tag_124:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":8797:8818  _msgSender() != owner */\n      dup3\n      and\n      eq\n      dup1\n      iszero\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":8797:8860  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n      tag_127\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8823:8860  isApprovedForAll(owner, _msgSender()) */\n      tag_128\n        /* \"erc721a/contracts/ERC721A.sol\":8840:8845  owner */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":9650:9812  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_99\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":8823:8860  isApprovedForAll(owner, _msgSender()) */\n    tag_128:\n        /* \"erc721a/contracts/ERC721A.sol\":8822:8860  !isApprovedForAll(owner, _msgSender()) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":8797:8860  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n    tag_127:\n        /* \"erc721a/contracts/ERC721A.sol\":8793:8929  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n      iszero\n      tag_130\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":8883:8918  ApprovalCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x67d9dca1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":8793:8929  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n    tag_130:\n        /* \"erc721a/contracts/ERC721A.sol\":8939:8967  _approve(to, tokenId, owner) */\n      tag_131\n        /* \"erc721a/contracts/ERC721A.sol\":8948:8950  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":8952:8959  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":8961:8966  owner */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":8939:8947  _approve */\n      tag_132\n        /* \"erc721a/contracts/ERC721A.sol\":8939:8967  _approve(to, tokenId, owner) */\n      jump\t// in\n    tag_131:\n        /* \"erc721a/contracts/ERC721A.sol\":8674:8974  {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8612:8974  function approve(address to, uint256 tokenId) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9874:10038  function transferFrom(... */\n    tag_51:\n        /* \"erc721a/contracts/ERC721A.sol\":10003:10031  _transfer(from, to, tokenId) */\n      tag_131\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10017  from */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10019:10021  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10023:10030  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10003:10012  _transfer */\n      tag_138\n        /* \"erc721a/contracts/ERC721A.sol\":10003:10031  _transfer(from, to, tokenId) */\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10104:10283  function safeTransferFrom(... */\n    tag_54:\n        /* \"erc721a/contracts/ERC721A.sol\":10237:10276  safeTransferFrom(from, to, tokenId, '') */\n      tag_131\n        /* \"erc721a/contracts/ERC721A.sol\":10254:10258  from */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10260:10262  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10264:10271  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10237:10276  safeTransferFrom(from, to, tokenId, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":10237:10253  safeTransferFrom */\n      tag_90\n        /* \"erc721a/contracts/ERC721A.sol\":10237:10276  safeTransferFrom(from, to, tokenId, '') */\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7394:7517  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_57:\n        /* \"erc721a/contracts/ERC721A.sol\":7458:7465  address */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":7484:7505  _ownershipOf(tokenId) */\n      tag_142\n        /* \"erc721a/contracts/ERC721A.sol\":7497:7504  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":7484:7496  _ownershipOf */\n      tag_143\n        /* \"erc721a/contracts/ERC721A.sol\":7484:7505  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_142:\n        /* \"erc721a/contracts/ERC721A.sol\":7484:7510  _ownershipOf(tokenId).addr */\n      mload\n      swap3\n        /* \"erc721a/contracts/ERC721A.sol\":7394:7517  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ToonzRewardsCardV2.sol\":948:1104  function setBaseURI(string memory _baseURI, string memory _baseExtension) public onlyOwner {... */\n    tag_62:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_146\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_146:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_147\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_148\n      swap1\n      tag_149\n      jump\t// in\n    tag_148:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_147:\n        /* \"contracts/ToonzRewardsCardV2.sol\":1045:1063  baseURI = _baseURI */\n      dup2\n      mload\n      tag_151\n      swap1\n        /* \"contracts/ToonzRewardsCardV2.sol\":1045:1052  baseURI */\n      0x09\n      swap1\n        /* \"contracts/ToonzRewardsCardV2.sol\":1045:1063  baseURI = _baseURI */\n      0x20\n      dup6\n      add\n      swap1\n      tag_152\n      jump\t// in\n    tag_151:\n      pop\n        /* \"contracts/ToonzRewardsCardV2.sol\":1069:1099  baseExtension = _baseExtension */\n      dup1\n      mload\n      tag_131\n      swap1\n        /* \"contracts/ToonzRewardsCardV2.sol\":1069:1082  baseExtension */\n      0x0a\n      swap1\n        /* \"contracts/ToonzRewardsCardV2.sol\":1069:1099  baseExtension = _baseExtension */\n      0x20\n      dup5\n      add\n      swap1\n      tag_152\n      jump\t// in\n        /* \"contracts/ToonzRewardsCardV2.sol\":324:345  string public baseURI */\n    tag_64:\n      0x09\n      dup1\n      sload\n      tag_154\n      swap1\n      tag_113\n      jump\t// in\n    tag_154:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_155\n      swap1\n      tag_113\n      jump\t// in\n    tag_155:\n      dup1\n      iszero\n      tag_156\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_157\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_156)\n    tag_157:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_158:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_158\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_156:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":4910:5113  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_69:\n        /* \"erc721a/contracts/ERC721A.sol\":4974:4981  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":4997:5016  owner == address(0) */\n      dup3\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":4993:5053  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n      tag_160\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":5025:5053  BalanceQueryForZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x23d3ad81)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":4993:5053  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n    tag_160:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":5078:5097  _addressData[owner] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":5078:5090  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":5078:5097  _addressData[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":5078:5105  _addressData[owner].balance */\n      sload\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":4910:5113  function balanceOf(address owner) public view override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_72:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_163\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_163:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_164\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_148\n      swap1\n      tag_149\n      jump\t// in\n    tag_164:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_167\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_168\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_167:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ToonzRewardsCardV2.sol\":744:944  function giftCard(address[] calldata _recipients) public onlyOwner {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_171\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_171:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_172\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_148\n      swap1\n      tag_149\n      jump\t// in\n    tag_172:\n        /* \"contracts/ToonzRewardsCardV2.sol\":832:843  _recipients */\n      dup1\n        /* \"contracts/ToonzRewardsCardV2.sol\":817:829  uint _amount */\n      0x00\n        /* \"contracts/ToonzRewardsCardV2.sol\":858:940  for (uint i = 0; i < _amount; i++) {... */\n    tag_175:\n        /* \"contracts/ToonzRewardsCardV2.sol\":879:886  _amount */\n      dup2\n        /* \"contracts/ToonzRewardsCardV2.sol\":875:876  i */\n      dup2\n        /* \"contracts/ToonzRewardsCardV2.sol\":875:886  i < _amount */\n      lt\n        /* \"contracts/ToonzRewardsCardV2.sol\":858:940  for (uint i = 0; i < _amount; i++) {... */\n      iszero\n      tag_176\n      jumpi\n        /* \"contracts/ToonzRewardsCardV2.sol\":903:931  _safeMint(_recipients[i], 1) */\n      tag_178\n        /* \"contracts/ToonzRewardsCardV2.sol\":913:924  _recipients */\n      dup5\n      dup5\n        /* \"contracts/ToonzRewardsCardV2.sol\":925:926  i */\n      dup4\n        /* \"contracts/ToonzRewardsCardV2.sol\":913:927  _recipients[i] */\n      dup2\n      dup2\n      lt\n      tag_180\n      jumpi\n      tag_180\n      tag_181\n      jump\t// in\n    tag_180:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_182\n      swap2\n      swap1\n      tag_68\n      jump\t// in\n    tag_182:\n        /* \"contracts/ToonzRewardsCardV2.sol\":929:930  1 */\n      0x01\n        /* \"contracts/ToonzRewardsCardV2.sol\":903:912  _safeMint */\n      tag_183\n        /* \"contracts/ToonzRewardsCardV2.sol\":903:931  _safeMint(_recipients[i], 1) */\n      jump\t// in\n    tag_178:\n        /* \"contracts/ToonzRewardsCardV2.sol\":888:891  i++ */\n      dup1\n      tag_184\n      dup2\n      tag_185\n      jump\t// in\n    tag_184:\n      swap2\n      pop\n      pop\n        /* \"contracts/ToonzRewardsCardV2.sol\":858:940  for (uint i = 0; i < _amount; i++) {... */\n      jump(tag_175)\n    tag_176:\n      pop\n        /* \"contracts/ToonzRewardsCardV2.sol\":811:944  {... */\n      pop\n        /* \"contracts/ToonzRewardsCardV2.sol\":744:944  function giftCard(address[] calldata _recipients) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_78:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7741:7843  function symbol() public view virtual override returns (string memory) {... */\n    tag_81:\n        /* \"erc721a/contracts/ERC721A.sol\":7797:7810  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":7829:7836  _symbol */\n      0x03\n        /* \"erc721a/contracts/ERC721A.sol\":7822:7836  return _symbol */\n      dup1\n      sload\n      tag_112\n      swap1\n      tag_113\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9302:9584  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_86:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9400:9424  operator == _msgSender() */\n      dup4\n      and\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":9396:9450  if (operator == _msgSender()) revert ApproveToCaller() */\n      tag_195\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9433:9450  ApproveToCaller() */\n      mload(0x40)\n      shl(0xe0, 0xb06307db)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9396:9450  if (operator == _msgSender()) revert ApproveToCaller() */\n    tag_195:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9493  _operatorApprovals[_msgSender()] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9479  _operatorApprovals */\n      0x07\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9493  _operatorApprovals[_msgSender()] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9503  _operatorApprovals[_msgSender()][operator] */\n      dup8\n      and\n      dup1\n      dup6\n      mstore\n      swap1\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9514  _operatorApprovals[_msgSender()][operator] = approved */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup7\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":9529:9577  ApprovalForAll(_msgSender(), operator, approved) */\n      swap1\n      mload\n        /* \"#utility.yul\":540:581   */\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9503  _operatorApprovals[_msgSender()][operator] */\n      swap2\n      swap3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap2\n        /* \"erc721a/contracts/ERC721A.sol\":9529:9577  ApprovalForAll(_msgSender(), operator, approved) */\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n      swap2\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":9529:9577  ApprovalForAll(_msgSender(), operator, approved) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"erc721a/contracts/ERC721A.sol\":9302:9584  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":10349:10708  function safeTransferFrom(... */\n    tag_90:\n        /* \"erc721a/contracts/ERC721A.sol\":10510:10538  _transfer(from, to, tokenId) */\n      tag_200\n        /* \"erc721a/contracts/ERC721A.sol\":10520:10524  from */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10526:10528  to */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10530:10537  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10510:10519  _transfer */\n      tag_138\n        /* \"erc721a/contracts/ERC721A.sol\":10510:10538  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_200:\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10567  to.isContract() */\n      tag_201\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10554  to */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10565  to.isContract */\n      and\n      tag_202\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10567  to.isContract() */\n      jump\t// in\n    tag_201:\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10628  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      dup1\n      iszero\n      tag_203\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":10572:10628  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      tag_204\n        /* \"erc721a/contracts/ERC721A.sol\":10603:10607  from */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10609:10611  to */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10613:10620  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10622:10627  _data */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10572:10602  _checkContractOnERC721Received */\n      tag_205\n        /* \"erc721a/contracts/ERC721A.sol\":10572:10628  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_204:\n        /* \"erc721a/contracts/ERC721A.sol\":10571:10628  !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10628  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n    tag_203:\n        /* \"erc721a/contracts/ERC721A.sol\":10548:10702  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      iszero\n      tag_176\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":10651:10691  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ToonzRewardsCardV2.sol\":349:376  string public baseExtension */\n    tag_92:\n      0x0a\n      dup1\n      sload\n      tag_154\n      swap1\n      tag_113\n      jump\t// in\n        /* \"contracts/ToonzRewardsCardV2.sol\":447:740  function tokenURI(uint tokenId) public view virtual override returns (string memory) {... */\n    tag_96:\n        /* \"contracts/ToonzRewardsCardV2.sol\":517:530  string memory */\n      0x60\n        /* \"contracts/ToonzRewardsCardV2.sol\":546:562  _exists(tokenId) */\n      tag_213\n        /* \"contracts/ToonzRewardsCardV2.sol\":554:561  tokenId */\n      dup3\n        /* \"contracts/ToonzRewardsCardV2.sol\":546:553  _exists */\n      tag_120\n        /* \"contracts/ToonzRewardsCardV2.sol\":546:562  _exists(tokenId) */\n      jump\t// in\n    tag_213:\n        /* \"contracts/ToonzRewardsCardV2.sol\":538:614  require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\") */\n      tag_214\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7684:7686   */\n      0x20\n        /* \"contracts/ToonzRewardsCardV2.sol\":538:614  require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7666:7687   */\n      mstore\n        /* \"#utility.yul\":7723:7725   */\n      0x2f\n        /* \"#utility.yul\":7703:7721   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7696:7726   */\n      mstore\n        /* \"#utility.yul\":7762:7796   */\n      0x4552433732314d657461646174613a2055524920717565727920666f72206e6f\n        /* \"#utility.yul\":7742:7760   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7735:7797   */\n      mstore\n      shl(0x89, 0x3732bc34b9ba32b73a103a37b5b2b7)\n        /* \"#utility.yul\":7813:7831   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7806:7851   */\n      mstore\n        /* \"#utility.yul\":7868:7887   */\n      0x84\n      add\n        /* \"contracts/ToonzRewardsCardV2.sol\":538:614  require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\") */\n      tag_148\n        /* \"#utility.yul\":7482:7893   */\n      jump\n        /* \"contracts/ToonzRewardsCardV2.sol\":538:614  require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\") */\n    tag_214:\n        /* \"contracts/ToonzRewardsCardV2.sol\":651:652  0 */\n      0x00\n        /* \"contracts/ToonzRewardsCardV2.sol\":633:640  baseURI */\n      0x09\n        /* \"contracts/ToonzRewardsCardV2.sol\":627:648  bytes(baseURI).length */\n      dup1\n      sload\n      tag_217\n      swap1\n      tag_113\n      jump\t// in\n    tag_217:\n      swap1\n      pop\n        /* \"contracts/ToonzRewardsCardV2.sol\":627:652  bytes(baseURI).length > 0 */\n      gt\n        /* \"contracts/ToonzRewardsCardV2.sol\":627:735  bytes(baseURI).length > 0... */\n      tag_218\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_109)\n    tag_218:\n        /* \"contracts/ToonzRewardsCardV2.sol\":687:694  baseURI */\n      0x09\n        /* \"contracts/ToonzRewardsCardV2.sol\":696:714  tokenId.toString() */\n      tag_220\n        /* \"contracts/ToonzRewardsCardV2.sol\":696:703  tokenId */\n      dup4\n        /* \"contracts/ToonzRewardsCardV2.sol\":696:712  tokenId.toString */\n      tag_221\n        /* \"contracts/ToonzRewardsCardV2.sol\":696:714  tokenId.toString() */\n      jump\t// in\n    tag_220:\n        /* \"contracts/ToonzRewardsCardV2.sol\":716:729  baseExtension */\n      0x0a\n        /* \"contracts/ToonzRewardsCardV2.sol\":670:730  abi.encodePacked(baseURI, tokenId.toString(), baseExtension) */\n      add(0x20, mload(0x40))\n      tag_222\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_223\n      jump\t// in\n    tag_222:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/ToonzRewardsCardV2.sol\":620:735  return bytes(baseURI).length > 0... */\n      swap3\n        /* \"contracts/ToonzRewardsCardV2.sol\":447:740  function tokenURI(uint tokenId) public view virtual override returns (string memory) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_105:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_227\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_227:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_228\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_148\n      swap1\n      tag_149\n      jump\t// in\n    tag_228:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_231\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9665:9667   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9647:9668   */\n      mstore\n        /* \"#utility.yul\":9704:9706   */\n      0x26\n        /* \"#utility.yul\":9684:9702   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9677:9707   */\n      mstore\n        /* \"#utility.yul\":9743:9777   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":9723:9741   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9716:9778   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":9794:9812   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9787:9823   */\n      mstore\n        /* \"#utility.yul\":9840:9859   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_148\n        /* \"#utility.yul\":9463:9865   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_231:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_234\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_168\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":10954:11126  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_120:\n        /* \"erc721a/contracts/ERC721A.sol\":11011:11015  bool */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":11074:11087  _currentIndex */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":11064:11071  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":11064:11087  tokenId < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":11034:11119  _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned */\n      dup1\n      iszero\n      tag_109\n      jumpi\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":11092:11112  _ownerships[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":11092:11103  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":11092:11112  _ownerships[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":11092:11119  _ownerships[tokenId].burned */\n      sload\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":11091:11119  !_ownerships[tokenId].burned */\n      iszero\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":10954:11126  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":18894:19083  function _approve(... */\n    tag_132:\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19028  _tokenApprovals[tokenId] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19019  _tokenApprovals */\n      0x06\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19028  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19033  _tokenApprovals[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      dup2\n      and\n      swap2\n      dup3\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":19048:19076  Approval(owner, to, tokenId) */\n      swap2\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19028  _tokenApprovals[tokenId] */\n      dup6\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":19048:19076  Approval(owner, to, tokenId) */\n      swap2\n      dup6\n      and\n      swap2\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":18894:19083  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":13964:16046  function _transfer(... */\n    tag_138:\n        /* \"erc721a/contracts/ERC721A.sol\":14074:14109  TokenOwnership memory prevOwnership */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":14112:14133  _ownershipOf(tokenId) */\n      tag_244\n        /* \"erc721a/contracts/ERC721A.sol\":14125:14132  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":14112:14124  _ownershipOf */\n      tag_143\n        /* \"erc721a/contracts/ERC721A.sol\":14112:14133  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_244:\n        /* \"erc721a/contracts/ERC721A.sol\":14074:14133  TokenOwnership memory prevOwnership = _ownershipOf(tokenId) */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14170:14174  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14148:14174  prevOwnership.addr != from */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":14148:14161  prevOwnership */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":14148:14166  prevOwnership.addr */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14148:14174  prevOwnership.addr != from */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14144:14211  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n      tag_245\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":14183:14211  TransferFromIncorrectOwner() */\n      mload(0x40)\n      shl(0xe8, 0xa11481)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14144:14211  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n    tag_245:\n        /* \"erc721a/contracts/ERC721A.sol\":14222:14244  bool isApprovedOrOwner */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14248:14268  _msgSender() == from */\n      dup7\n      and\n      eq\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":14248:14320  _msgSender() == from ||... */\n      tag_248\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14284:14320  isApprovedForAll(from, _msgSender()) */\n      tag_248\n        /* \"erc721a/contracts/ERC721A.sol\":14301:14305  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":9650:9812  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_99\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":14284:14320  isApprovedForAll(from, _msgSender()) */\n    tag_248:\n        /* \"erc721a/contracts/ERC721A.sol\":14248:14372  _msgSender() == from ||... */\n      dup1\n      tag_250\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":14336:14356  getApproved(tokenId) */\n      tag_252\n        /* \"erc721a/contracts/ERC721A.sol\":14348:14355  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":14336:14347  getApproved */\n      tag_37\n        /* \"erc721a/contracts/ERC721A.sol\":14336:14356  getApproved(tokenId) */\n      jump\t// in\n    tag_252:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14336:14372  getApproved(tokenId) == _msgSender() */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14248:14372  _msgSender() == from ||... */\n    tag_250:\n        /* \"erc721a/contracts/ERC721A.sol\":14222:14373  bool isApprovedOrOwner = (_msgSender() == from ||... */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14389:14406  isApprovedOrOwner */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":14384:14450  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n      tag_253\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":14415:14450  TransferCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x2ce44b5f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14384:14450  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n    tag_253:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14464:14480  to == address(0) */\n      dup5\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":14460:14512  if (to == address(0)) revert TransferToZeroAddress() */\n      tag_254\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":14489:14512  TransferToZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x3a954ecd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14460:14512  if (to == address(0)) revert TransferToZeroAddress() */\n    tag_254:\n        /* \"erc721a/contracts/ERC721A.sol\":14628:14663  _approve(address(0), tokenId, from) */\n      tag_257\n        /* \"erc721a/contracts/ERC721A.sol\":14645:14646  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":14649:14656  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":14658:14662  from */\n      dup8\n        /* \"erc721a/contracts/ERC721A.sol\":14628:14636  _approve */\n      tag_132\n        /* \"erc721a/contracts/ERC721A.sol\":14628:14663  _approve(address(0), tokenId, from) */\n      jump\t// in\n    tag_257:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14953:14971  _addressData[from] */\n      dup6\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":14953:14965  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":14953:14971  _addressData[from] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":14953:14984  _addressData[from].balance -= 1 */\n      dup1\n      sload\n      not(sub(shl(0x40, 0x01), 0x01))\n      dup1\n      dup3\n      and\n      sub(shl(0x40, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      not(0x00)\n      add\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":14998:15014  _addressData[to] */\n      dup10\n      dup7\n      and\n      dup1\n      dup7\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":14998:15027  _addressData[to].balance += 1 */\n      dup1\n      sload\n      swap4\n      dup5\n      and\n      swap4\n      dup4\n      and\n      0x01\n      swap1\n      dup2\n      add\n      dup5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap1\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15076:15096  _ownerships[tokenId] */\n      dup10\n      dup7\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":15076:15087  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":15076:15096  _ownerships[tokenId] */\n      swap1\n      swap5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15110:15128  currSlot.addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":15142:15191  currSlot.startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap5\n      or\n      shl(0xa0, 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15175:15190  block.timestamp */\n      timestamp\n        /* \"erc721a/contracts/ERC721A.sol\":15142:15191  currSlot.startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      dup4\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15461:15472  tokenId + 1 */\n      dup8\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":15520:15544  _ownerships[nextTokenId] */\n      dup1\n      dup5\n      mstore\n      swap3\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15562:15575  nextSlot.addr */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":15076:15096  _ownerships[tokenId] */\n      swap2\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":15520:15544  _ownerships[nextTokenId] */\n      swap1\n      swap2\n        /* \"erc721a/contracts/ERC721A.sol\":15562:15575  nextSlot.addr */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":15558:15935  if (nextSlot.addr == address(0)) {... */\n      tag_259\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":15769:15782  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":15754:15765  nextTokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":15754:15782  nextTokenId != _currentIndex */\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":15750:15921  if (nextTokenId != _currentIndex) {... */\n      tag_259\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":15806:15826  nextSlot.addr = from */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":15874:15902  prevOwnership.startTimestamp */\n      0x20\n      dup7\n      add\n      mload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15848:15902  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      and\n      shl(0xa0, 0x01)\n      mul\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15806:15826  nextSlot.addr = from */\n      dup11\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":15848:15902  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      or\n      or\n      dup2\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15750:15921  if (nextTokenId != _currentIndex) {... */\n    tag_259:\n        /* \"erc721a/contracts/ERC721A.sol\":14929:15945  unchecked {... */\n      pop\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":15979:15986  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":15975:15977  to */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15960:15987  Transfer(from, to, tokenId) */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":15969:15973  from */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15960:15987  Transfer(from, to, tokenId) */\n      and\n      0x00\n      dup1\n      mload\n      0x20\n      data_ada389e1fc24a8587c776340efb91b36e675792ab631816100d55df0b5cf3cbc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":15997:16039  _afterTokenTransfers(from, to, tokenId, 1) */\n    tag_260:\n        /* \"erc721a/contracts/ERC721A.sol\":14064:16046  {... */\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":13964:16046  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":6253:7337  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_143:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":6363:6370  tokenId */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":6443:6456  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":6436:6440  curr */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":6436:6456  curr < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":6405:7273  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n      iszero\n      tag_267\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":6476:6507  TokenOwnership memory ownership */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":6510:6527  _ownerships[curr] */\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":6510:6521  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":6510:6527  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":6476:6527  TokenOwnership memory ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup3\n      mstore\n      shl(0xa0, 0x01)\n      dup2\n      div\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      swap2\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":6545:7259  if (!ownership.burned) {... */\n      tag_271\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":6594:6608  ownership.addr */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":6594:6622  ownership.addr != address(0) */\n      and\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":6590:6689  if (ownership.addr != address(0)) {... */\n      tag_269\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":6657:6666  ownership */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":6253:7337  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":6590:6689  if (ownership.addr != address(0)) {... */\n    tag_269:\n      pop\n      not(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":7025:7031  curr-- */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":7069:7086  _ownerships[curr] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7069:7080  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":7069:7086  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":7057:7086  ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup1\n      dup4\n      mstore\n      shl(0xa0, 0x01)\n      dup3\n      div\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap4\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7116:7144  ownership.addr != address(0) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":7112:7219  if (ownership.addr != address(0)) {... */\n      tag_272\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7183:7192  ownership */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":6253:7337  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7112:7219  if (ownership.addr != address(0)) {... */\n    tag_272:\n        /* \"erc721a/contracts/ERC721A.sol\":6986:7241  while (true) {... */\n      jump(tag_269)\n    tag_271:\n        /* \"erc721a/contracts/ERC721A.sol\":6458:7273  {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":6405:7273  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n    tag_267:\n        /* \"erc721a/contracts/ERC721A.sol\":7299:7330  OwnerQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe1, 0x6f96cda1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_168:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x08\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":11132:11234  function _safeMint(address to, uint256 quantity) internal {... */\n    tag_183:\n        /* \"erc721a/contracts/ERC721A.sol\":11200:11227  _safeMint(to, quantity, '') */\n      tag_275\n        /* \"erc721a/contracts/ERC721A.sol\":11210:11212  to */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":11214:11222  quantity */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":11200:11227  _safeMint(to, quantity, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":11200:11209  _safeMint */\n      tag_276\n        /* \"erc721a/contracts/ERC721A.sol\":11200:11227  _safeMint(to, quantity, '') */\n      jump\t// in\n    tag_275:\n        /* \"erc721a/contracts/ERC721A.sol\":11132:11234  function _safeMint(address to, uint256 quantity) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_202:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      iszero\n      iszero\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":19564:20214  function _checkContractOnERC721Received(... */\n    tag_205:\n        /* \"erc721a/contracts/ERC721A.sol\":19742:19814  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      mload(0x40)\n      shl(0xe1, 0x0a85bd01)\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":19722:19726  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":19742:19778  IERC721Receiver(to).onERC721Received */\n      dup6\n      and\n      swap1\n      0x150b7a02\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19742:19814  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      tag_280\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19793:19797  from */\n      dup10\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19799:19806  tokenId */\n      dup9\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19808:19813  _data */\n      dup9\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19742:19814  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      0x04\n      add\n      tag_281\n      jump\t// in\n    tag_280:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_282\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_283\n      swap2\n      dup2\n      add\n      swap1\n      tag_284\n      jump\t// in\n    tag_283:\n      0x01\n    tag_282:\n        /* \"erc721a/contracts/ERC721A.sol\":19738:20208  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n      tag_285\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_290\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_289)\n    tag_290:\n      0x60\n      swap2\n      pop\n    tag_289:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":19973:19979  reason */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":19973:19986  reason.length */\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":19990:19991  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":19973:19991  reason.length == 0 */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":19969:20198  if (reason.length == 0) {... */\n      tag_291\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":20018:20058  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19969:20198  if (reason.length == 0) {... */\n    tag_291:\n        /* \"erc721a/contracts/ERC721A.sol\":20158:20164  reason */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":20152:20165  mload(reason) */\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":20143:20149  reason */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":20139:20141  32 */\n      0x20\n        /* \"erc721a/contracts/ERC721A.sol\":20135:20150  add(32, reason) */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":20128:20166  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19738:20208  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_285:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":19860:19915  retval == IERC721Receiver(to).onERC721Received.selector */\n      and\n      shl(0xe1, 0x0a85bd01)\n      eq\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":19738:20208  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_293:\n        /* \"erc721a/contracts/ERC721A.sol\":19564:20214  function _checkContractOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_221:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":384:397  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:606  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":610:611  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:611  value == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n      tag_295\n      jumpi\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:637  return \"0\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x01\n      dup2\n      mstore\n      shl(0xfc, 0x03)\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n    tag_295:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":672:677  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":657:669  uint256 temp */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n    tag_296:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":718:727  temp != 0 */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      tag_297\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":743:751  digits++ */\n      dup1\n      tag_298\n      dup2\n      tag_185\n      jump\t// in\n    tag_298:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      tag_299\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":773:775  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      dup4\n      tag_300\n      jump\t// in\n    tag_299:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      jump(tag_296)\n    tag_297:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:814  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":827:833  digits */\n      dup2\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":817:834  new bytes(digits) */\n      dup2\n      gt\n      iszero\n      tag_302\n      jumpi\n      tag_302\n      tag_303\n      jump\t// in\n    tag_302:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_304\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_304:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:834  bytes memory buffer = new bytes(digits) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n    tag_305:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:861  value != 0 */\n      dup5\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      tag_293\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      tag_307\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":887:888  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      dup4\n      tag_308\n      jump\t// in\n    tag_307:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_309\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:950  value */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_310\n      jump\t// in\n    tag_309:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_311\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:934  48 */\n      0x30\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_312\n      jump\t// in\n    tag_311:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":919:958  bytes1(uint8(48 + uint256(value % 10))) */\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:908  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":909:915  digits */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:916  buffer[digits] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_314\n      jumpi\n      tag_314\n      tag_181\n      jump\t// in\n    tag_314:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:958  buffer[digits] = bytes1(uint8(48 + uint256(value % 10))) */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      tag_315\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":981:983  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      dup7\n      tag_300\n      jump\t// in\n    tag_315:\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      jump(tag_305)\n        /* \"erc721a/contracts/ERC721A.sol\":11585:11742  function _safeMint(... */\n    tag_276:\n        /* \"erc721a/contracts/ERC721A.sol\":11703:11735  _mint(to, quantity, _data, true) */\n      tag_131\n        /* \"erc721a/contracts/ERC721A.sol\":11709:11711  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":11713:11721  quantity */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":11723:11728  _data */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":11730:11734  true */\n      0x01\n        /* \"erc721a/contracts/ERC721A.sol\":12122:12142  uint256 startTokenId */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":12145:12158  _currentIndex */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":12172:12188  to == address(0) */\n      dup6\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":12168:12216  if (to == address(0)) revert MintToZeroAddress() */\n      tag_322\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":12197:12216  MintToZeroAddress() */\n      mload(0x40)\n      shl(0xe8, 0x2e0763)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":12168:12216  if (to == address(0)) revert MintToZeroAddress() */\n    tag_322:\n        /* \"erc721a/contracts/ERC721A.sol\":12230:12238  quantity */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":12242:12243  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":12230:12243  quantity == 0 */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":12226:12270  if (quantity == 0) revert MintZeroQuantity() */\n      tag_323\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":12252:12270  MintZeroQuantity() */\n      mload(0x40)\n      shl(0xe0, 0xb562e8dd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":12226:12270  if (quantity == 0) revert MintZeroQuantity() */\n    tag_323:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":12613:12629  _addressData[to] */\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":12613:12625  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":12613:12629  _addressData[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":12613:12657  _addressData[to].balance += uint64(quantity) */\n      dup1\n      sload\n      not(sub(shl(0x80, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":12671:12720  _addressData[to].numberMinted += uint64(quantity) */\n      dup2\n      and\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":12613:12657  _addressData[to].balance += uint64(quantity) */\n      dup1\n      dup4\n      and\n      dup13\n      add\n      dup2\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":12671:12720  _addressData[to].numberMinted += uint64(quantity) */\n      swap2\n      dup3\n      or\n      shl(0x40, 0x01)\n      not(sub(shl(0x40, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":12613:12657  _addressData[to].balance += uint64(quantity) */\n      swap1\n      swap5\n      and\n      swap1\n      swap3\n      or\n        /* \"erc721a/contracts/ERC721A.sol\":12671:12720  _addressData[to].numberMinted += uint64(quantity) */\n      dup4\n      swap1\n      div\n      dup2\n      and\n      dup13\n      add\n      dup2\n      and\n      swap1\n      swap3\n      mul\n      or\n      swap1\n      swap2\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":12735:12760  _ownerships[startTokenId] */\n      dup6\n      dup5\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":12735:12746  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":12735:12760  _ownerships[startTokenId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":12735:12770  _ownerships[startTokenId].addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":12784:12850  _ownerships[startTokenId].startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap3\n      or\n      shl(0xa0, 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":12834:12849  block.timestamp */\n      timestamp\n        /* \"erc721a/contracts/ERC721A.sol\":12784:12850  _ownerships[startTokenId].startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      swap1\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":12735:12760  _ownerships[startTokenId] */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":12928:12951  updatedIndex + quantity */\n      dup1\n      dup6\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":12970:12974  safe */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":12970:12993  safe && to.isContract() */\n      dup1\n      iszero\n      tag_326\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":12978:12993  to.isContract() */\n      tag_326\n        /* \"erc721a/contracts/ERC721A.sol\":12978:12980  to */\n      dup8\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":12978:12991  to.isContract */\n      and\n      tag_202\n        /* \"erc721a/contracts/ERC721A.sol\":12978:12993  to.isContract() */\n      jump\t// in\n    tag_326:\n        /* \"erc721a/contracts/ERC721A.sol\":12966:13594  if (safe && to.isContract()) {... */\n      iszero\n      tag_327\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13013:13322  do {... */\n    tag_328:\n        /* \"erc721a/contracts/ERC721A.sol\":13043:13081  Transfer(address(0), to, updatedIndex) */\n      mload(0x40)\n        /* \"erc721a/contracts/ERC721A.sol\":13068:13080  updatedIndex */\n      dup3\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":13043:13081  Transfer(address(0), to, updatedIndex) */\n      dup10\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13060:13061  0 */\n      0x00\n      swap1\n      0x00\n      dup1\n      mload\n      0x20\n      data_ada389e1fc24a8587c776340efb91b36e675792ab631816100d55df0b5cf3cbc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":13043:13081  Transfer(address(0), to, updatedIndex) */\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13060:13061  0 */\n      dup3\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13043:13081  Transfer(address(0), to, updatedIndex) */\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":13108:13177  _checkContractOnERC721Received(address(0), to, updatedIndex++, _data) */\n      tag_331\n        /* \"erc721a/contracts/ERC721A.sol\":13147:13148  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":13151:13153  to */\n      dup9\n        /* \"erc721a/contracts/ERC721A.sol\":13155:13169  updatedIndex++ */\n      dup5\n      dup1\n      0x01\n      add\n      swap6\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":13171:13176  _data */\n      dup9\n        /* \"erc721a/contracts/ERC721A.sol\":13108:13138  _checkContractOnERC721Received */\n      tag_205\n        /* \"erc721a/contracts/ERC721A.sol\":13108:13177  _checkContractOnERC721Received(address(0), to, updatedIndex++, _data) */\n      jump\t// in\n    tag_331:\n        /* \"erc721a/contracts/ERC721A.sol\":13103:13275  if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {... */\n      tag_332\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13212:13252  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":13103:13275  if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {... */\n    tag_332:\n        /* \"erc721a/contracts/ERC721A.sol\":13317:13320  end */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":13301:13313  updatedIndex */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":13301:13320  updatedIndex != end */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":13013:13322  do {... */\n      tag_328\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13401:13413  startTokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":13384:13397  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":13384:13413  _currentIndex != startTokenId */\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":13380:13423  if (_currentIndex != startTokenId) revert() */\n      tag_333\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13415:13423  revert() */\n      0x00\n      dup1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":13380:13423  if (_currentIndex != startTokenId) revert() */\n    tag_333:\n        /* \"erc721a/contracts/ERC721A.sol\":12966:13594  if (safe && to.isContract()) {... */\n      jump(tag_334)\n    tag_327:\n        /* \"erc721a/contracts/ERC721A.sol\":13462:13580  do {... */\n    tag_335:\n        /* \"erc721a/contracts/ERC721A.sol\":13492:13532  Transfer(address(0), to, updatedIndex++) */\n      mload(0x40)\n        /* \"erc721a/contracts/ERC721A.sol\":13517:13531  updatedIndex++ */\n      0x01\n      dup4\n      add\n      swap3\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":13492:13532  Transfer(address(0), to, updatedIndex++) */\n      dup10\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13509:13510  0 */\n      0x00\n      swap1\n      0x00\n      dup1\n      mload\n      0x20\n      data_ada389e1fc24a8587c776340efb91b36e675792ab631816100d55df0b5cf3cbc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":13492:13532  Transfer(address(0), to, updatedIndex++) */\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13509:13510  0 */\n      dup3\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13492:13532  Transfer(address(0), to, updatedIndex++) */\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":13575:13578  end */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":13559:13571  updatedIndex */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":13559:13578  updatedIndex != end */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":13462:13580  do {... */\n      tag_335\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":12966:13594  if (safe && to.isContract()) {... */\n    tag_334:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":13607:13620  _currentIndex */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":13607:13635  _currentIndex = updatedIndex */\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":13655:13715  _afterTokenTransfers(address(0), to, startTokenId, quantity) */\n      tag_260\n        /* \"contracts/ToonzRewardsCardV2.sol\":744:944  function giftCard(address[] calldata _recipients) public onlyOwner {... */\n      jump\n    tag_152:\n      dup3\n      dup1\n      sload\n      tag_339\n      swap1\n      tag_113\n      jump\t// in\n    tag_339:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_341\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_344)\n    tag_341:\n      dup3\n      0x1f\n      lt\n      tag_342\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_344)\n    tag_342:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_344\n      jumpi\n      swap2\n      dup3\n      add\n    tag_343:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_344\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_343)\n    tag_344:\n      pop\n      tag_345\n      swap3\n      swap2\n      pop\n      tag_346\n      jump\t// in\n    tag_345:\n      pop\n      swap1\n      jump\t// out\n    tag_346:\n    tag_347:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_345\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_347)\n        /* \"#utility.yul\":14:145   */\n    tag_349:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":88:120   */\n      dup2\n      and\n        /* \"#utility.yul\":78:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":68:139   */\n      tag_234\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":150:395   */\n    tag_26:\n        /* \"#utility.yul\":208:214   */\n      0x00\n        /* \"#utility.yul\":261:263   */\n      0x20\n        /* \"#utility.yul\":249:258   */\n      dup3\n        /* \"#utility.yul\":240:247   */\n      dup5\n        /* \"#utility.yul\":236:259   */\n      sub\n        /* \"#utility.yul\":232:264   */\n      slt\n        /* \"#utility.yul\":229:281   */\n      iszero\n      tag_363\n      jumpi\n        /* \"#utility.yul\":277:278   */\n      0x00\n        /* \"#utility.yul\":274:275   */\n      dup1\n        /* \"#utility.yul\":267:279   */\n      revert\n        /* \"#utility.yul\":229:281   */\n    tag_363:\n        /* \"#utility.yul\":316:325   */\n      dup2\n        /* \"#utility.yul\":303:326   */\n      calldataload\n        /* \"#utility.yul\":335:365   */\n      tag_364\n        /* \"#utility.yul\":359:364   */\n      dup2\n        /* \"#utility.yul\":335:365   */\n      tag_349\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":384:389   */\n      swap4\n        /* \"#utility.yul\":150:395   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":592:850   */\n    tag_350:\n        /* \"#utility.yul\":664:665   */\n      0x00\n        /* \"#utility.yul\":674:787   */\n    tag_367:\n        /* \"#utility.yul\":688:694   */\n      dup4\n        /* \"#utility.yul\":685:686   */\n      dup2\n        /* \"#utility.yul\":682:695   */\n      lt\n        /* \"#utility.yul\":674:787   */\n      iszero\n      tag_369\n      jumpi\n        /* \"#utility.yul\":764:775   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":758:776   */\n      mload\n        /* \"#utility.yul\":745:756   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":738:777   */\n      mstore\n        /* \"#utility.yul\":710:712   */\n      0x20\n        /* \"#utility.yul\":703:713   */\n      add\n        /* \"#utility.yul\":674:787   */\n      jump(tag_367)\n    tag_369:\n        /* \"#utility.yul\":805:811   */\n      dup4\n        /* \"#utility.yul\":802:803   */\n      dup2\n        /* \"#utility.yul\":799:812   */\n      gt\n        /* \"#utility.yul\":796:844   */\n      iszero\n      tag_176\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":840:841   */\n      0x00\n        /* \"#utility.yul\":822:838   */\n      swap2\n      add\n        /* \"#utility.yul\":815:842   */\n      mstore\n        /* \"#utility.yul\":592:850   */\n      jump\t// out\n        /* \"#utility.yul\":855:1113   */\n    tag_351:\n        /* \"#utility.yul\":897:900   */\n      0x00\n        /* \"#utility.yul\":935:940   */\n      dup2\n        /* \"#utility.yul\":929:941   */\n      mload\n        /* \"#utility.yul\":962:968   */\n      dup1\n        /* \"#utility.yul\":957:960   */\n      dup5\n        /* \"#utility.yul\":950:969   */\n      mstore\n        /* \"#utility.yul\":978:1041   */\n      tag_372\n        /* \"#utility.yul\":1034:1040   */\n      dup2\n        /* \"#utility.yul\":1027:1031   */\n      0x20\n        /* \"#utility.yul\":1022:1025   */\n      dup7\n        /* \"#utility.yul\":1018:1032   */\n      add\n        /* \"#utility.yul\":1011:1015   */\n      0x20\n        /* \"#utility.yul\":1004:1009   */\n      dup7\n        /* \"#utility.yul\":1000:1016   */\n      add\n        /* \"#utility.yul\":978:1041   */\n      tag_350\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":1095:1097   */\n      0x1f\n        /* \"#utility.yul\":1074:1089   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1070:1099   */\n      and\n        /* \"#utility.yul\":1061:1100   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1102:1106   */\n      0x20\n        /* \"#utility.yul\":1057:1107   */\n      add\n      swap3\n        /* \"#utility.yul\":855:1113   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1118:1338   */\n    tag_33:\n        /* \"#utility.yul\":1267:1269   */\n      0x20\n        /* \"#utility.yul\":1256:1265   */\n      dup2\n        /* \"#utility.yul\":1249:1270   */\n      mstore\n        /* \"#utility.yul\":1230:1234   */\n      0x00\n        /* \"#utility.yul\":1287:1332   */\n      tag_364\n        /* \"#utility.yul\":1328:1330   */\n      0x20\n        /* \"#utility.yul\":1317:1326   */\n      dup4\n        /* \"#utility.yul\":1313:1331   */\n      add\n        /* \"#utility.yul\":1305:1311   */\n      dup5\n        /* \"#utility.yul\":1287:1332   */\n      tag_351\n      jump\t// in\n        /* \"#utility.yul\":1343:1523   */\n    tag_36:\n        /* \"#utility.yul\":1402:1408   */\n      0x00\n        /* \"#utility.yul\":1455:1457   */\n      0x20\n        /* \"#utility.yul\":1443:1452   */\n      dup3\n        /* \"#utility.yul\":1434:1441   */\n      dup5\n        /* \"#utility.yul\":1430:1453   */\n      sub\n        /* \"#utility.yul\":1426:1458   */\n      slt\n        /* \"#utility.yul\":1423:1475   */\n      iszero\n      tag_376\n      jumpi\n        /* \"#utility.yul\":1471:1472   */\n      0x00\n        /* \"#utility.yul\":1468:1469   */\n      dup1\n        /* \"#utility.yul\":1461:1473   */\n      revert\n        /* \"#utility.yul\":1423:1475   */\n    tag_376:\n      pop\n        /* \"#utility.yul\":1494:1517   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1343:1523   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1736:1909   */\n    tag_352:\n        /* \"#utility.yul\":1804:1824   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1853:1884   */\n      dup2\n      and\n        /* \"#utility.yul\":1843:1885   */\n      dup2\n      eq\n        /* \"#utility.yul\":1833:1903   */\n      tag_379\n      jumpi\n        /* \"#utility.yul\":1899:1900   */\n      0x00\n        /* \"#utility.yul\":1896:1897   */\n      dup1\n        /* \"#utility.yul\":1889:1901   */\n      revert\n        /* \"#utility.yul\":1833:1903   */\n    tag_379:\n        /* \"#utility.yul\":1736:1909   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1914:2168   */\n    tag_42:\n        /* \"#utility.yul\":1982:1988   */\n      0x00\n        /* \"#utility.yul\":1990:1996   */\n      dup1\n        /* \"#utility.yul\":2043:2045   */\n      0x40\n        /* \"#utility.yul\":2031:2040   */\n      dup4\n        /* \"#utility.yul\":2022:2029   */\n      dup6\n        /* \"#utility.yul\":2018:2041   */\n      sub\n        /* \"#utility.yul\":2014:2046   */\n      slt\n        /* \"#utility.yul\":2011:2063   */\n      iszero\n      tag_381\n      jumpi\n        /* \"#utility.yul\":2059:2060   */\n      0x00\n        /* \"#utility.yul\":2056:2057   */\n      dup1\n        /* \"#utility.yul\":2049:2061   */\n      revert\n        /* \"#utility.yul\":2011:2063   */\n    tag_381:\n        /* \"#utility.yul\":2082:2111   */\n      tag_382\n        /* \"#utility.yul\":2101:2110   */\n      dup4\n        /* \"#utility.yul\":2082:2111   */\n      tag_352\n      jump\t// in\n    tag_382:\n        /* \"#utility.yul\":2072:2111   */\n      swap5\n        /* \"#utility.yul\":2158:2160   */\n      0x20\n        /* \"#utility.yul\":2143:2161   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2130:2162   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1914:2168   */\n      jump\t// out\n        /* \"#utility.yul\":2355:2683   */\n    tag_50:\n        /* \"#utility.yul\":2432:2438   */\n      0x00\n        /* \"#utility.yul\":2440:2446   */\n      dup1\n        /* \"#utility.yul\":2448:2454   */\n      0x00\n        /* \"#utility.yul\":2501:2503   */\n      0x60\n        /* \"#utility.yul\":2489:2498   */\n      dup5\n        /* \"#utility.yul\":2480:2487   */\n      dup7\n        /* \"#utility.yul\":2476:2499   */\n      sub\n        /* \"#utility.yul\":2472:2504   */\n      slt\n        /* \"#utility.yul\":2469:2521   */\n      iszero\n      tag_385\n      jumpi\n        /* \"#utility.yul\":2517:2518   */\n      0x00\n        /* \"#utility.yul\":2514:2515   */\n      dup1\n        /* \"#utility.yul\":2507:2519   */\n      revert\n        /* \"#utility.yul\":2469:2521   */\n    tag_385:\n        /* \"#utility.yul\":2540:2569   */\n      tag_386\n        /* \"#utility.yul\":2559:2568   */\n      dup5\n        /* \"#utility.yul\":2540:2569   */\n      tag_352\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":2530:2569   */\n      swap3\n      pop\n        /* \"#utility.yul\":2588:2626   */\n      tag_387\n        /* \"#utility.yul\":2622:2624   */\n      0x20\n        /* \"#utility.yul\":2611:2620   */\n      dup6\n        /* \"#utility.yul\":2607:2625   */\n      add\n        /* \"#utility.yul\":2588:2626   */\n      tag_352\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":2578:2626   */\n      swap2\n      pop\n        /* \"#utility.yul\":2673:2675   */\n      0x40\n        /* \"#utility.yul\":2662:2671   */\n      dup5\n        /* \"#utility.yul\":2658:2676   */\n      add\n        /* \"#utility.yul\":2645:2677   */\n      calldataload\n        /* \"#utility.yul\":2635:2677   */\n      swap1\n      pop\n        /* \"#utility.yul\":2355:2683   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2688:2815   */\n    tag_303:\n        /* \"#utility.yul\":2749:2759   */\n      0x4e487b71\n        /* \"#utility.yul\":2744:2747   */\n      0xe0\n        /* \"#utility.yul\":2740:2760   */\n      shl\n        /* \"#utility.yul\":2737:2738   */\n      0x00\n        /* \"#utility.yul\":2730:2761   */\n      mstore\n        /* \"#utility.yul\":2780:2784   */\n      0x41\n        /* \"#utility.yul\":2777:2778   */\n      0x04\n        /* \"#utility.yul\":2770:2785   */\n      mstore\n        /* \"#utility.yul\":2804:2808   */\n      0x24\n        /* \"#utility.yul\":2801:2802   */\n      0x00\n        /* \"#utility.yul\":2794:2809   */\n      revert\n        /* \"#utility.yul\":2820:3452   */\n    tag_353:\n        /* \"#utility.yul\":2885:2890   */\n      0x00\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":2945:2959   */\n      dup1\n      dup5\n      gt\n        /* \"#utility.yul\":2942:2982   */\n      iszero\n      tag_391\n      jumpi\n        /* \"#utility.yul\":2962:2980   */\n      tag_391\n      tag_303\n      jump\t// in\n    tag_391:\n        /* \"#utility.yul\":3037:3039   */\n      0x40\n        /* \"#utility.yul\":3031:3040   */\n      mload\n        /* \"#utility.yul\":3005:3007   */\n      0x1f\n        /* \"#utility.yul\":3091:3106   */\n      dup6\n      add\n      not(0x1f)\n        /* \"#utility.yul\":3087:3111   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":3113:3115   */\n      0x3f\n        /* \"#utility.yul\":3083:3116   */\n      add\n        /* \"#utility.yul\":3079:3121   */\n      and\n        /* \"#utility.yul\":3067:3122   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":3137:3155   */\n      dup3\n      dup3\n      gt\n        /* \"#utility.yul\":3157:3179   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":3134:3180   */\n      or\n        /* \"#utility.yul\":3131:3203   */\n      iszero\n      tag_393\n      jumpi\n        /* \"#utility.yul\":3183:3201   */\n      tag_393\n      tag_303\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":3223:3233   */\n      dup2\n        /* \"#utility.yul\":3219:3221   */\n      0x40\n        /* \"#utility.yul\":3212:3234   */\n      mstore\n        /* \"#utility.yul\":3252:3258   */\n      dup1\n        /* \"#utility.yul\":3243:3258   */\n      swap4\n      pop\n        /* \"#utility.yul\":3282:3288   */\n      dup6\n        /* \"#utility.yul\":3274:3280   */\n      dup2\n        /* \"#utility.yul\":3267:3289   */\n      mstore\n        /* \"#utility.yul\":3322:3325   */\n      dup7\n        /* \"#utility.yul\":3313:3319   */\n      dup7\n        /* \"#utility.yul\":3308:3311   */\n      dup7\n        /* \"#utility.yul\":3304:3320   */\n      add\n        /* \"#utility.yul\":3301:3326   */\n      gt\n        /* \"#utility.yul\":3298:3343   */\n      iszero\n      tag_394\n      jumpi\n        /* \"#utility.yul\":3339:3340   */\n      0x00\n        /* \"#utility.yul\":3336:3337   */\n      dup1\n        /* \"#utility.yul\":3329:3341   */\n      revert\n        /* \"#utility.yul\":3298:3343   */\n    tag_394:\n        /* \"#utility.yul\":3389:3395   */\n      dup6\n        /* \"#utility.yul\":3384:3387   */\n      dup6\n        /* \"#utility.yul\":3377:3381   */\n      0x20\n        /* \"#utility.yul\":3369:3375   */\n      dup4\n        /* \"#utility.yul\":3365:3382   */\n      add\n        /* \"#utility.yul\":3352:3396   */\n      calldatacopy\n        /* \"#utility.yul\":3444:3445   */\n      0x00\n        /* \"#utility.yul\":3437:3441   */\n      0x20\n        /* \"#utility.yul\":3428:3434   */\n      dup8\n        /* \"#utility.yul\":3420:3426   */\n      dup4\n        /* \"#utility.yul\":3416:3435   */\n      add\n        /* \"#utility.yul\":3412:3442   */\n      add\n        /* \"#utility.yul\":3405:3446   */\n      mstore\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2820:3452   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3457:3679   */\n    tag_354:\n        /* \"#utility.yul\":3500:3505   */\n      0x00\n        /* \"#utility.yul\":3553:3556   */\n      dup3\n        /* \"#utility.yul\":3546:3550   */\n      0x1f\n        /* \"#utility.yul\":3538:3544   */\n      dup4\n        /* \"#utility.yul\":3534:3551   */\n      add\n        /* \"#utility.yul\":3530:3557   */\n      slt\n        /* \"#utility.yul\":3520:3575   */\n      tag_396\n      jumpi\n        /* \"#utility.yul\":3571:3572   */\n      0x00\n        /* \"#utility.yul\":3568:3569   */\n      dup1\n        /* \"#utility.yul\":3561:3573   */\n      revert\n        /* \"#utility.yul\":3520:3575   */\n    tag_396:\n        /* \"#utility.yul\":3593:3673   */\n      tag_364\n        /* \"#utility.yul\":3669:3672   */\n      dup4\n        /* \"#utility.yul\":3660:3666   */\n      dup4\n        /* \"#utility.yul\":3647:3667   */\n      calldataload\n        /* \"#utility.yul\":3640:3644   */\n      0x20\n        /* \"#utility.yul\":3632:3638   */\n      dup6\n        /* \"#utility.yul\":3628:3645   */\n      add\n        /* \"#utility.yul\":3593:3673   */\n      tag_353\n      jump\t// in\n        /* \"#utility.yul\":3684:4227   */\n    tag_61:\n        /* \"#utility.yul\":3772:3778   */\n      0x00\n        /* \"#utility.yul\":3780:3786   */\n      dup1\n        /* \"#utility.yul\":3833:3835   */\n      0x40\n        /* \"#utility.yul\":3821:3830   */\n      dup4\n        /* \"#utility.yul\":3812:3819   */\n      dup6\n        /* \"#utility.yul\":3808:3831   */\n      sub\n        /* \"#utility.yul\":3804:3836   */\n      slt\n        /* \"#utility.yul\":3801:3853   */\n      iszero\n      tag_399\n      jumpi\n        /* \"#utility.yul\":3849:3850   */\n      0x00\n        /* \"#utility.yul\":3846:3847   */\n      dup1\n        /* \"#utility.yul\":3839:3851   */\n      revert\n        /* \"#utility.yul\":3801:3853   */\n    tag_399:\n        /* \"#utility.yul\":3876:3899   */\n      dup3\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":3948:3962   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3945:3979   */\n      iszero\n      tag_400\n      jumpi\n        /* \"#utility.yul\":3975:3976   */\n      0x00\n        /* \"#utility.yul\":3972:3973   */\n      dup1\n        /* \"#utility.yul\":3965:3977   */\n      revert\n        /* \"#utility.yul\":3945:3979   */\n    tag_400:\n        /* \"#utility.yul\":3998:4048   */\n      tag_401\n        /* \"#utility.yul\":4040:4047   */\n      dup7\n        /* \"#utility.yul\":4031:4037   */\n      dup4\n        /* \"#utility.yul\":4020:4029   */\n      dup8\n        /* \"#utility.yul\":4016:4038   */\n      add\n        /* \"#utility.yul\":3998:4048   */\n      tag_354\n      jump\t// in\n    tag_401:\n        /* \"#utility.yul\":3988:4048   */\n      swap4\n      pop\n        /* \"#utility.yul\":4101:4103   */\n      0x20\n        /* \"#utility.yul\":4090:4099   */\n      dup6\n        /* \"#utility.yul\":4086:4104   */\n      add\n        /* \"#utility.yul\":4073:4105   */\n      calldataload\n        /* \"#utility.yul\":4057:4105   */\n      swap2\n      pop\n        /* \"#utility.yul\":4130:4132   */\n      dup1\n        /* \"#utility.yul\":4120:4128   */\n      dup3\n        /* \"#utility.yul\":4117:4133   */\n      gt\n        /* \"#utility.yul\":4114:4150   */\n      iszero\n      tag_402\n      jumpi\n        /* \"#utility.yul\":4146:4147   */\n      0x00\n        /* \"#utility.yul\":4143:4144   */\n      dup1\n        /* \"#utility.yul\":4136:4148   */\n      revert\n        /* \"#utility.yul\":4114:4150   */\n    tag_402:\n      pop\n        /* \"#utility.yul\":4169:4221   */\n      tag_403\n        /* \"#utility.yul\":4213:4220   */\n      dup6\n        /* \"#utility.yul\":4202:4210   */\n      dup3\n        /* \"#utility.yul\":4191:4200   */\n      dup7\n        /* \"#utility.yul\":4187:4211   */\n      add\n        /* \"#utility.yul\":4169:4221   */\n      tag_354\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":4159:4221   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":3684:4227   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4232:4418   */\n    tag_68:\n        /* \"#utility.yul\":4291:4297   */\n      0x00\n        /* \"#utility.yul\":4344:4346   */\n      0x20\n        /* \"#utility.yul\":4332:4341   */\n      dup3\n        /* \"#utility.yul\":4323:4330   */\n      dup5\n        /* \"#utility.yul\":4319:4342   */\n      sub\n        /* \"#utility.yul\":4315:4347   */\n      slt\n        /* \"#utility.yul\":4312:4364   */\n      iszero\n      tag_405\n      jumpi\n        /* \"#utility.yul\":4360:4361   */\n      0x00\n        /* \"#utility.yul\":4357:4358   */\n      dup1\n        /* \"#utility.yul\":4350:4362   */\n      revert\n        /* \"#utility.yul\":4312:4364   */\n    tag_405:\n        /* \"#utility.yul\":4383:4412   */\n      tag_364\n        /* \"#utility.yul\":4402:4411   */\n      dup3\n        /* \"#utility.yul\":4383:4412   */\n      tag_352\n      jump\t// in\n        /* \"#utility.yul\":4423:5038   */\n    tag_75:\n        /* \"#utility.yul\":4509:4515   */\n      0x00\n        /* \"#utility.yul\":4517:4523   */\n      dup1\n        /* \"#utility.yul\":4570:4572   */\n      0x20\n        /* \"#utility.yul\":4558:4567   */\n      dup4\n        /* \"#utility.yul\":4549:4556   */\n      dup6\n        /* \"#utility.yul\":4545:4568   */\n      sub\n        /* \"#utility.yul\":4541:4573   */\n      slt\n        /* \"#utility.yul\":4538:4590   */\n      iszero\n      tag_408\n      jumpi\n        /* \"#utility.yul\":4586:4587   */\n      0x00\n        /* \"#utility.yul\":4583:4584   */\n      dup1\n        /* \"#utility.yul\":4576:4588   */\n      revert\n        /* \"#utility.yul\":4538:4590   */\n    tag_408:\n        /* \"#utility.yul\":4613:4636   */\n      dup3\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":4685:4699   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":4682:4716   */\n      iszero\n      tag_409\n      jumpi\n        /* \"#utility.yul\":4712:4713   */\n      0x00\n        /* \"#utility.yul\":4709:4710   */\n      dup1\n        /* \"#utility.yul\":4702:4714   */\n      revert\n        /* \"#utility.yul\":4682:4716   */\n    tag_409:\n        /* \"#utility.yul\":4750:4756   */\n      dup2\n        /* \"#utility.yul\":4739:4748   */\n      dup6\n        /* \"#utility.yul\":4735:4757   */\n      add\n        /* \"#utility.yul\":4725:4757   */\n      swap2\n      pop\n        /* \"#utility.yul\":4795:4802   */\n      dup6\n        /* \"#utility.yul\":4788:4792   */\n      0x1f\n        /* \"#utility.yul\":4784:4786   */\n      dup4\n        /* \"#utility.yul\":4780:4793   */\n      add\n        /* \"#utility.yul\":4776:4803   */\n      slt\n        /* \"#utility.yul\":4766:4821   */\n      tag_410\n      jumpi\n        /* \"#utility.yul\":4817:4818   */\n      0x00\n        /* \"#utility.yul\":4814:4815   */\n      dup1\n        /* \"#utility.yul\":4807:4819   */\n      revert\n        /* \"#utility.yul\":4766:4821   */\n    tag_410:\n        /* \"#utility.yul\":4857:4859   */\n      dup2\n        /* \"#utility.yul\":4844:4860   */\n      calldataload\n        /* \"#utility.yul\":4883:4885   */\n      dup2\n        /* \"#utility.yul\":4875:4881   */\n      dup2\n        /* \"#utility.yul\":4872:4886   */\n      gt\n        /* \"#utility.yul\":4869:4903   */\n      iszero\n      tag_411\n      jumpi\n        /* \"#utility.yul\":4899:4900   */\n      0x00\n        /* \"#utility.yul\":4896:4897   */\n      dup1\n        /* \"#utility.yul\":4889:4901   */\n      revert\n        /* \"#utility.yul\":4869:4903   */\n    tag_411:\n        /* \"#utility.yul\":4952:4959   */\n      dup7\n        /* \"#utility.yul\":4947:4949   */\n      0x20\n        /* \"#utility.yul\":4937:4943   */\n      dup3\n        /* \"#utility.yul\":4934:4935   */\n      0x05\n        /* \"#utility.yul\":4930:4944   */\n      shl\n        /* \"#utility.yul\":4926:4928   */\n      dup6\n        /* \"#utility.yul\":4922:4945   */\n      add\n        /* \"#utility.yul\":4918:4950   */\n      add\n        /* \"#utility.yul\":4915:4960   */\n      gt\n        /* \"#utility.yul\":4912:4977   */\n      iszero\n      tag_412\n      jumpi\n        /* \"#utility.yul\":4973:4974   */\n      0x00\n        /* \"#utility.yul\":4970:4971   */\n      dup1\n        /* \"#utility.yul\":4963:4975   */\n      revert\n        /* \"#utility.yul\":4912:4977   */\n    tag_412:\n        /* \"#utility.yul\":5004:5006   */\n      0x20\n        /* \"#utility.yul\":4996:5007   */\n      swap3\n      swap1\n      swap3\n      add\n      swap7\n        /* \"#utility.yul\":5026:5032   */\n      swap2\n      swap6\n      pop\n        /* \"#utility.yul\":4423:5038   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5043:5390   */\n    tag_85:\n        /* \"#utility.yul\":5108:5114   */\n      0x00\n        /* \"#utility.yul\":5116:5122   */\n      dup1\n        /* \"#utility.yul\":5169:5171   */\n      0x40\n        /* \"#utility.yul\":5157:5166   */\n      dup4\n        /* \"#utility.yul\":5148:5155   */\n      dup6\n        /* \"#utility.yul\":5144:5167   */\n      sub\n        /* \"#utility.yul\":5140:5172   */\n      slt\n        /* \"#utility.yul\":5137:5189   */\n      iszero\n      tag_414\n      jumpi\n        /* \"#utility.yul\":5185:5186   */\n      0x00\n        /* \"#utility.yul\":5182:5183   */\n      dup1\n        /* \"#utility.yul\":5175:5187   */\n      revert\n        /* \"#utility.yul\":5137:5189   */\n    tag_414:\n        /* \"#utility.yul\":5208:5237   */\n      tag_415\n        /* \"#utility.yul\":5227:5236   */\n      dup4\n        /* \"#utility.yul\":5208:5237   */\n      tag_352\n      jump\t// in\n    tag_415:\n        /* \"#utility.yul\":5198:5237   */\n      swap2\n      pop\n        /* \"#utility.yul\":5287:5289   */\n      0x20\n        /* \"#utility.yul\":5276:5285   */\n      dup4\n        /* \"#utility.yul\":5272:5290   */\n      add\n        /* \"#utility.yul\":5259:5291   */\n      calldataload\n        /* \"#utility.yul\":5334:5339   */\n      dup1\n        /* \"#utility.yul\":5327:5340   */\n      iszero\n        /* \"#utility.yul\":5320:5341   */\n      iszero\n        /* \"#utility.yul\":5313:5318   */\n      dup2\n        /* \"#utility.yul\":5310:5342   */\n      eq\n        /* \"#utility.yul\":5300:5360   */\n      tag_416\n      jumpi\n        /* \"#utility.yul\":5356:5357   */\n      0x00\n        /* \"#utility.yul\":5353:5354   */\n      dup1\n        /* \"#utility.yul\":5346:5358   */\n      revert\n        /* \"#utility.yul\":5300:5360   */\n    tag_416:\n        /* \"#utility.yul\":5379:5384   */\n      dup1\n        /* \"#utility.yul\":5369:5384   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":5043:5390   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5395:6062   */\n    tag_89:\n        /* \"#utility.yul\":5490:5496   */\n      0x00\n        /* \"#utility.yul\":5498:5504   */\n      dup1\n        /* \"#utility.yul\":5506:5512   */\n      0x00\n        /* \"#utility.yul\":5514:5520   */\n      dup1\n        /* \"#utility.yul\":5567:5570   */\n      0x80\n        /* \"#utility.yul\":5555:5564   */\n      dup6\n        /* \"#utility.yul\":5546:5553   */\n      dup8\n        /* \"#utility.yul\":5542:5565   */\n      sub\n        /* \"#utility.yul\":5538:5571   */\n      slt\n        /* \"#utility.yul\":5535:5588   */\n      iszero\n      tag_418\n      jumpi\n        /* \"#utility.yul\":5584:5585   */\n      0x00\n        /* \"#utility.yul\":5581:5582   */\n      dup1\n        /* \"#utility.yul\":5574:5586   */\n      revert\n        /* \"#utility.yul\":5535:5588   */\n    tag_418:\n        /* \"#utility.yul\":5607:5636   */\n      tag_419\n        /* \"#utility.yul\":5626:5635   */\n      dup6\n        /* \"#utility.yul\":5607:5636   */\n      tag_352\n      jump\t// in\n    tag_419:\n        /* \"#utility.yul\":5597:5636   */\n      swap4\n      pop\n        /* \"#utility.yul\":5655:5693   */\n      tag_420\n        /* \"#utility.yul\":5689:5691   */\n      0x20\n        /* \"#utility.yul\":5678:5687   */\n      dup7\n        /* \"#utility.yul\":5674:5692   */\n      add\n        /* \"#utility.yul\":5655:5693   */\n      tag_352\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":5645:5693   */\n      swap3\n      pop\n        /* \"#utility.yul\":5740:5742   */\n      0x40\n        /* \"#utility.yul\":5725:5743   */\n      dup6\n      add\n        /* \"#utility.yul\":5712:5744   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":5795:5797   */\n      0x60\n        /* \"#utility.yul\":5780:5798   */\n      dup6\n      add\n        /* \"#utility.yul\":5767:5799   */\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":5811:5841   */\n      dup2\n      gt\n        /* \"#utility.yul\":5808:5858   */\n      iszero\n      tag_421\n      jumpi\n        /* \"#utility.yul\":5854:5855   */\n      0x00\n        /* \"#utility.yul\":5851:5852   */\n      dup1\n        /* \"#utility.yul\":5844:5856   */\n      revert\n        /* \"#utility.yul\":5808:5858   */\n    tag_421:\n        /* \"#utility.yul\":5877:5899   */\n      dup6\n      add\n        /* \"#utility.yul\":5930:5934   */\n      0x1f\n        /* \"#utility.yul\":5922:5935   */\n      dup2\n      add\n        /* \"#utility.yul\":5918:5945   */\n      dup8\n      sgt\n        /* \"#utility.yul\":5908:5963   */\n      tag_422\n      jumpi\n        /* \"#utility.yul\":5959:5960   */\n      0x00\n        /* \"#utility.yul\":5956:5957   */\n      dup1\n        /* \"#utility.yul\":5949:5961   */\n      revert\n        /* \"#utility.yul\":5908:5963   */\n    tag_422:\n        /* \"#utility.yul\":5982:6056   */\n      tag_423\n        /* \"#utility.yul\":6048:6055   */\n      dup8\n        /* \"#utility.yul\":6043:6045   */\n      dup3\n        /* \"#utility.yul\":6030:6046   */\n      calldataload\n        /* \"#utility.yul\":6025:6027   */\n      0x20\n        /* \"#utility.yul\":6021:6023   */\n      dup5\n        /* \"#utility.yul\":6017:6028   */\n      add\n        /* \"#utility.yul\":5982:6056   */\n      tag_353\n      jump\t// in\n    tag_423:\n        /* \"#utility.yul\":5972:6056   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":5395:6062   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6067:6327   */\n    tag_100:\n        /* \"#utility.yul\":6135:6141   */\n      0x00\n        /* \"#utility.yul\":6143:6149   */\n      dup1\n        /* \"#utility.yul\":6196:6198   */\n      0x40\n        /* \"#utility.yul\":6184:6193   */\n      dup4\n        /* \"#utility.yul\":6175:6182   */\n      dup6\n        /* \"#utility.yul\":6171:6194   */\n      sub\n        /* \"#utility.yul\":6167:6199   */\n      slt\n        /* \"#utility.yul\":6164:6216   */\n      iszero\n      tag_425\n      jumpi\n        /* \"#utility.yul\":6212:6213   */\n      0x00\n        /* \"#utility.yul\":6209:6210   */\n      dup1\n        /* \"#utility.yul\":6202:6214   */\n      revert\n        /* \"#utility.yul\":6164:6216   */\n    tag_425:\n        /* \"#utility.yul\":6235:6264   */\n      tag_426\n        /* \"#utility.yul\":6254:6263   */\n      dup4\n        /* \"#utility.yul\":6235:6264   */\n      tag_352\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":6225:6264   */\n      swap2\n      pop\n        /* \"#utility.yul\":6283:6321   */\n      tag_427\n        /* \"#utility.yul\":6317:6319   */\n      0x20\n        /* \"#utility.yul\":6306:6315   */\n      dup5\n        /* \"#utility.yul\":6302:6320   */\n      add\n        /* \"#utility.yul\":6283:6321   */\n      tag_352\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":6273:6321   */\n      swap1\n      pop\n        /* \"#utility.yul\":6067:6327   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6332:6712   */\n    tag_113:\n        /* \"#utility.yul\":6411:6412   */\n      0x01\n        /* \"#utility.yul\":6407:6419   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":6454:6466   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":6475:6536   */\n      tag_429\n      jumpi\n        /* \"#utility.yul\":6529:6533   */\n      0x7f\n        /* \"#utility.yul\":6521:6527   */\n      dup3\n        /* \"#utility.yul\":6517:6534   */\n      and\n        /* \"#utility.yul\":6507:6534   */\n      swap2\n      pop\n        /* \"#utility.yul\":6475:6536   */\n    tag_429:\n        /* \"#utility.yul\":6582:6584   */\n      0x20\n        /* \"#utility.yul\":6574:6580   */\n      dup3\n        /* \"#utility.yul\":6571:6585   */\n      lt\n        /* \"#utility.yul\":6551:6569   */\n      dup2\n        /* \"#utility.yul\":6548:6586   */\n      sub\n        /* \"#utility.yul\":6545:6706   */\n      tag_430\n      jumpi\n        /* \"#utility.yul\":6628:6638   */\n      0x4e487b71\n        /* \"#utility.yul\":6623:6626   */\n      0xe0\n        /* \"#utility.yul\":6619:6639   */\n      shl\n        /* \"#utility.yul\":6616:6617   */\n      0x00\n        /* \"#utility.yul\":6609:6640   */\n      mstore\n        /* \"#utility.yul\":6663:6667   */\n      0x22\n        /* \"#utility.yul\":6660:6661   */\n      0x04\n        /* \"#utility.yul\":6653:6668   */\n      mstore\n        /* \"#utility.yul\":6691:6695   */\n      0x24\n        /* \"#utility.yul\":6688:6689   */\n      0x00\n        /* \"#utility.yul\":6681:6696   */\n      revert\n        /* \"#utility.yul\":6545:6706   */\n    tag_430:\n      pop\n        /* \"#utility.yul\":6332:6712   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6717:7073   */\n    tag_149:\n        /* \"#utility.yul\":6919:6921   */\n      0x20\n        /* \"#utility.yul\":6901:6922   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6938:6956   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":6931:6961   */\n      mstore\n        /* \"#utility.yul\":6997:7031   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":6992:6994   */\n      0x40\n        /* \"#utility.yul\":6977:6995   */\n      dup3\n      add\n        /* \"#utility.yul\":6970:7032   */\n      mstore\n        /* \"#utility.yul\":7064:7066   */\n      0x60\n        /* \"#utility.yul\":7049:7067   */\n      add\n      swap1\n        /* \"#utility.yul\":6717:7073   */\n      jump\t// out\n        /* \"#utility.yul\":7078:7205   */\n    tag_181:\n        /* \"#utility.yul\":7139:7149   */\n      0x4e487b71\n        /* \"#utility.yul\":7134:7137   */\n      0xe0\n        /* \"#utility.yul\":7130:7150   */\n      shl\n        /* \"#utility.yul\":7127:7128   */\n      0x00\n        /* \"#utility.yul\":7120:7151   */\n      mstore\n        /* \"#utility.yul\":7170:7174   */\n      0x32\n        /* \"#utility.yul\":7167:7168   */\n      0x04\n        /* \"#utility.yul\":7160:7175   */\n      mstore\n        /* \"#utility.yul\":7194:7198   */\n      0x24\n        /* \"#utility.yul\":7191:7192   */\n      0x00\n        /* \"#utility.yul\":7184:7199   */\n      revert\n        /* \"#utility.yul\":7210:7337   */\n    tag_355:\n        /* \"#utility.yul\":7271:7281   */\n      0x4e487b71\n        /* \"#utility.yul\":7266:7269   */\n      0xe0\n        /* \"#utility.yul\":7262:7282   */\n      shl\n        /* \"#utility.yul\":7259:7260   */\n      0x00\n        /* \"#utility.yul\":7252:7283   */\n      mstore\n        /* \"#utility.yul\":7302:7306   */\n      0x11\n        /* \"#utility.yul\":7299:7300   */\n      0x04\n        /* \"#utility.yul\":7292:7307   */\n      mstore\n        /* \"#utility.yul\":7326:7330   */\n      0x24\n        /* \"#utility.yul\":7323:7324   */\n      0x00\n        /* \"#utility.yul\":7316:7331   */\n      revert\n        /* \"#utility.yul\":7342:7477   */\n    tag_185:\n        /* \"#utility.yul\":7381:7384   */\n      0x00\n        /* \"#utility.yul\":7402:7419   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":7399:7442   */\n      tag_436\n      jumpi\n        /* \"#utility.yul\":7422:7440   */\n      tag_436\n      tag_355\n      jump\t// in\n    tag_436:\n      pop\n        /* \"#utility.yul\":7469:7470   */\n      0x01\n        /* \"#utility.yul\":7458:7471   */\n      add\n      swap1\n        /* \"#utility.yul\":7342:7477   */\n      jump\t// out\n        /* \"#utility.yul\":8024:8997   */\n    tag_357:\n        /* \"#utility.yul\":8109:8121   */\n      dup1\n      sload\n        /* \"#utility.yul\":8074:8077   */\n      0x00\n      swap1\n        /* \"#utility.yul\":8164:8165   */\n      0x01\n        /* \"#utility.yul\":8184:8202   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":8237:8255   */\n      dup1\n      dup4\n      and\n      dup1\n        /* \"#utility.yul\":8264:8325   */\n      tag_440\n      jumpi\n        /* \"#utility.yul\":8318:8322   */\n      0x7f\n        /* \"#utility.yul\":8310:8316   */\n      dup4\n        /* \"#utility.yul\":8306:8323   */\n      and\n        /* \"#utility.yul\":8296:8323   */\n      swap3\n      pop\n        /* \"#utility.yul\":8264:8325   */\n    tag_440:\n        /* \"#utility.yul\":8344:8346   */\n      0x20\n        /* \"#utility.yul\":8392:8394   */\n      dup1\n        /* \"#utility.yul\":8384:8390   */\n      dup5\n        /* \"#utility.yul\":8381:8395   */\n      lt\n        /* \"#utility.yul\":8361:8379   */\n      dup3\n        /* \"#utility.yul\":8358:8396   */\n      sub\n        /* \"#utility.yul\":8355:8516   */\n      tag_441\n      jumpi\n        /* \"#utility.yul\":8438:8448   */\n      0x4e487b71\n        /* \"#utility.yul\":8433:8436   */\n      0xe0\n        /* \"#utility.yul\":8429:8449   */\n      shl\n        /* \"#utility.yul\":8426:8427   */\n      0x00\n        /* \"#utility.yul\":8419:8450   */\n      mstore\n        /* \"#utility.yul\":8473:8477   */\n      0x22\n        /* \"#utility.yul\":8470:8471   */\n      0x04\n        /* \"#utility.yul\":8463:8478   */\n      mstore\n        /* \"#utility.yul\":8501:8505   */\n      0x24\n        /* \"#utility.yul\":8498:8499   */\n      0x00\n        /* \"#utility.yul\":8491:8506   */\n      revert\n        /* \"#utility.yul\":8355:8516   */\n    tag_441:\n        /* \"#utility.yul\":8532:8550   */\n      dup2\n        /* \"#utility.yul\":8559:8663   */\n      dup1\n      iszero\n      tag_443\n      jumpi\n        /* \"#utility.yul\":8677:8678   */\n      0x01\n        /* \"#utility.yul\":8672:8991   */\n      dup2\n      eq\n      tag_444\n      jumpi\n        /* \"#utility.yul\":8525:8991   */\n      jump(tag_442)\n        /* \"#utility.yul\":8559:8663   */\n    tag_443:\n      not(0xff)\n        /* \"#utility.yul\":8592:8616   */\n      dup7\n      and\n        /* \"#utility.yul\":8580:8617   */\n      dup10\n      mstore\n        /* \"#utility.yul\":8637:8653   */\n      dup5\n      dup10\n      add\n      swap7\n      pop\n        /* \"#utility.yul\":8559:8663   */\n      jump(tag_442)\n        /* \"#utility.yul\":8672:8991   */\n    tag_444:\n        /* \"#utility.yul\":7971:7972   */\n      0x00\n        /* \"#utility.yul\":7964:7978   */\n      dup9\n      dup2\n      mstore\n        /* \"#utility.yul\":8008:8012   */\n      0x20\n        /* \"#utility.yul\":7995:8013   */\n      swap1\n      keccak256\n        /* \"#utility.yul\":8766:8767   */\n      0x00\n        /* \"#utility.yul\":8780:8945   */\n    tag_446:\n        /* \"#utility.yul\":8794:8800   */\n      dup7\n        /* \"#utility.yul\":8791:8792   */\n      dup2\n        /* \"#utility.yul\":8788:8801   */\n      lt\n        /* \"#utility.yul\":8780:8945   */\n      iszero\n      tag_448\n      jumpi\n        /* \"#utility.yul\":8872:8886   */\n      dup2\n      sload\n        /* \"#utility.yul\":8859:8870   */\n      dup12\n      dup3\n      add\n        /* \"#utility.yul\":8852:8887   */\n      mstore\n        /* \"#utility.yul\":8915:8931   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":8809:8819   */\n      dup4\n      add\n        /* \"#utility.yul\":8780:8945   */\n      jump(tag_446)\n    tag_448:\n        /* \"#utility.yul\":8784:8787   */\n      pop\n      pop\n        /* \"#utility.yul\":8974:8980   */\n      dup5\n        /* \"#utility.yul\":8969:8972   */\n      dup10\n        /* \"#utility.yul\":8965:8981   */\n      add\n        /* \"#utility.yul\":8958:8981   */\n      swap7\n      pop\n        /* \"#utility.yul\":8525:8991   */\n    tag_442:\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":8024:8997   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9002:9458   */\n    tag_223:\n        /* \"#utility.yul\":9223:9226   */\n      0x00\n        /* \"#utility.yul\":9251:9289   */\n      tag_450\n        /* \"#utility.yul\":9285:9288   */\n      dup3\n        /* \"#utility.yul\":9277:9283   */\n      dup7\n        /* \"#utility.yul\":9251:9289   */\n      tag_357\n      jump\t// in\n    tag_450:\n        /* \"#utility.yul\":9318:9324   */\n      dup5\n        /* \"#utility.yul\":9312:9325   */\n      mload\n        /* \"#utility.yul\":9334:9386   */\n      tag_451\n        /* \"#utility.yul\":9379:9385   */\n      dup2\n        /* \"#utility.yul\":9375:9377   */\n      dup4\n        /* \"#utility.yul\":9368:9372   */\n      0x20\n        /* \"#utility.yul\":9360:9366   */\n      dup10\n        /* \"#utility.yul\":9356:9373   */\n      add\n        /* \"#utility.yul\":9334:9386   */\n      tag_350\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":9402:9452   */\n      tag_452\n        /* \"#utility.yul\":9444:9450   */\n      dup2\n        /* \"#utility.yul\":9440:9442   */\n      dup4\n        /* \"#utility.yul\":9436:9451   */\n      add\n        /* \"#utility.yul\":9428:9434   */\n      dup7\n        /* \"#utility.yul\":9402:9452   */\n      tag_357\n      jump\t// in\n    tag_452:\n        /* \"#utility.yul\":9395:9452   */\n      swap8\n        /* \"#utility.yul\":9002:9458   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9870:10359   */\n    tag_281:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":10139:10154   */\n      dup6\n      dup2\n      and\n        /* \"#utility.yul\":10121:10155   */\n      dup3\n      mstore\n        /* \"#utility.yul\":10191:10206   */\n      dup5\n      and\n        /* \"#utility.yul\":10186:10188   */\n      0x20\n        /* \"#utility.yul\":10171:10189   */\n      dup3\n      add\n        /* \"#utility.yul\":10164:10207   */\n      mstore\n        /* \"#utility.yul\":10238:10240   */\n      0x40\n        /* \"#utility.yul\":10223:10241   */\n      dup2\n      add\n        /* \"#utility.yul\":10216:10250   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":10286:10289   */\n      0x80\n        /* \"#utility.yul\":10281:10283   */\n      0x60\n        /* \"#utility.yul\":10266:10284   */\n      dup3\n      add\n        /* \"#utility.yul\":10259:10290   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":10064:10068   */\n      0x00\n      swap1\n        /* \"#utility.yul\":10307:10353   */\n      tag_455\n      swap1\n        /* \"#utility.yul\":10333:10352   */\n      dup4\n      add\n        /* \"#utility.yul\":10325:10331   */\n      dup5\n        /* \"#utility.yul\":10307:10353   */\n      tag_351\n      jump\t// in\n    tag_455:\n        /* \"#utility.yul\":10299:10353   */\n      swap7\n        /* \"#utility.yul\":9870:10359   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10364:10613   */\n    tag_284:\n        /* \"#utility.yul\":10433:10439   */\n      0x00\n        /* \"#utility.yul\":10486:10488   */\n      0x20\n        /* \"#utility.yul\":10474:10483   */\n      dup3\n        /* \"#utility.yul\":10465:10472   */\n      dup5\n        /* \"#utility.yul\":10461:10484   */\n      sub\n        /* \"#utility.yul\":10457:10489   */\n      slt\n        /* \"#utility.yul\":10454:10506   */\n      iszero\n      tag_457\n      jumpi\n        /* \"#utility.yul\":10502:10503   */\n      0x00\n        /* \"#utility.yul\":10499:10500   */\n      dup1\n        /* \"#utility.yul\":10492:10504   */\n      revert\n        /* \"#utility.yul\":10454:10506   */\n    tag_457:\n        /* \"#utility.yul\":10534:10543   */\n      dup2\n        /* \"#utility.yul\":10528:10544   */\n      mload\n        /* \"#utility.yul\":10553:10583   */\n      tag_364\n        /* \"#utility.yul\":10577:10582   */\n      dup2\n        /* \"#utility.yul\":10553:10583   */\n      tag_349\n      jump\t// in\n        /* \"#utility.yul\":10618:10745   */\n    tag_358:\n        /* \"#utility.yul\":10679:10689   */\n      0x4e487b71\n        /* \"#utility.yul\":10674:10677   */\n      0xe0\n        /* \"#utility.yul\":10670:10690   */\n      shl\n        /* \"#utility.yul\":10667:10668   */\n      0x00\n        /* \"#utility.yul\":10660:10691   */\n      mstore\n        /* \"#utility.yul\":10710:10714   */\n      0x12\n        /* \"#utility.yul\":10707:10708   */\n      0x04\n        /* \"#utility.yul\":10700:10715   */\n      mstore\n        /* \"#utility.yul\":10734:10738   */\n      0x24\n        /* \"#utility.yul\":10731:10732   */\n      0x00\n        /* \"#utility.yul\":10724:10739   */\n      revert\n        /* \"#utility.yul\":10750:10870   */\n    tag_300:\n        /* \"#utility.yul\":10790:10791   */\n      0x00\n        /* \"#utility.yul\":10816:10817   */\n      dup3\n        /* \"#utility.yul\":10806:10841   */\n      tag_462\n      jumpi\n        /* \"#utility.yul\":10821:10839   */\n      tag_462\n      tag_358\n      jump\t// in\n    tag_462:\n      pop\n        /* \"#utility.yul\":10855:10864   */\n      div\n      swap1\n        /* \"#utility.yul\":10750:10870   */\n      jump\t// out\n        /* \"#utility.yul\":10875:11000   */\n    tag_308:\n        /* \"#utility.yul\":10915:10919   */\n      0x00\n        /* \"#utility.yul\":10943:10944   */\n      dup3\n        /* \"#utility.yul\":10940:10941   */\n      dup3\n        /* \"#utility.yul\":10937:10945   */\n      lt\n        /* \"#utility.yul\":10934:10968   */\n      iszero\n      tag_465\n      jumpi\n        /* \"#utility.yul\":10948:10966   */\n      tag_465\n      tag_355\n      jump\t// in\n    tag_465:\n      pop\n        /* \"#utility.yul\":10985:10994   */\n      sub\n      swap1\n        /* \"#utility.yul\":10875:11000   */\n      jump\t// out\n        /* \"#utility.yul\":11005:11117   */\n    tag_310:\n        /* \"#utility.yul\":11037:11038   */\n      0x00\n        /* \"#utility.yul\":11063:11064   */\n      dup3\n        /* \"#utility.yul\":11053:11088   */\n      tag_468\n      jumpi\n        /* \"#utility.yul\":11068:11086   */\n      tag_468\n      tag_358\n      jump\t// in\n    tag_468:\n      pop\n        /* \"#utility.yul\":11102:11111   */\n      mod\n      swap1\n        /* \"#utility.yul\":11005:11117   */\n      jump\t// out\n        /* \"#utility.yul\":11122:11250   */\n    tag_312:\n        /* \"#utility.yul\":11162:11165   */\n      0x00\n        /* \"#utility.yul\":11193:11194   */\n      dup3\n        /* \"#utility.yul\":11189:11195   */\n      not\n        /* \"#utility.yul\":11186:11187   */\n      dup3\n        /* \"#utility.yul\":11183:11196   */\n      gt\n        /* \"#utility.yul\":11180:11219   */\n      iszero\n      tag_471\n      jumpi\n        /* \"#utility.yul\":11199:11217   */\n      tag_471\n      tag_355\n      jump\t// in\n    tag_471:\n      pop\n        /* \"#utility.yul\":11235:11244   */\n      add\n      swap1\n        /* \"#utility.yul\":11122:11250   */\n      jump\t// out\n    stop\n    data_ada389e1fc24a8587c776340efb91b36e675792ab631816100d55df0b5cf3cbc ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n\n    auxdata: 0xa26469706673582212206f9a2d8d2c0a8db91cd425246dd7ee86f17baedfd62b906810296d2f8b2fcd6c64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1127": {
									"entryPoint": null,
									"id": 1127,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_923": {
									"entryPoint": null,
									"id": 923,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_572": {
									"entryPoint": null,
									"id": 572,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_startTokenId_1136": {
									"entryPoint": null,
									"id": 1136,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 162,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 410,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:396:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "69:325:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "79:22:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "93:1:12",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "96:4:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "89:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "89:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "79:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "110:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "140:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "146:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "136:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "136:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "114:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "187:31:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "189:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "203:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "211:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "199:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "199:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "189:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "167:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:26:12"
															},
															"nodeType": "YulIf",
															"src": "157:61:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "277:111:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "298:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "305:3:12",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "310:10:12",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "301:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "301:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "291:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "291:31:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "291:31:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "342:1:12",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "345:4:12",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "335:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "335:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "335:15:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "370:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "373:4:12",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "363:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "363:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "363:15:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "233:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "264:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "253:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "253:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "230:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "230:38:12"
															},
															"nodeType": "YulIf",
															"src": "227:161:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "49:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "58:6:12",
														"type": ""
													}
												],
												"src": "14:380:12"
											}
										]
									},
									"contents": "{\n    { }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH32 0x546F6F6E7A204D696E7465722052657761726473204361726400000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH5 0x26A4A72A29 PUSH1 0xD9 SHL SWAP1 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH3 0x74 SWAP2 PUSH1 0x2 SWAP2 PUSH3 0xF4 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x8A SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xF4 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x9C CALLER PUSH3 0xA2 JUMP JUMPDEST PUSH3 0x1D6 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x102 SWAP1 PUSH3 0x19A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x126 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x171 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x141 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x171 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x171 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x171 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x154 JUMP JUMPDEST POP PUSH3 0x17F SWAP3 SWAP2 POP PUSH3 0x183 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x17F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x184 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1AF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1D0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17B4 DUP1 PUSH3 0x1E6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x107 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x6790A9DE EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x7A2D0163 EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xC6682862 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2AE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0x1166 JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH2 0x313 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12B SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH2 0x15C PUSH2 0x157 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F5 JUMP JUMPDEST PUSH2 0x3A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12B JUMP JUMPDEST PUSH2 0x187 PUSH2 0x182 CALLDATASIZE PUSH1 0x4 PUSH2 0x122A JUMP JUMPDEST PUSH2 0x3E9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12B JUMP JUMPDEST PUSH2 0x187 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x1254 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1254 JUMP JUMPDEST PUSH2 0x481 JUMP JUMPDEST PUSH2 0x15C PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F5 JUMP JUMPDEST PUSH2 0x49C JUMP JUMPDEST PUSH2 0x187 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x133B JUMP JUMPDEST PUSH2 0x4AE JUMP JUMPDEST PUSH2 0x13C PUSH2 0x50D JUMP JUMPDEST PUSH2 0x191 PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0x139E JUMP JUMPDEST PUSH2 0x59B JUMP JUMPDEST PUSH2 0x187 PUSH2 0x5E9 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x21C CALLDATASIZE PUSH1 0x4 PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0x624 JUMP JUMPDEST PUSH2 0x15C PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x13C PUSH2 0x6B7 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x23F CALLDATASIZE PUSH1 0x4 PUSH2 0x142D JUMP JUMPDEST PUSH2 0x6C6 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0x1469 JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST PUSH2 0x13C PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x13C PUSH2 0x26D CALLDATASIZE PUSH1 0x4 PUSH2 0x11F5 JUMP JUMPDEST PUSH2 0x7B8 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x14E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x139E JUMP JUMPDEST PUSH2 0x886 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2F2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x30D JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x322 SWAP1 PUSH2 0x1517 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x34E SWAP1 PUSH2 0x1517 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x39B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x370 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x39B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B0 DUP3 PUSH2 0x926 JUMP JUMPDEST PUSH2 0x3CD JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F4 DUP3 PUSH2 0x49C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x428 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x448 JUMPI POP PUSH2 0x446 DUP2 CALLER PUSH2 0x280 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x466 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 DUP4 DUP4 DUP4 PUSH2 0x951 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x471 DUP4 DUP4 DUP4 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x471 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x75B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A7 DUP3 PUSH2 0xB88 JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH2 0x4B7 PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DD SWAP1 PUSH2 0x1551 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4F9 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x10B7 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x471 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x10B7 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x51A SWAP1 PUSH2 0x1517 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x546 SWAP1 PUSH2 0x1517 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x593 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x568 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x593 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x576 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x5F2 PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x618 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DD SWAP1 PUSH2 0x1551 JUMP JUMPDEST PUSH2 0x622 PUSH1 0x0 PUSH2 0xCA2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH2 0x62D PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x653 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DD SWAP1 PUSH2 0x1551 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6A2 JUMPI PUSH2 0x690 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x674 JUMPI PUSH2 0x674 PUSH2 0x1586 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x689 SWAP2 SWAP1 PUSH2 0x139E JUMP JUMPDEST PUSH1 0x1 PUSH2 0xCF4 JUMP JUMPDEST DUP1 PUSH2 0x69A DUP2 PUSH2 0x15B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x657 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x322 SWAP1 PUSH2 0x1517 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x766 DUP5 DUP5 DUP5 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x778 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD12 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x78D JUMPI POP PUSH2 0x78B DUP5 DUP5 DUP5 DUP5 PUSH2 0xD21 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x6A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH2 0x51A SWAP1 PUSH2 0x1517 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7C3 DUP3 PUSH2 0x926 JUMP JUMPDEST PUSH2 0x827 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 DUP1 SLOAD PUSH2 0x836 SWAP1 PUSH2 0x1517 JUMP JUMPDEST SWAP1 POP GT PUSH2 0x852 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x30D JUMP JUMPDEST PUSH1 0x9 PUSH2 0x85D DUP4 PUSH2 0xE0D JUMP JUMPDEST PUSH1 0xA PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x871 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1664 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH2 0x88F PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DD SWAP1 PUSH2 0x1551 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x923 DUP2 PUSH2 0xCA2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x30D JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B8 DUP3 PUSH2 0xB88 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9EF JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ DUP1 PUSH2 0xA0D JUMPI POP PUSH2 0xA0D DUP6 CALLER PUSH2 0x280 JUMP JUMPDEST DUP1 PUSH2 0xA28 JUMPI POP CALLER PUSH2 0xA1D DUP5 PUSH2 0x3A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0xA48 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xA6F JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA7B PUSH1 0x0 DUP5 DUP8 PUSH2 0x951 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR DUP4 SSTORE DUP8 ADD DUP1 DUP5 MSTORE SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 AND PUSH2 0xB4E JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0xB4E JUMPI DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR OR DUP2 SSTORE JUMPDEST POP POP POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x175F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0xC89 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0xC87 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xC1E JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0xC82 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xC1E JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xD0E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF0D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xD56 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1697 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD91 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD8E SWAP2 DUP2 ADD SWAP1 PUSH2 0x16D4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDEF JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDBF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDC4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xDE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0xE34 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xE5E JUMPI DUP1 PUSH2 0xE48 DUP2 PUSH2 0x15B2 JUMP JUMPDEST SWAP2 POP PUSH2 0xE57 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x1707 JUMP JUMPDEST SWAP2 POP PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xE78 JUMPI PUSH2 0xE78 PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEA2 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xE05 JUMPI PUSH2 0xEB7 PUSH1 0x1 DUP4 PUSH2 0x171B JUMP JUMPDEST SWAP2 POP PUSH2 0xEC4 PUSH1 0xA DUP7 PUSH2 0x1732 JUMP JUMPDEST PUSH2 0xECF SWAP1 PUSH1 0x30 PUSH2 0x1746 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xEE4 JUMPI PUSH2 0xEE4 PUSH2 0x1586 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xF06 PUSH1 0xA DUP7 PUSH2 0x1707 JUMP JUMPDEST SWAP5 POP PUSH2 0xEA6 JUMP JUMPDEST PUSH2 0x471 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xF3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x0 SUB PUSH2 0xF5F JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 AND DUP13 ADD DUP2 AND SWAP2 DUP3 OR PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT SWAP1 SWAP5 AND SWAP1 SWAP3 OR DUP4 SWAP1 DIV DUP2 AND DUP13 ADD DUP2 AND SWAP1 SWAP3 MUL OR SWAP1 SWAP2 SSTORE DUP6 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP1 DUP1 DUP6 ADD DUP4 DUP1 ISZERO PUSH2 0x1005 JUMPI POP PUSH2 0x1005 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD12 JUMP JUMPDEST ISZERO PUSH2 0x107B JUMPI JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x175F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG4 PUSH2 0x1044 PUSH1 0x0 DUP9 DUP5 DUP1 PUSH1 0x1 ADD SWAP6 POP DUP9 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0x1061 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x100B JUMPI DUP3 PUSH1 0x0 SLOAD EQ PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10AE JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP4 ADD SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x175F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG4 DUP1 DUP3 SUB PUSH2 0x107C JUMPI JUMPDEST POP PUSH1 0x0 SSTORE PUSH2 0xB81 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x10C3 SWAP1 PUSH2 0x1517 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x10E5 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x112B JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x10FE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x112B JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x112B JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x112B JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1110 JUMP JUMPDEST POP PUSH2 0x1137 SWAP3 SWAP2 POP PUSH2 0x113B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1137 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x113C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1183 DUP2 PUSH2 0x1150 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11A5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x118D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x6A2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x11CE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x118A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1183 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x11B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x123D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1246 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1272 DUP5 PUSH2 0x120E JUMP JUMPDEST SWAP3 POP PUSH2 0x1280 PUSH1 0x20 DUP6 ADD PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 GT ISZERO PUSH2 0x12C0 JUMPI PUSH2 0x12C0 PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x12E8 JUMPI PUSH2 0x12E8 PUSH2 0x1290 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x1301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x132C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1183 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x134E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1371 DUP7 DUP4 DUP8 ADD PUSH2 0x131B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1394 DUP6 DUP3 DUP7 ADD PUSH2 0x131B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1183 DUP3 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x13E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x141B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1449 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x145E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x147F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1488 DUP6 PUSH2 0x120E JUMP JUMPDEST SWAP4 POP PUSH2 0x1496 PUSH1 0x20 DUP7 ADD PUSH2 0x120E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x14B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x14C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D8 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x12A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1500 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x150E PUSH1 0x20 DUP5 ADD PUSH2 0x120E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x152B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x154B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x15C4 JUMPI PUSH2 0x15C4 PUSH2 0x159C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND DUP1 PUSH2 0x15E5 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 SUB PUSH2 0x1606 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x161A JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x162B JUMPI PUSH2 0x1658 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1650 JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x1637 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1670 DUP3 DUP7 PUSH2 0x15CB JUMP JUMPDEST DUP5 MLOAD PUSH2 0x1680 DUP2 DUP4 PUSH1 0x20 DUP10 ADD PUSH2 0x118A JUMP JUMPDEST PUSH2 0x168C DUP2 DUP4 ADD DUP7 PUSH2 0x15CB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x16CA SWAP1 DUP4 ADD DUP5 PUSH2 0x11B6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1183 DUP2 PUSH2 0x1150 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1716 JUMPI PUSH2 0x1716 PUSH2 0x16F1 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x172D JUMPI PUSH2 0x172D PUSH2 0x159C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1741 JUMPI PUSH2 0x1741 PUSH2 0x16F1 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1759 JUMPI PUSH2 0x1759 PUSH2 0x159C JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID 0xDD CALLCODE MSTORE 0xAD SHL 0xE2 0xC8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 CREATE2 GAS 0x4D CREATE2 0x23 0xB3 0xEF LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x9A2D8D2C0A8DB91CD425246DD7EE86F1 PUSH28 0xAEDFD62B906810296D2F8B2FCD6C64736F6C634300080D0033000000 ",
							"sourceMap": "206:901:10:-:0;;;381:62;;;;;;;;;-1:-1:-1;3357:154:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3357:154:11;;;;3423:13;;3357:154;;;3423:13;;:5;;:13;:::i;:::-;-1:-1:-1;3446:17:11;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;3659:7:11;3473:31;;-1:-1:-1;921:32:0;719:10:5;921:18:0;:32::i;:::-;206:901:10;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;206:901:10:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;206:901:10;;;-1:-1:-1;206:901:10;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:380:12;93:1;89:12;;;;136;;;157:61;;211:4;203:6;199:17;189:27;;157:61;264:2;256:6;253:14;233:18;230:38;227:161;;310:10;305:3;301:20;298:1;291:31;345:4;342:1;335:15;373:4;370:1;363:15;227:161;;14:380;;;:::o;:::-;206:901:10;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfers_2332": {
									"entryPoint": null,
									"id": 2332,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_2251": {
									"entryPoint": 2385,
									"id": 2251,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfers_2319": {
									"entryPoint": null,
									"id": 2319,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkContractOnERC721Received_2306": {
									"entryPoint": 3361,
									"id": 2306,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_exists_1665": {
									"entryPoint": 2342,
									"id": 1665,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_1864": {
									"entryPoint": null,
									"id": 1864,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_msgSender_572": {
									"entryPoint": null,
									"id": 572,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownershipOf_1361": {
									"entryPoint": 2952,
									"id": 1361,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_safeMint_1679": {
									"entryPoint": 3316,
									"id": 1679,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_safeMint_1697": {
									"entryPoint": 3853,
									"id": 1697,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_startTokenId_1136": {
									"entryPoint": null,
									"id": 1136,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 3234,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_2034": {
									"entryPoint": 2477,
									"id": 2034,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_1494": {
									"entryPoint": 1001,
									"id": 1494,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_1223": {
									"entryPoint": 1435,
									"id": 1223,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@baseExtension_915": {
									"entryPoint": 1963,
									"id": 915,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@baseURI_913": {
									"entryPoint": 1293,
									"id": 913,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@getApproved_1516": {
									"entryPoint": 933,
									"id": 1516,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@giftCard_993": {
									"entryPoint": 1572,
									"id": 993,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@isApprovedForAll_1568": {
									"entryPoint": null,
									"id": 1568,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_283": {
									"entryPoint": 3346,
									"id": 283,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_1386": {
									"entryPoint": 787,
									"id": 1386,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_1376": {
									"entryPoint": 1180,
									"id": 1376,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": 1704,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_60": {
									"entryPoint": 1513,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_1605": {
									"entryPoint": 1153,
									"id": 1605,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_1641": {
									"entryPoint": 1883,
									"id": 1641,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_1550": {
									"entryPoint": 1734,
									"id": 1550,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setBaseURI_1011": {
									"entryPoint": 1198,
									"id": 1011,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_1195": {
									"entryPoint": 705,
									"id": 1195,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_882": {
									"entryPoint": null,
									"id": 882,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_1396": {
									"entryPoint": 1719,
									"id": 1396,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_741": {
									"entryPoint": 3597,
									"id": 741,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_960": {
									"entryPoint": 1976,
									"id": 960,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_1151": {
									"entryPoint": null,
									"id": 1151,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1586": {
									"entryPoint": 1142,
									"id": 1586,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 2182,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 4622,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_available_length_string": {
									"entryPoint": 4774,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_string": {
									"entryPoint": 4891,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 5022,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 5348,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4692,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 5225,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 5165,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 4650,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr": {
									"entryPoint": 5049,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 4454,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 5844,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr": {
									"entryPoint": 4923,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4597,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 4534,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string_storage": {
									"entryPoint": 5579,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 5732,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 5783,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4578,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5457,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5958,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 5895,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 5915,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 4490,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 5399,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 5554,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint256": {
									"entryPoint": 5938,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5532,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 5873,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 5510,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 4752,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bytes4": {
									"entryPoint": 4432,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11252:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "58:87:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "81:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "92:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "103:3:12",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "108:10:12",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "99:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "99:20:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "88:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "88:32:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "78:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "78:43:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "71:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "71:51:12"
															},
															"nodeType": "YulIf",
															"src": "68:71:12"
														}
													]
												},
												"name": "validator_revert_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "47:5:12",
														"type": ""
													}
												],
												"src": "14:131:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "219:176:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "265:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "274:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "277:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "267:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "267:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "267:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "240:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "249:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "236:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "236:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "261:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:32:12"
															},
															"nodeType": "YulIf",
															"src": "229:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "290:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "294:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "359:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "335:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:30:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "374:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "384:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "374:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "185:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "196:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "208:6:12",
														"type": ""
													}
												],
												"src": "150:245:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "495:92:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "505:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "517:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "528:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "513:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "513:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "505:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "547:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "572:6:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "565:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "565:14:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "558:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "558:22:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "540:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:41:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "464:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "475:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "486:4:12",
														"type": ""
													}
												],
												"src": "400:187:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "645:205:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "655:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "664:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "659:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "724:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "749:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "754:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "745:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "745:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "768:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "773:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "764:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "764:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "758:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "758:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "738:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "738:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "738:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "685:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "688:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "682:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "682:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "696:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "698:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "707:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "710:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "703:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "703:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "698:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "678:3:12",
																"statements": []
															},
															"src": "674:113:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "813:31:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "826:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "831:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "822:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "822:16:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "840:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "815:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "815:27:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "815:27:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "802:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "805:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "799:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "799:13:12"
															},
															"nodeType": "YulIf",
															"src": "796:48:12"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "623:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "628:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "633:6:12",
														"type": ""
													}
												],
												"src": "592:258:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "905:208:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "915:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "935:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "929:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "929:12:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "919:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "957:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "962:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "950:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "950:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "950:19:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1004:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1011:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1000:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1000:16:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1022:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1027:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1018:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1018:14:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1034:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "978:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "978:63:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "978:63:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1050:57:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1065:3:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1078:6:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1086:2:12",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1074:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1074:15:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1095:2:12",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1091:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1091:7:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1070:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1070:29:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1061:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1061:39:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1102:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1057:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1057:50:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1050:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "882:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "889:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "897:3:12",
														"type": ""
													}
												],
												"src": "855:258:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1239:99:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1256:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1267:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1249:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1249:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1249:21:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1279:53:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1305:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1317:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1328:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1313:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1313:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "1287:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1287:45:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1279:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1208:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1219:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1230:4:12",
														"type": ""
													}
												],
												"src": "1118:220:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1413:110:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1459:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1468:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1471:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1461:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1461:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1461:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1434:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1443:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1430:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1430:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1455:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1426:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1426:32:12"
															},
															"nodeType": "YulIf",
															"src": "1423:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1484:33:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1507:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1494:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:23:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1484:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1379:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1390:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1402:6:12",
														"type": ""
													}
												],
												"src": "1343:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1629:102:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1639:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1651:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1662:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1647:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1639:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1681:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1696:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1712:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1717:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1708:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1708:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1721:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1704:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1704:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1692:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1692:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1674:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1674:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1674:51:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1598:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1609:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1620:4:12",
														"type": ""
													}
												],
												"src": "1528:203:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1785:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1795:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1817:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1804:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1804:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1795:5:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1887:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1896:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1899:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1889:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1889:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1889:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1846:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1857:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1872:3:12",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1877:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1868:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1868:11:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1881:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1864:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1864:19:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1853:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1853:31:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1843:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1843:42:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1836:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1836:50:12"
															},
															"nodeType": "YulIf",
															"src": "1833:70:12"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1764:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1775:5:12",
														"type": ""
													}
												],
												"src": "1736:173:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2001:167:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2047:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2056:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2059:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2049:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2049:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2049:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2022:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2031:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2018:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2018:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2043:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2014:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2014:32:12"
															},
															"nodeType": "YulIf",
															"src": "2011:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2072:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2101:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2082:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2082:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2072:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2120:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2147:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2158:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2143:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2143:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2130:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2130:32:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2120:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1959:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1970:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1982:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1990:6:12",
														"type": ""
													}
												],
												"src": "1914:254:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2274:76:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2284:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2296:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2307:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2292:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2292:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2284:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2326:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2337:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2319:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2319:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2319:25:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2243:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2254:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2265:4:12",
														"type": ""
													}
												],
												"src": "2173:177:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2459:224:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2505:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2514:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2517:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2507:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2507:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2507:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2480:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2489:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2476:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2476:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2501:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2472:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2472:32:12"
															},
															"nodeType": "YulIf",
															"src": "2469:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2530:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2559:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2540:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2540:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2530:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2578:48:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2611:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2622:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2607:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2607:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2588:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2588:38:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2578:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2635:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2662:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2673:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2658:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2658:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2645:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2645:32:12"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2635:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2409:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2420:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2432:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2440:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2448:6:12",
														"type": ""
													}
												],
												"src": "2355:328:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2720:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2737:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2744:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2749:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2740:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2740:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2730:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2730:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2730:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2777:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2780:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2770:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2770:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2770:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2801:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2804:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2794:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2794:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2794:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "2688:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2895:557:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2905:28:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2923:2:12",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2927:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2919:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2919:10:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2931:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2915:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2915:18:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2909:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2960:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2962:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2962:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2962:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2948:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2956:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2945:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2945:14:12"
															},
															"nodeType": "YulIf",
															"src": "2942:40:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2991:17:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3005:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "3001:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3001:7:12"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "2995:2:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3017:23:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3037:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3031:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3031:9:12"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "3021:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3049:73:12",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3071:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "length",
																										"nodeType": "YulIdentifier",
																										"src": "3095:6:12"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3103:2:12",
																										"type": "",
																										"value": "31"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3091:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3091:15:12"
																							},
																							{
																								"name": "_2",
																								"nodeType": "YulIdentifier",
																								"src": "3108:2:12"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "3087:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3087:24:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3113:2:12",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3083:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3083:33:12"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "3118:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3079:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3079:42:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3067:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3067:55:12"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "3053:10:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3181:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3183:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3183:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3183:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3140:10:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3152:2:12"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3137:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3137:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3160:10:12"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3172:6:12"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "3157:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3157:22:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "3134:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3134:46:12"
															},
															"nodeType": "YulIf",
															"src": "3131:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3219:2:12",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "3223:10:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3212:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3212:22:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3212:22:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3243:15:12",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "3252:6:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "3243:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3274:6:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3282:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3267:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3267:22:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3267:22:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3327:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3336:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3339:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3329:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3329:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3329:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "3308:3:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3313:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3304:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3304:16:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "3322:3:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3301:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3301:25:12"
															},
															"nodeType": "YulIf",
															"src": "3298:45:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3369:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3377:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3365:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3365:17:12"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3384:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3389:6:12"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "3352:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3352:44:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3352:44:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "3420:6:12"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "3428:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3416:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3416:19:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3437:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3412:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3412:30:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3444:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3405:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3405:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3405:41:12"
														}
													]
												},
												"name": "abi_decode_available_length_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2864:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2869:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2877:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2885:5:12",
														"type": ""
													}
												],
												"src": "2820:632:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3510:169:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3559:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3568:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3571:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3561:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3561:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3561:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3538:6:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3546:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3534:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3534:17:12"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "3553:3:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3530:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3530:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3523:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3523:35:12"
															},
															"nodeType": "YulIf",
															"src": "3520:55:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3584:89:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3632:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3640:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3628:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3628:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3660:6:12"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "3647:12:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:20:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "3669:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_string",
																	"nodeType": "YulIdentifier",
																	"src": "3593:34:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3593:80:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "3584:5:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3484:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3492:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "3500:5:12",
														"type": ""
													}
												],
												"src": "3457:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3791:436:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3837:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3846:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3849:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3839:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3839:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3839:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3812:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3821:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3808:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3808:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3833:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3804:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3804:32:12"
															},
															"nodeType": "YulIf",
															"src": "3801:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3862:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3889:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3876:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3876:23:12"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3866:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3908:28:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3926:2:12",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3930:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3922:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3922:10:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3934:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3918:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3918:18:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3912:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3963:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3972:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3975:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3965:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3965:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3965:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3951:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3959:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3948:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3948:14:12"
															},
															"nodeType": "YulIf",
															"src": "3945:34:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3988:60:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4020:9:12"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "4031:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4016:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4016:22:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4040:7:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "3998:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3998:50:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3988:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4057:48:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4090:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4101:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4086:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4086:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4073:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4073:32:12"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "4061:8:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4134:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4143:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4146:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4136:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4136:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4136:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "4120:8:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4130:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4117:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:16:12"
															},
															"nodeType": "YulIf",
															"src": "4114:36:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4159:62:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4191:9:12"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "4202:8:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4187:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4187:24:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4213:7:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "4169:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4169:52:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4159:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3749:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3760:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3772:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3780:6:12",
														"type": ""
													}
												],
												"src": "3684:543:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4302:116:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4348:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4357:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4360:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4350:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4350:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4350:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4323:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4332:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4319:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4319:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4344:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4315:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4315:32:12"
															},
															"nodeType": "YulIf",
															"src": "4312:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4373:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4402:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4383:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4383:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4373:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4268:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4279:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4291:6:12",
														"type": ""
													}
												],
												"src": "4232:186:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4528:510:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4574:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4583:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4586:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4576:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4576:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4576:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4549:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4558:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4545:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4545:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4570:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4541:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4541:32:12"
															},
															"nodeType": "YulIf",
															"src": "4538:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4599:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4626:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4613:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4613:23:12"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4603:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4645:28:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4663:2:12",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4667:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4659:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4659:10:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4671:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4655:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4655:18:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4649:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4700:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4709:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4712:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4702:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4702:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4702:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4688:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4696:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4685:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4685:14:12"
															},
															"nodeType": "YulIf",
															"src": "4682:34:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4725:32:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4739:9:12"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4750:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4735:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4735:22:12"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4729:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4805:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4814:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4817:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4807:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4807:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4807:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4784:2:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4788:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4780:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4780:13:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4795:7:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "4776:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4776:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4769:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4769:35:12"
															},
															"nodeType": "YulIf",
															"src": "4766:55:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4830:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4857:2:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4844:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4844:16:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4834:6:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4887:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4896:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4899:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4889:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4889:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4889:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4875:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4883:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4872:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4872:14:12"
															},
															"nodeType": "YulIf",
															"src": "4869:34:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4961:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4970:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4973:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4963:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4963:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4963:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4926:2:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4934:1:12",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "4937:6:12"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4930:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4930:14:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4922:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4922:23:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4947:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4918:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4918:32:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4952:7:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4915:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4915:45:12"
															},
															"nodeType": "YulIf",
															"src": "4912:65:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4986:21:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5000:2:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5004:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4996:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4996:11:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4986:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5016:16:12",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "5026:6:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5016:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4486:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4497:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4509:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4517:6:12",
														"type": ""
													}
												],
												"src": "4423:615:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5127:263:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5173:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5182:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5185:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5175:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5175:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5175:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5148:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5157:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5144:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5144:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5169:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5140:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5140:32:12"
															},
															"nodeType": "YulIf",
															"src": "5137:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5198:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5227:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5208:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5208:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5198:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5246:45:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5276:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5287:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5272:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5272:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5259:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5259:32:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5250:5:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5344:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5353:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5356:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5346:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5346:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5346:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5313:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "5334:5:12"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "5327:6:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5327:13:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5320:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5320:21:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5310:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5310:32:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5303:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5303:40:12"
															},
															"nodeType": "YulIf",
															"src": "5300:60:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5369:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5379:5:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5369:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5085:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5096:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5108:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5116:6:12",
														"type": ""
													}
												],
												"src": "5043:347:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5525:537:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5572:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5581:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5584:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5574:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5574:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5574:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5546:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5555:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5542:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5542:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5567:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5538:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5538:33:12"
															},
															"nodeType": "YulIf",
															"src": "5535:53:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5597:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5626:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5607:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5607:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5597:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5645:48:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5678:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5689:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5674:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5674:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5655:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5655:38:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5645:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5702:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5729:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5740:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5725:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5725:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5712:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5712:32:12"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "5702:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5753:46:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5784:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5795:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5780:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5780:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5767:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5767:32:12"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "5757:6:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5842:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5851:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5854:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5844:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5844:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5844:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5814:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5830:2:12",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5834:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "5826:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5826:10:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5838:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5822:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5822:18:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5811:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5811:30:12"
															},
															"nodeType": "YulIf",
															"src": "5808:50:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5867:32:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5881:9:12"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5892:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5877:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5877:22:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5871:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5947:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5956:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5959:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5949:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5949:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5949:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "5926:2:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5930:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5922:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5922:13:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5937:7:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "5918:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5918:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5911:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5911:35:12"
															},
															"nodeType": "YulIf",
															"src": "5908:55:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5972:84:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6021:2:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6025:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6017:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6017:11:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6043:2:12"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "6030:12:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6030:16:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "6048:7:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_string",
																	"nodeType": "YulIdentifier",
																	"src": "5982:34:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5982:74:12"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "5972:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5467:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5478:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5490:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5498:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5506:6:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5514:6:12",
														"type": ""
													}
												],
												"src": "5395:667:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6154:173:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6200:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6209:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6212:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6202:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6202:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6202:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6175:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6184:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6171:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6171:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6196:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6167:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6167:32:12"
															},
															"nodeType": "YulIf",
															"src": "6164:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6225:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6254:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6235:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6235:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6225:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6273:48:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6306:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6317:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6302:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6302:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6283:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6283:38:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "6273:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6112:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6123:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6135:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6143:6:12",
														"type": ""
													}
												],
												"src": "6067:260:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6387:325:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6397:22:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6411:1:12",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6414:4:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6407:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6407:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "6397:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6428:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6458:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6464:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6454:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6454:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "6432:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6505:31:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6507:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "6521:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6529:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "6517:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6517:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6507:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6485:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6478:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6478:26:12"
															},
															"nodeType": "YulIf",
															"src": "6475:61:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6595:111:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6616:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6623:3:12",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6628:10:12",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "6619:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6619:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6609:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6609:31:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6609:31:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6660:1:12",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6663:4:12",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6653:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6653:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6653:15:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6688:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6691:4:12",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6681:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6681:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6681:15:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6551:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6574:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6582:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "6571:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6571:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6548:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6548:38:12"
															},
															"nodeType": "YulIf",
															"src": "6545:161:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "6367:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6376:6:12",
														"type": ""
													}
												],
												"src": "6332:380:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6891:182:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6908:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6919:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6901:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6901:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6901:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6942:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6953:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6938:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6938:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6958:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6931:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6931:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6931:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6981:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6992:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6977:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6977:18:12"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6997:34:12",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6970:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6970:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6970:62:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7041:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7053:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7064:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7049:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7049:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7041:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6868:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6882:4:12",
														"type": ""
													}
												],
												"src": "6717:356:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7110:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7127:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7134:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7139:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7130:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7130:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7120:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7120:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7120:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7167:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7170:4:12",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7160:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7160:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7160:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7191:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7194:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7184:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7184:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7184:15:12"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "7078:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7242:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7259:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7266:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7271:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7262:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7262:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7252:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7252:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7252:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7299:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7302:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7292:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7292:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7292:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7323:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7326:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7316:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7316:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7316:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "7210:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7389:88:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7420:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7422:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7422:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7422:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7405:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7416:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7412:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7412:6:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "7402:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7402:17:12"
															},
															"nodeType": "YulIf",
															"src": "7399:43:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7451:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7462:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7469:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7458:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7458:13:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "7451:3:12"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7371:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "7381:3:12",
														"type": ""
													}
												],
												"src": "7342:135:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7656:237:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7673:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7666:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7666:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7666:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7707:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7718:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7703:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7703:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7723:2:12",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7696:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7696:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7696:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7746:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7757:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7742:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7742:18:12"
																	},
																	{
																		"hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7762:34:12",
																		"type": "",
																		"value": "ERC721Metadata: URI query for no"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7735:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7735:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7735:62:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7817:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7828:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7813:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7813:18:12"
																	},
																	{
																		"hexValue": "6e6578697374656e7420746f6b656e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7833:17:12",
																		"type": "",
																		"value": "nexistent token"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7806:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7806:45:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7806:45:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7860:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7872:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7883:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7868:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7868:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7860:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7633:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7647:4:12",
														"type": ""
													}
												],
												"src": "7482:411:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7954:65:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7971:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "7974:3:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7964:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7964:14:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7964:14:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7987:26:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8005:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8008:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "7995:9:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7995:18:12"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "7987:4:12"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "7937:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "7945:4:12",
														"type": ""
													}
												],
												"src": "7898:121:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8082:915:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8092:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8115:5:12"
																	}
																],
																"functionName": {
																	"name": "sload",
																	"nodeType": "YulIdentifier",
																	"src": "8109:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8109:12:12"
															},
															"variables": [
																{
																	"name": "slotValue",
																	"nodeType": "YulTypedName",
																	"src": "8096:9:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8130:15:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8144:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8134:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8154:11:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8164:1:12",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "8158:2:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8174:28:12",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "8188:2:12"
																	},
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "8192:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8184:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8184:18:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "8174:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8211:44:12",
															"value": {
																"arguments": [
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "8241:9:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "8252:2:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "8237:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8237:18:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "8215:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8294:31:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8296:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "8310:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8318:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "8306:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8306:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8296:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "8274:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8267:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8267:26:12"
															},
															"nodeType": "YulIf",
															"src": "8264:61:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8334:12:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8344:2:12",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "8338:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8405:111:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8426:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8433:3:12",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8438:10:12",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "8429:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8429:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8419:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8419:31:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8419:31:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8470:1:12",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8473:4:12",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8463:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8463:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8463:15:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8498:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8501:4:12",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8491:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8491:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8491:15:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "8361:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8384:6:12"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "8392:2:12"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "8381:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8381:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "8358:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8358:38:12"
															},
															"nodeType": "YulIf",
															"src": "8355:161:12"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "8566:97:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "8587:3:12"
																						},
																						{
																							"arguments": [
																								{
																									"name": "slotValue",
																									"nodeType": "YulIdentifier",
																									"src": "8596:9:12"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "8611:3:12",
																											"type": "",
																											"value": "255"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "8607:3:12"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "8607:8:12"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "8592:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8592:24:12"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "8580:6:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8580:37:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "8580:37:12"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "8630:23:12",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "8641:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "8646:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8637:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8637:16:12"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "8630:3:12"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "8559:104:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8564:1:12",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "8679:312:12",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "8693:51:12",
																				"value": {
																					"arguments": [
																						{
																							"name": "value",
																							"nodeType": "YulIdentifier",
																							"src": "8738:5:12"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "8708:29:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8708:36:12"
																				},
																				"variables": [
																					{
																						"name": "dataPos",
																						"nodeType": "YulTypedName",
																						"src": "8697:7:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "8757:10:12",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8766:1:12",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "8761:1:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "8834:111:12",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "pos",
																												"nodeType": "YulIdentifier",
																												"src": "8863:3:12"
																											},
																											{
																												"name": "i",
																												"nodeType": "YulIdentifier",
																												"src": "8868:1:12"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "8859:3:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "8859:11:12"
																									},
																									{
																										"arguments": [
																											{
																												"name": "dataPos",
																												"nodeType": "YulIdentifier",
																												"src": "8878:7:12"
																											}
																										],
																										"functionName": {
																											"name": "sload",
																											"nodeType": "YulIdentifier",
																											"src": "8872:5:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "8872:14:12"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "8852:6:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8852:35:12"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "8852:35:12"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "8904:27:12",
																							"value": {
																								"arguments": [
																									{
																										"name": "dataPos",
																										"nodeType": "YulIdentifier",
																										"src": "8919:7:12"
																									},
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "8928:2:12"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8915:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8915:16:12"
																							},
																							"variableNames": [
																								{
																									"name": "dataPos",
																									"nodeType": "YulIdentifier",
																									"src": "8904:7:12"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "8791:1:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "8794:6:12"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "8788:2:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8788:13:12"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "8802:19:12",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "8804:15:12",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "8813:1:12"
																									},
																									{
																										"name": "_2",
																										"nodeType": "YulIdentifier",
																										"src": "8816:2:12"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8809:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8809:10:12"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "8804:1:12"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "8784:3:12",
																					"statements": []
																				},
																				"src": "8780:165:12"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "8958:23:12",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "8969:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "8974:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8965:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8965:16:12"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "8958:3:12"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "8672:319:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8677:1:12",
																		"type": "",
																		"value": "1"
																	}
																}
															],
															"expression": {
																"name": "outOfPlaceEncoding",
																"nodeType": "YulIdentifier",
																"src": "8532:18:12"
															},
															"nodeType": "YulSwitch",
															"src": "8525:466:12"
														}
													]
												},
												"name": "abi_encode_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8059:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8066:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "8074:3:12",
														"type": ""
													}
												],
												"src": "8024:973:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9231:227:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9241:48:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9277:6:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9285:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "9251:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9251:38:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "9245:2:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9298:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9318:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9312:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9312:13:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9302:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "9360:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9368:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9356:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9356:17:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "9375:2:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9379:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9334:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9334:52:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9334:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9395:57:12",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "9428:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "9440:2:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "9444:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9436:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9436:15:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "9402:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9402:50:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9395:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9191:3:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9196:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9204:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9212:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9223:3:12",
														"type": ""
													}
												],
												"src": "9002:456:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9637:228:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9654:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9665:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9647:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9647:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9647:21:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9688:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9699:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9684:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9684:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9704:2:12",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9677:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9677:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9677:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9727:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9738:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9723:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9723:18:12"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9743:34:12",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9716:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9716:62:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9716:62:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9798:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9809:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9794:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9794:18:12"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9814:8:12",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9787:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9787:36:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9787:36:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9832:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9844:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9855:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9840:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9840:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9832:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9614:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9628:4:12",
														"type": ""
													}
												],
												"src": "9463:402:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10073:286:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10083:29:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10101:3:12",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10106:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "10097:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10097:11:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10110:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10093:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10093:19:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10087:2:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10128:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10143:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10151:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10139:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10139:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10121:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10121:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10121:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10175:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10186:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10171:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10171:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "10195:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10203:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10191:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10191:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10164:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10164:43:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10164:43:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10227:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10238:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10223:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10223:18:12"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10243:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10216:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10216:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10216:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10270:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10281:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10266:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10266:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10286:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10259:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10259:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10259:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10299:54:12",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "10325:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10337:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10348:3:12",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10333:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10333:19:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "10307:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10307:46:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10299:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10018:9:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "10029:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10037:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10045:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10053:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10064:4:12",
														"type": ""
													}
												],
												"src": "9870:489:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10444:169:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10490:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10499:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10502:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10492:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10492:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10492:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10465:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10474:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10461:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10461:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10486:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10457:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10457:32:12"
															},
															"nodeType": "YulIf",
															"src": "10454:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10515:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10534:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10528:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10528:16:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "10519:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10577:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "10553:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10553:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10553:30:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10592:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10602:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "10592:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10410:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10421:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10433:6:12",
														"type": ""
													}
												],
												"src": "10364:249:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10650:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10667:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10674:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10679:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "10670:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10670:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10660:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10660:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10660:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10707:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10710:4:12",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10700:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10700:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10700:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10731:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10734:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10724:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10724:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10724:15:12"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "10618:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10796:74:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10819:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "10821:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10821:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10821:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10816:1:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10809:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10809:9:12"
															},
															"nodeType": "YulIf",
															"src": "10806:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10850:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10859:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10862:1:12"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10855:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10855:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "10850:1:12"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10781:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10784:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "10790:1:12",
														"type": ""
													}
												],
												"src": "10750:120:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10924:76:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10946:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10948:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10948:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10948:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10940:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10943:1:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10937:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10937:8:12"
															},
															"nodeType": "YulIf",
															"src": "10934:34:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10977:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10989:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10992:1:12"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10985:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10985:9:12"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "10977:4:12"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10906:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10909:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "10915:4:12",
														"type": ""
													}
												],
												"src": "10875:125:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11043:74:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11066:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "11068:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11068:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11068:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11063:1:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11056:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11056:9:12"
															},
															"nodeType": "YulIf",
															"src": "11053:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11097:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11106:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11109:1:12"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "11102:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11102:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "11097:1:12"
																}
															]
														}
													]
												},
												"name": "mod_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "11028:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "11031:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "11037:1:12",
														"type": ""
													}
												],
												"src": "11005:112:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11170:80:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11197:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11199:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11199:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11199:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11186:1:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "11193:1:12"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "11189:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11189:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "11183:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11183:13:12"
															},
															"nodeType": "YulIf",
															"src": "11180:39:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11228:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11239:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11242:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11235:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11235:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "11228:3:12"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "11153:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "11156:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "11162:3:12",
														"type": ""
													}
												],
												"src": "11122:128:12"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := sub(shl(64, 1), 1)\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"ERC721Metadata: URI query for no\")\n        mstore(add(headStart, 96), \"nexistent token\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_string_storage(value, pos) -> ret\n    {\n        let slotValue := sload(value)\n        let length := 0\n        let _1 := 1\n        length := shr(_1, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        let _2 := 32\n        if eq(outOfPlaceEncoding, lt(length, _2))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let _1 := abi_encode_string_storage(value0, pos)\n        let length := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), _1, length)\n        end := abi_encode_string_storage(value2, add(_1, length))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x107 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x6790A9DE EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x7A2D0163 EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xC6682862 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2AE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0x1166 JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH2 0x313 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12B SWAP2 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH2 0x15C PUSH2 0x157 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F5 JUMP JUMPDEST PUSH2 0x3A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12B JUMP JUMPDEST PUSH2 0x187 PUSH2 0x182 CALLDATASIZE PUSH1 0x4 PUSH2 0x122A JUMP JUMPDEST PUSH2 0x3E9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12B JUMP JUMPDEST PUSH2 0x187 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x1254 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1254 JUMP JUMPDEST PUSH2 0x481 JUMP JUMPDEST PUSH2 0x15C PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F5 JUMP JUMPDEST PUSH2 0x49C JUMP JUMPDEST PUSH2 0x187 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x133B JUMP JUMPDEST PUSH2 0x4AE JUMP JUMPDEST PUSH2 0x13C PUSH2 0x50D JUMP JUMPDEST PUSH2 0x191 PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0x139E JUMP JUMPDEST PUSH2 0x59B JUMP JUMPDEST PUSH2 0x187 PUSH2 0x5E9 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x21C CALLDATASIZE PUSH1 0x4 PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0x624 JUMP JUMPDEST PUSH2 0x15C PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x13C PUSH2 0x6B7 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x23F CALLDATASIZE PUSH1 0x4 PUSH2 0x142D JUMP JUMPDEST PUSH2 0x6C6 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0x1469 JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST PUSH2 0x13C PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x13C PUSH2 0x26D CALLDATASIZE PUSH1 0x4 PUSH2 0x11F5 JUMP JUMPDEST PUSH2 0x7B8 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x14E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x139E JUMP JUMPDEST PUSH2 0x886 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2F2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x30D JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x322 SWAP1 PUSH2 0x1517 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x34E SWAP1 PUSH2 0x1517 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x39B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x370 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x39B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B0 DUP3 PUSH2 0x926 JUMP JUMPDEST PUSH2 0x3CD JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F4 DUP3 PUSH2 0x49C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x428 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x448 JUMPI POP PUSH2 0x446 DUP2 CALLER PUSH2 0x280 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x466 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 DUP4 DUP4 DUP4 PUSH2 0x951 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x471 DUP4 DUP4 DUP4 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x471 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x75B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A7 DUP3 PUSH2 0xB88 JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH2 0x4B7 PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DD SWAP1 PUSH2 0x1551 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4F9 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x10B7 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x471 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x10B7 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x51A SWAP1 PUSH2 0x1517 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x546 SWAP1 PUSH2 0x1517 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x593 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x568 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x593 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x576 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x5F2 PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x618 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DD SWAP1 PUSH2 0x1551 JUMP JUMPDEST PUSH2 0x622 PUSH1 0x0 PUSH2 0xCA2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH2 0x62D PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x653 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DD SWAP1 PUSH2 0x1551 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6A2 JUMPI PUSH2 0x690 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x674 JUMPI PUSH2 0x674 PUSH2 0x1586 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x689 SWAP2 SWAP1 PUSH2 0x139E JUMP JUMPDEST PUSH1 0x1 PUSH2 0xCF4 JUMP JUMPDEST DUP1 PUSH2 0x69A DUP2 PUSH2 0x15B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x657 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x322 SWAP1 PUSH2 0x1517 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x766 DUP5 DUP5 DUP5 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x778 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD12 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x78D JUMPI POP PUSH2 0x78B DUP5 DUP5 DUP5 DUP5 PUSH2 0xD21 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x6A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH2 0x51A SWAP1 PUSH2 0x1517 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7C3 DUP3 PUSH2 0x926 JUMP JUMPDEST PUSH2 0x827 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 DUP1 SLOAD PUSH2 0x836 SWAP1 PUSH2 0x1517 JUMP JUMPDEST SWAP1 POP GT PUSH2 0x852 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x30D JUMP JUMPDEST PUSH1 0x9 PUSH2 0x85D DUP4 PUSH2 0xE0D JUMP JUMPDEST PUSH1 0xA PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x871 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1664 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH2 0x88F PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DD SWAP1 PUSH2 0x1551 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x923 DUP2 PUSH2 0xCA2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x30D JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B8 DUP3 PUSH2 0xB88 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9EF JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ DUP1 PUSH2 0xA0D JUMPI POP PUSH2 0xA0D DUP6 CALLER PUSH2 0x280 JUMP JUMPDEST DUP1 PUSH2 0xA28 JUMPI POP CALLER PUSH2 0xA1D DUP5 PUSH2 0x3A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0xA48 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xA6F JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA7B PUSH1 0x0 DUP5 DUP8 PUSH2 0x951 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR DUP4 SSTORE DUP8 ADD DUP1 DUP5 MSTORE SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 AND PUSH2 0xB4E JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0xB4E JUMPI DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR OR DUP2 SSTORE JUMPDEST POP POP POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x175F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0xC89 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0xC87 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xC1E JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0xC82 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xC1E JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xD0E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF0D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xD56 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1697 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD91 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD8E SWAP2 DUP2 ADD SWAP1 PUSH2 0x16D4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDEF JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDBF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDC4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xDE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0xE34 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xE5E JUMPI DUP1 PUSH2 0xE48 DUP2 PUSH2 0x15B2 JUMP JUMPDEST SWAP2 POP PUSH2 0xE57 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x1707 JUMP JUMPDEST SWAP2 POP PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xE78 JUMPI PUSH2 0xE78 PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEA2 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xE05 JUMPI PUSH2 0xEB7 PUSH1 0x1 DUP4 PUSH2 0x171B JUMP JUMPDEST SWAP2 POP PUSH2 0xEC4 PUSH1 0xA DUP7 PUSH2 0x1732 JUMP JUMPDEST PUSH2 0xECF SWAP1 PUSH1 0x30 PUSH2 0x1746 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xEE4 JUMPI PUSH2 0xEE4 PUSH2 0x1586 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xF06 PUSH1 0xA DUP7 PUSH2 0x1707 JUMP JUMPDEST SWAP5 POP PUSH2 0xEA6 JUMP JUMPDEST PUSH2 0x471 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xF3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x0 SUB PUSH2 0xF5F JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 AND DUP13 ADD DUP2 AND SWAP2 DUP3 OR PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT SWAP1 SWAP5 AND SWAP1 SWAP3 OR DUP4 SWAP1 DIV DUP2 AND DUP13 ADD DUP2 AND SWAP1 SWAP3 MUL OR SWAP1 SWAP2 SSTORE DUP6 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP1 DUP1 DUP6 ADD DUP4 DUP1 ISZERO PUSH2 0x1005 JUMPI POP PUSH2 0x1005 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD12 JUMP JUMPDEST ISZERO PUSH2 0x107B JUMPI JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x175F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG4 PUSH2 0x1044 PUSH1 0x0 DUP9 DUP5 DUP1 PUSH1 0x1 ADD SWAP6 POP DUP9 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0x1061 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x100B JUMPI DUP3 PUSH1 0x0 SLOAD EQ PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10AE JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP4 ADD SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x175F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG4 DUP1 DUP3 SUB PUSH2 0x107C JUMPI JUMPDEST POP PUSH1 0x0 SSTORE PUSH2 0xB81 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x10C3 SWAP1 PUSH2 0x1517 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x10E5 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x112B JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x10FE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x112B JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x112B JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x112B JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1110 JUMP JUMPDEST POP PUSH2 0x1137 SWAP3 SWAP2 POP PUSH2 0x113B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1137 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x113C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1183 DUP2 PUSH2 0x1150 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11A5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x118D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x6A2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x11CE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x118A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1183 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x11B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x123D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1246 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1272 DUP5 PUSH2 0x120E JUMP JUMPDEST SWAP3 POP PUSH2 0x1280 PUSH1 0x20 DUP6 ADD PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 GT ISZERO PUSH2 0x12C0 JUMPI PUSH2 0x12C0 PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x12E8 JUMPI PUSH2 0x12E8 PUSH2 0x1290 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x1301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x132C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1183 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x134E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1371 DUP7 DUP4 DUP8 ADD PUSH2 0x131B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1394 DUP6 DUP3 DUP7 ADD PUSH2 0x131B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1183 DUP3 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x13E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x141B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1449 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x145E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x147F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1488 DUP6 PUSH2 0x120E JUMP JUMPDEST SWAP4 POP PUSH2 0x1496 PUSH1 0x20 DUP7 ADD PUSH2 0x120E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x14B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x14C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D8 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x12A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1500 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x150E PUSH1 0x20 DUP5 ADD PUSH2 0x120E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x152B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x154B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x15C4 JUMPI PUSH2 0x15C4 PUSH2 0x159C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND DUP1 PUSH2 0x15E5 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 SUB PUSH2 0x1606 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x161A JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x162B JUMPI PUSH2 0x1658 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1650 JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x1637 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1670 DUP3 DUP7 PUSH2 0x15CB JUMP JUMPDEST DUP5 MLOAD PUSH2 0x1680 DUP2 DUP4 PUSH1 0x20 DUP10 ADD PUSH2 0x118A JUMP JUMPDEST PUSH2 0x168C DUP2 DUP4 ADD DUP7 PUSH2 0x15CB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x16CA SWAP1 DUP4 ADD DUP5 PUSH2 0x11B6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1183 DUP2 PUSH2 0x1150 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1716 JUMPI PUSH2 0x1716 PUSH2 0x16F1 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x172D JUMPI PUSH2 0x172D PUSH2 0x159C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1741 JUMPI PUSH2 0x1741 PUSH2 0x16F1 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1759 JUMPI PUSH2 0x1759 PUSH2 0x159C JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID 0xDD CALLCODE MSTORE 0xAD SHL 0xE2 0xC8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 CREATE2 GAS 0x4D CREATE2 0x23 0xB3 0xEF LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x9A2D8D2C0A8DB91CD425246DD7EE86F1 PUSH28 0xAEDFD62B906810296D2F8B2FCD6C64736F6C634300080D0033000000 ",
							"sourceMap": "206:901:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4551:300:11;;;;;;:::i;:::-;;:::i;:::-;;;565:14:12;;558:22;540:41;;528:2;513:18;4551:300:11;;;;;;;;7579:98;;;:::i;:::-;;;;;;;:::i;9035:200::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:12;;;1674:51;;1662:2;1647:18;9035:200:11;1528:203:12;8612:362:11;;;;;;:::i;:::-;;:::i;:::-;;3822:297;4072:12;;3866:7;4056:13;:28;3822:297;;;2319:25:12;;;2307:2;2292:18;3822:297:11;2173:177:12;9874:164:11;;;;;;:::i;:::-;;:::i;10104:179::-;;;;;;:::i;:::-;;:::i;7394:123::-;;;;;;:::i;:::-;;:::i;948:156:10:-;;;;;;:::i;:::-;;:::i;324:21::-;;;:::i;4910:203:11:-;;;;;;:::i;:::-;;:::i;1668:101:0:-;;;:::i;744:200:10:-;;;;;;:::i;:::-;;:::i;1036:85:0:-;;;:::i;7741:102:11:-;;;:::i;9302:282::-;;;;;;:::i;:::-;;:::i;10349:359::-;;;;;;:::i;:::-;;:::i;349:27:10:-;;;:::i;447:293::-;;;;;;:::i;:::-;;:::i;9650:162:11:-;;;;;;:::i;:::-;-1:-1:-1;;;;;9770:25:11;;;9747:4;9770:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;9650:162;1918:198:0;;;;;;:::i;:::-;;:::i;4551:300:11:-;4653:4;-1:-1:-1;;;;;;4688:40:11;;-1:-1:-1;;;4688:40:11;;:104;;-1:-1:-1;;;;;;;4744:48:11;;-1:-1:-1;;;4744:48:11;4688:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:8;;;4808:36:11;4669:175;4551:300;-1:-1:-1;;4551:300:11:o;7579:98::-;7633:13;7665:5;7658:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7579:98;:::o;9035:200::-;9103:7;9127:16;9135:7;9127;:16::i;:::-;9122:64;;9152:34;;-1:-1:-1;;;9152:34:11;;;;;;;;;;;9122:64;-1:-1:-1;9204:24:11;;;;:15;:24;;;;;;-1:-1:-1;;;;;9204:24:11;;9035:200::o;8612:362::-;8684:13;8700:24;8716:7;8700:15;:24::i;:::-;8684:40;;8744:5;-1:-1:-1;;;;;8738:11:11;:2;-1:-1:-1;;;;;8738:11:11;;8734:48;;8758:24;;-1:-1:-1;;;8758:24:11;;;;;;;;;;;8734:48;719:10:5;-1:-1:-1;;;;;8797:21:11;;;;;;:63;;-1:-1:-1;8823:37:11;8840:5;719:10:5;9650:162:11;:::i;8823:37::-;8822:38;8797:63;8793:136;;;8883:35;;-1:-1:-1;;;8883:35:11;;;;;;;;;;;8793:136;8939:28;8948:2;8952:7;8961:5;8939:8;:28::i;:::-;8674:300;8612:362;;:::o;9874:164::-;10003:28;10013:4;10019:2;10023:7;10003:9;:28::i;10104:179::-;10237:39;10254:4;10260:2;10264:7;10237:39;;;;;;;;;;;;:16;:39::i;7394:123::-;7458:7;7484:21;7497:7;7484:12;:21::i;:::-;:26;;7394:123;-1:-1:-1;;7394:123:11:o;948:156:10:-;719:10:5;1248:7:0;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;;;;;;;;;1045:18:10;;::::1;::::0;:7:::1;::::0;:18:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;1069:30:10;;::::1;::::0;:13:::1;::::0;:30:::1;::::0;::::1;::::0;::::1;:::i;324:21::-:0;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4910:203:11:-;4974:7;-1:-1:-1;;;;;4997:19:11;;4993:60;;5025:28;;-1:-1:-1;;;5025:28:11;;;;;;;;;;;4993:60;-1:-1:-1;;;;;;5078:19:11;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;5078:27:11;;4910:203::o;1668:101:0:-;719:10:5;1248:7:0;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;744:200:10:-;719:10:5;1248:7:0;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;832:11:10;817:12:::1;858:82;879:7;875:1;:11;858:82;;;903:28;913:11;;925:1;913:14;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;929:1;903:9;:28::i;:::-;888:3:::0;::::1;::::0;::::1;:::i;:::-;;;;858:82;;;;811:133;744:200:::0;;:::o;1036:85:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;;1036:85::o;7741:102:11:-;7797:13;7829:7;7822:14;;;;;:::i;9302:282::-;719:10:5;-1:-1:-1;;;;;9400:24:11;;;9396:54;;9433:17;;-1:-1:-1;;;9433:17:11;;;;;;;;;;;9396:54;719:10:5;9461:32:11;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;9461:42:11;;;;;;;;;;;;:53;;-1:-1:-1;;9461:53:11;;;;;;;;;;9529:48;;540:41:12;;;9461:42:11;;719:10:5;9529:48:11;;513:18:12;9529:48:11;;;;;;;9302:282;;:::o;10349:359::-;10510:28;10520:4;10526:2;10530:7;10510:9;:28::i;:::-;10552:15;:2;-1:-1:-1;;;;;10552:13:11;;:15::i;:::-;:76;;;;;10572:56;10603:4;10609:2;10613:7;10622:5;10572:30;:56::i;:::-;10571:57;10552:76;10548:154;;;10651:40;;-1:-1:-1;;;10651:40:11;;;;;;;;;;;349:27:10;;;;;;;:::i;447:293::-;517:13;546:16;554:7;546;:16::i;:::-;538:76;;;;-1:-1:-1;;;538:76:10;;7684:2:12;538:76:10;;;7666:21:12;7723:2;7703:18;;;7696:30;7762:34;7742:18;;;7735:62;-1:-1:-1;;;7813:18:12;;;7806:45;7868:19;;538:76:10;7482:411:12;538:76:10;651:1;633:7;627:21;;;;;:::i;:::-;;;:25;:108;;;;;;;;;;;;;;;;;687:7;696:18;:7;:16;:18::i;:::-;716:13;670:60;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;620:115;447:293;-1:-1:-1;;447:293:10:o;1918:198:0:-;719:10:5;1248:7:0;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;9665:2:12;1998:73:0::1;::::0;::::1;9647:21:12::0;9704:2;9684:18;;;9677:30;9743:34;9723:18;;;9716:62;-1:-1:-1;;;9794:18:12;;;9787:36;9840:19;;1998:73:0::1;9463:402:12::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;10954:172:11:-;11011:4;11074:13;;11064:7;:23;11034:85;;;;-1:-1:-1;;11092:20:11;;;;:11;:20;;;;;:27;-1:-1:-1;;;11092:27:11;;;;11091:28;;10954:172::o;18894:189::-;19004:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;19004:29:11;-1:-1:-1;;;;;19004:29:11;;;;;;;;;19048:28;;19004:24;;19048:28;;;;;;;18894:189;;;:::o;13964:2082::-;14074:35;14112:21;14125:7;14112:12;:21::i;:::-;14074:59;;14170:4;-1:-1:-1;;;;;14148:26:11;:13;:18;;;-1:-1:-1;;;;;14148:26:11;;14144:67;;14183:28;;-1:-1:-1;;;14183:28:11;;;;;;;;;;;14144:67;14222:22;719:10:5;-1:-1:-1;;;;;14248:20:11;;;;:72;;-1:-1:-1;14284:36:11;14301:4;719:10:5;9650:162:11;:::i;14284:36::-;14248:124;;;-1:-1:-1;719:10:5;14336:20:11;14348:7;14336:11;:20::i;:::-;-1:-1:-1;;;;;14336:36:11;;14248:124;14222:151;;14389:17;14384:66;;14415:35;;-1:-1:-1;;;14415:35:11;;;;;;;;;;;14384:66;-1:-1:-1;;;;;14464:16:11;;14460:52;;14489:23;;-1:-1:-1;;;14489:23:11;;;;;;;;;;;14460:52;14628:35;14645:1;14649:7;14658:4;14628:8;:35::i;:::-;-1:-1:-1;;;;;14953:18:11;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14953:31:11;;;-1:-1:-1;;;;;14953:31:11;;;-1:-1:-1;;14953:31:11;;;;;;;14998:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14998:29:11;;;;;;;;;;;15076:20;;;:11;:20;;;;;;15110:18;;-1:-1:-1;;;;;;15142:49:11;;;;-1:-1:-1;;;15175:15:11;15142:49;;;;;;;;;;15461:11;;15520:24;;;;;15562:13;;15076:20;;15520:24;;15562:13;15558:377;;15769:13;;15754:11;:28;15750:171;;15806:20;;15874:28;;;;-1:-1:-1;;;;;15848:54:11;-1:-1:-1;;;15848:54:11;-1:-1:-1;;;;;;15848:54:11;;;-1:-1:-1;;;;;15806:20:11;;15848:54;;;;15750:171;14929:1016;;;15979:7;15975:2;-1:-1:-1;;;;;15960:27:11;15969:4;-1:-1:-1;;;;;15960:27:11;-1:-1:-1;;;;;;;;;;;15960:27:11;;;;;;;;;15997:42;14064:1982;;13964:2082;;;:::o;6253:1084::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;6363:7:11;6443:13;;6436:4;:20;6405:868;;;6476:31;6510:17;;;:11;:17;;;;;;;;;6476:51;;;;;;;;;-1:-1:-1;;;;;6476:51:11;;;;-1:-1:-1;;;6476:51:11;;-1:-1:-1;;;;;6476:51:11;;;;;;;;-1:-1:-1;;;6476:51:11;;;;;;;;;;;;;;6545:714;;6594:14;;-1:-1:-1;;;;;6594:28:11;;6590:99;;6657:9;6253:1084;-1:-1:-1;;;6253:1084:11:o;6590:99::-;-1:-1:-1;;;7025:6:11;7069:17;;;;:11;:17;;;;;;;;;7057:29;;;;;;;;;-1:-1:-1;;;;;7057:29:11;;;;;-1:-1:-1;;;7057:29:11;;-1:-1:-1;;;;;7057:29:11;;;;;;;;-1:-1:-1;;;7057:29:11;;;;;;;;;;;;;7116:28;7112:107;;7183:9;6253:1084;-1:-1:-1;;;6253:1084:11:o;7112:107::-;6986:255;;;6458:815;6405:868;7299:31;;-1:-1:-1;;;7299:31:11;;;;;;;;;;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;11132:102:11:-;11200:27;11210:2;11214:8;11200:27;;;;;;;;;;;;:9;:27::i;:::-;11132:102;;:::o;1175:320:4:-;-1:-1:-1;;;;;1465:19:4;;:23;;;1175:320::o;19564:650:11:-;19742:72;;-1:-1:-1;;;19742:72:11;;19722:4;;-1:-1:-1;;;;;19742:36:11;;;;;:72;;719:10:5;;19793:4:11;;19799:7;;19808:5;;19742:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19742:72:11;;;;;;;;-1:-1:-1;;19742:72:11;;;;;;;;;;;;:::i;:::-;;;19738:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19973:6;:13;19990:1;19973:18;19969:229;;20018:40;;-1:-1:-1;;;20018:40:11;;;;;;;;;;;19969:229;20158:6;20152:13;20143:6;20139:2;20135:15;20128:38;19738:470;-1:-1:-1;;;;;;19860:55:11;-1:-1:-1;;;19860:55:11;;-1:-1:-1;19738:470:11;19564:650;;;;;;:::o;328:703:7:-;384:13;601:5;610:1;601:10;597:51;;-1:-1:-1;;627:10:7;;;;;;;;;;;;-1:-1:-1;;;627:10:7;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:7;;-1:-1:-1;773:2:7;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;-1:-1:-1;;;;;817:17:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:7;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:7;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;902:56:7;;;;;;;;-1:-1:-1;972:11:7;981:2;972:11;;:::i;:::-;;;844:150;;11585:157:11;11703:32;11709:2;11713:8;11723:5;11730:4;12122:20;12145:13;-1:-1:-1;;;;;12172:16:11;;12168:48;;12197:19;;-1:-1:-1;;;12197:19:11;;;;;;;;;;;12168:48;12230:8;12242:1;12230:13;12226:44;;12252:18;;-1:-1:-1;;;12252:18:11;;;;;;;;;;;12226:44;-1:-1:-1;;;;;12613:16:11;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;;;;;12671:49:11;;-1:-1:-1;;;;;12613:44:11;;;;;;;12671:49;;;-1:-1:-1;;;;;;;;;12613:44:11;;;;;;12671:49;;;;;;;;;;;;;;;;12735:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;12784:66:11;;;;-1:-1:-1;;;12834:15:11;12784:66;;;;;;;;;;12735:25;12928:23;;;12970:4;:23;;;;;12978:15;:2;-1:-1:-1;;;;;12978:13:11;;:15::i;:::-;12966:628;;;13013:309;13043:38;;13068:12;;-1:-1:-1;;;;;13043:38:11;;;13060:1;;-1:-1:-1;;;;;;;;;;;13043:38:11;13060:1;;13043:38;13108:69;13147:1;13151:2;13155:14;;;;;;13171:5;13108:30;:69::i;:::-;13103:172;;13212:40;;-1:-1:-1;;;13212:40:11;;;;;;;;;;;13103:172;13317:3;13301:12;:19;13013:309;;13401:12;13384:13;;:29;13380:43;;13415:8;;;13380:43;12966:628;;;13462:118;13492:40;;13517:14;;;;;-1:-1:-1;;;;;13492:40:11;;;13509:1;;-1:-1:-1;;;;;;;;;;;13492:40:11;13509:1;;13492:40;13575:3;13559:12;:19;13462:118;;12966:628;-1:-1:-1;13607:13:11;:28;13655:60;744:200:10;-1:-1:-1;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:12;-1:-1:-1;;;;;;88:32:12;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;:::-;384:5;150:245;-1:-1:-1;;;150:245:12:o;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:12;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:12;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:12:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:12;;1343:180;-1:-1:-1;1343:180:12:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:12;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:12:o;2355:328::-;2432:6;2440;2448;2501:2;2489:9;2480:7;2476:23;2472:32;2469:52;;;2517:1;2514;2507:12;2469:52;2540:29;2559:9;2540:29;:::i;:::-;2530:39;;2588:38;2622:2;2611:9;2607:18;2588:38;:::i;:::-;2578:48;;2673:2;2662:9;2658:18;2645:32;2635:42;;2355:328;;;;;:::o;2688:127::-;2749:10;2744:3;2740:20;2737:1;2730:31;2780:4;2777:1;2770:15;2804:4;2801:1;2794:15;2820:632;2885:5;-1:-1:-1;;;;;2945:14:12;;;2942:40;;;2962:18;;:::i;:::-;3037:2;3031:9;3005:2;3091:15;;-1:-1:-1;;3087:24:12;;;3113:2;3083:33;3079:42;3067:55;;;3137:18;;;3157:22;;;3134:46;3131:72;;;3183:18;;:::i;:::-;3223:10;3219:2;3212:22;3252:6;3243:15;;3282:6;3274;3267:22;3322:3;3313:6;3308:3;3304:16;3301:25;3298:45;;;3339:1;3336;3329:12;3298:45;3389:6;3384:3;3377:4;3369:6;3365:17;3352:44;3444:1;3437:4;3428:6;3420;3416:19;3412:30;3405:41;;;;2820:632;;;;;:::o;3457:222::-;3500:5;3553:3;3546:4;3538:6;3534:17;3530:27;3520:55;;3571:1;3568;3561:12;3520:55;3593:80;3669:3;3660:6;3647:20;3640:4;3632:6;3628:17;3593:80;:::i;3684:543::-;3772:6;3780;3833:2;3821:9;3812:7;3808:23;3804:32;3801:52;;;3849:1;3846;3839:12;3801:52;3876:23;;-1:-1:-1;;;;;3948:14:12;;;3945:34;;;3975:1;3972;3965:12;3945:34;3998:50;4040:7;4031:6;4020:9;4016:22;3998:50;:::i;:::-;3988:60;;4101:2;4090:9;4086:18;4073:32;4057:48;;4130:2;4120:8;4117:16;4114:36;;;4146:1;4143;4136:12;4114:36;;4169:52;4213:7;4202:8;4191:9;4187:24;4169:52;:::i;:::-;4159:62;;;3684:543;;;;;:::o;4232:186::-;4291:6;4344:2;4332:9;4323:7;4319:23;4315:32;4312:52;;;4360:1;4357;4350:12;4312:52;4383:29;4402:9;4383:29;:::i;4423:615::-;4509:6;4517;4570:2;4558:9;4549:7;4545:23;4541:32;4538:52;;;4586:1;4583;4576:12;4538:52;4613:23;;-1:-1:-1;;;;;4685:14:12;;;4682:34;;;4712:1;4709;4702:12;4682:34;4750:6;4739:9;4735:22;4725:32;;4795:7;4788:4;4784:2;4780:13;4776:27;4766:55;;4817:1;4814;4807:12;4766:55;4857:2;4844:16;4883:2;4875:6;4872:14;4869:34;;;4899:1;4896;4889:12;4869:34;4952:7;4947:2;4937:6;4934:1;4930:14;4926:2;4922:23;4918:32;4915:45;4912:65;;;4973:1;4970;4963:12;4912:65;5004:2;4996:11;;;;;5026:6;;-1:-1:-1;4423:615:12;;-1:-1:-1;;;;4423:615:12:o;5043:347::-;5108:6;5116;5169:2;5157:9;5148:7;5144:23;5140:32;5137:52;;;5185:1;5182;5175:12;5137:52;5208:29;5227:9;5208:29;:::i;:::-;5198:39;;5287:2;5276:9;5272:18;5259:32;5334:5;5327:13;5320:21;5313:5;5310:32;5300:60;;5356:1;5353;5346:12;5300:60;5379:5;5369:15;;;5043:347;;;;;:::o;5395:667::-;5490:6;5498;5506;5514;5567:3;5555:9;5546:7;5542:23;5538:33;5535:53;;;5584:1;5581;5574:12;5535:53;5607:29;5626:9;5607:29;:::i;:::-;5597:39;;5655:38;5689:2;5678:9;5674:18;5655:38;:::i;:::-;5645:48;-1:-1:-1;5740:2:12;5725:18;;5712:32;;-1:-1:-1;5795:2:12;5780:18;;5767:32;-1:-1:-1;;;;;5811:30:12;;5808:50;;;5854:1;5851;5844:12;5808:50;5877:22;;5930:4;5922:13;;5918:27;-1:-1:-1;5908:55:12;;5959:1;5956;5949:12;5908:55;5982:74;6048:7;6043:2;6030:16;6025:2;6021;6017:11;5982:74;:::i;:::-;5972:84;;;5395:667;;;;;;;:::o;6067:260::-;6135:6;6143;6196:2;6184:9;6175:7;6171:23;6167:32;6164:52;;;6212:1;6209;6202:12;6164:52;6235:29;6254:9;6235:29;:::i;:::-;6225:39;;6283:38;6317:2;6306:9;6302:18;6283:38;:::i;:::-;6273:48;;6067:260;;;;;:::o;6332:380::-;6411:1;6407:12;;;;6454;;;6475:61;;6529:4;6521:6;6517:17;6507:27;;6475:61;6582:2;6574:6;6571:14;6551:18;6548:38;6545:161;;6628:10;6623:3;6619:20;6616:1;6609:31;6663:4;6660:1;6653:15;6691:4;6688:1;6681:15;6545:161;;6332:380;;;:::o;6717:356::-;6919:2;6901:21;;;6938:18;;;6931:30;6997:34;6992:2;6977:18;;6970:62;7064:2;7049:18;;6717:356::o;7078:127::-;7139:10;7134:3;7130:20;7127:1;7120:31;7170:4;7167:1;7160:15;7194:4;7191:1;7184:15;7210:127;7271:10;7266:3;7262:20;7259:1;7252:31;7302:4;7299:1;7292:15;7326:4;7323:1;7316:15;7342:135;7381:3;7402:17;;;7399:43;;7422:18;;:::i;:::-;-1:-1:-1;7469:1:12;7458:13;;7342:135::o;8024:973::-;8109:12;;8074:3;;8164:1;8184:18;;;;8237;;;;8264:61;;8318:4;8310:6;8306:17;8296:27;;8264:61;8344:2;8392;8384:6;8381:14;8361:18;8358:38;8355:161;;8438:10;8433:3;8429:20;8426:1;8419:31;8473:4;8470:1;8463:15;8501:4;8498:1;8491:15;8355:161;8532:18;8559:104;;;;8677:1;8672:319;;;;8525:466;;8559:104;-1:-1:-1;;8592:24:12;;8580:37;;8637:16;;;;-1:-1:-1;8559:104:12;;8672:319;7971:1;7964:14;;;8008:4;7995:18;;8766:1;8780:165;8794:6;8791:1;8788:13;8780:165;;;8872:14;;8859:11;;;8852:35;8915:16;;;;8809:10;;8780:165;;;8784:3;;8974:6;8969:3;8965:16;8958:23;;8525:466;;;;;;;8024:973;;;;:::o;9002:456::-;9223:3;9251:38;9285:3;9277:6;9251:38;:::i;:::-;9318:6;9312:13;9334:52;9379:6;9375:2;9368:4;9360:6;9356:17;9334:52;:::i;:::-;9402:50;9444:6;9440:2;9436:15;9428:6;9402:50;:::i;:::-;9395:57;9002:456;-1:-1:-1;;;;;;;9002:456:12:o;9870:489::-;-1:-1:-1;;;;;10139:15:12;;;10121:34;;10191:15;;10186:2;10171:18;;10164:43;10238:2;10223:18;;10216:34;;;10286:3;10281:2;10266:18;;10259:31;;;10064:4;;10307:46;;10333:19;;10325:6;10307:46;:::i;:::-;10299:54;9870:489;-1:-1:-1;;;;;;9870:489:12:o;10364:249::-;10433:6;10486:2;10474:9;10465:7;10461:23;10457:32;10454:52;;;10502:1;10499;10492:12;10454:52;10534:9;10528:16;10553:30;10577:5;10553:30;:::i;10618:127::-;10679:10;10674:3;10670:20;10667:1;10660:31;10710:4;10707:1;10700:15;10734:4;10731:1;10724:15;10750:120;10790:1;10816;10806:35;;10821:18;;:::i;:::-;-1:-1:-1;10855:9:12;;10750:120::o;10875:125::-;10915:4;10943:1;10940;10937:8;10934:34;;;10948:18;;:::i;:::-;-1:-1:-1;10985:9:12;;10875:125::o;11005:112::-;11037:1;11063;11053:35;;11068:18;;:::i;:::-;-1:-1:-1;11102:9:12;;11005:112::o;11122:128::-;11162:3;11193:1;11189:6;11186:1;11183:13;11180:39;;;11199:18;;:::i;:::-;-1:-1:-1;11235:9:12;;11122:128::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1213600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2805",
								"baseExtension()": "infinite",
								"baseURI()": "infinite",
								"getApproved(uint256)": "6890",
								"giftCard(address[])": "infinite",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"owner()": "2610",
								"ownerOf(uint256)": "infinite",
								"renounceOwnership()": "28382",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "26933",
								"setBaseURI(string,string)": "infinite",
								"supportsInterface(bytes4)": "488",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"totalSupply()": "4453",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28775"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 381,
									"end": 443,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 381,
									"end": 443,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 381,
									"end": 443,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 381,
									"end": 443,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 381,
									"end": 443,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 381,
									"end": 443,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 443,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 381,
									"end": 443,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 381,
									"end": 443,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 381,
									"end": 443,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH",
									"source": 11,
									"value": "546F6F6E7A204D696E7465722052657761726473204361726400000000000000"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP5",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH",
									"source": 11,
									"value": "5"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "26A4A72A29"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "D9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "6"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3428,
									"name": "PUSH",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 3423,
									"end": 3428,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "tag",
									"source": 11,
									"value": "6"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3453,
									"name": "PUSH",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 3446,
									"end": 3453,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "tag",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3659,
									"end": 3666,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3473,
									"end": 3504,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3473,
									"end": 3504,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 14,
									"end": 394,
									"name": "tag",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 14,
									"end": 394,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 93,
									"end": 94,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 89,
									"end": 101,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 89,
									"end": 101,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 89,
									"end": 101,
									"name": "SHR",
									"source": 12
								},
								{
									"begin": 89,
									"end": 101,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 136,
									"end": 148,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 136,
									"end": 148,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 136,
									"end": 148,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 157,
									"end": 218,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 157,
									"end": 218,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 211,
									"end": 215,
									"name": "PUSH",
									"source": 12,
									"value": "7F"
								},
								{
									"begin": 203,
									"end": 209,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 199,
									"end": 216,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 189,
									"end": 216,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 189,
									"end": 216,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 157,
									"end": 218,
									"name": "tag",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 157,
									"end": 218,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 264,
									"end": 266,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 256,
									"end": 262,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 253,
									"end": 267,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 233,
									"end": 251,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 230,
									"end": 268,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 227,
									"end": 388,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 227,
									"end": 388,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 310,
									"end": 320,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B71"
								},
								{
									"begin": 305,
									"end": 308,
									"name": "PUSH",
									"source": 12,
									"value": "E0"
								},
								{
									"begin": 301,
									"end": 321,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 298,
									"end": 299,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 291,
									"end": 322,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 345,
									"end": 349,
									"name": "PUSH",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 342,
									"end": 343,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 335,
									"end": 350,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 373,
									"end": 377,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 370,
									"end": 371,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 363,
									"end": 378,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 227,
									"end": 388,
									"name": "tag",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 227,
									"end": 388,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 227,
									"end": 388,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 14,
									"end": 394,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 14,
									"end": 394,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 14,
									"end": 394,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 14,
									"end": 394,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 394,
									"name": "tag",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 14,
									"end": 394,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 206,
									"end": 1107,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206f9a2d8d2c0a8db91cd425246dd7ee86f17baedfd62b906810296d2f8b2fcd6c64736f6c634300080d0033",
									".code": [
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "1FFC9A7"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "6FDDE03"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "81812FC"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "95EA7B3"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "18160DDD"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "23B872DD"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "42842E0E"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "6352211E"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "6790A9DE"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "6C0360EB"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "70A08231"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "715018A6"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "7A2D0163"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "95D89B41"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "A22CB465"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "B88D4FDE"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "C6682862"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "C87B56DD"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "E985E9C5"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "F2FDE38B"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 206,
											"end": 1107,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 565,
											"end": 579,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 565,
											"end": 579,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 558,
											"end": 580,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "tag",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "tag",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "tag",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "tag",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1674,
											"end": 1725,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1674,
											"end": 1725,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1662,
											"end": 1664,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 1528,
											"end": 1731,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "tag",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "tag",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "tag",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4072,
											"end": 4084,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 4072,
											"end": 4084,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3866,
											"end": 3873,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4056,
											"end": 4069,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4056,
											"end": 4084,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "tag",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2307,
											"end": 2309,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2292,
											"end": 2310,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 2173,
											"end": 2350,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "tag",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "tag",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "tag",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "tag",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "tag",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "56"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "tag",
											"source": 11,
											"value": "56"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "tag",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "tag",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "68"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "tag",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 744,
											"end": 944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 744,
											"end": 944,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "tag",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 744,
											"end": 944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "tag",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "tag",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "89"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 349,
											"end": 376,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 349,
											"end": 376,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 349,
											"end": 376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 349,
											"end": 376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 349,
											"end": 376,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 447,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 447,
											"end": 740,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 447,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "tag",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "tag",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9747,
											"end": 9751,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9788,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4653,
											"end": 4657,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4688,
											"end": 4728,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4728,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80AC58CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4688,
											"end": 4728,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4728,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4792,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 4688,
											"end": 4792,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4744,
											"end": 4792,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4744,
											"end": 4792,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5B5E139F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4744,
											"end": 4792,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4792,
											"name": "tag",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 4688,
											"end": 4792,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4844,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4844,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 4688,
											"end": 4844,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4808,
											"end": 4844,
											"name": "tag",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 4808,
											"end": 4844,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4669,
											"end": 4844,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7633,
											"end": 7646,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 7665,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "117"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "117"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9103,
											"end": 9110,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9127,
											"end": 9143,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "119"
										},
										{
											"begin": 9135,
											"end": 9142,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9127,
											"end": 9134,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 9127,
											"end": 9143,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9127,
											"end": 9143,
											"name": "tag",
											"source": 11,
											"value": "119"
										},
										{
											"begin": 9127,
											"end": 9143,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9122,
											"end": 9186,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "121"
										},
										{
											"begin": 9122,
											"end": 9186,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "33D1C039"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 9122,
											"end": 9186,
											"name": "tag",
											"source": 11,
											"value": "121"
										},
										{
											"begin": 9122,
											"end": 9186,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9219,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "tag",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8684,
											"end": 8697,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 8716,
											"end": 8723,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8700,
											"end": 8715,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "tag",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8684,
											"end": 8724,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8684,
											"end": 8724,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8744,
											"end": 8749,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8738,
											"end": 8749,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8738,
											"end": 8740,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8738,
											"end": 8749,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8738,
											"end": 8749,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8734,
											"end": 8782,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 8734,
											"end": 8782,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "250FDEE3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 8734,
											"end": 8782,
											"name": "tag",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 8734,
											"end": 8782,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8860,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "127"
										},
										{
											"begin": 8797,
											"end": 8860,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8823,
											"end": 8860,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 8840,
											"end": 8845,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8823,
											"end": 8860,
											"name": "tag",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 8823,
											"end": 8860,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8822,
											"end": 8860,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8860,
											"name": "tag",
											"source": 11,
											"value": "127"
										},
										{
											"begin": 8797,
											"end": 8860,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "67D9DCA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "tag",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8939,
											"end": 8967,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 8948,
											"end": 8950,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8952,
											"end": 8959,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8961,
											"end": 8966,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8939,
											"end": 8947,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 8939,
											"end": 8967,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8939,
											"end": 8967,
											"name": "tag",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 8939,
											"end": 8967,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8674,
											"end": 8974,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "tag",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10003,
											"end": 10031,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 10013,
											"end": 10017,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10019,
											"end": 10021,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10023,
											"end": 10030,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10003,
											"end": 10012,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 10003,
											"end": 10031,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "tag",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 10254,
											"end": 10258,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10260,
											"end": 10262,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10264,
											"end": 10271,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10253,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "tag",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7458,
											"end": 7465,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7484,
											"end": 7505,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 7497,
											"end": 7504,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7484,
											"end": 7496,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 7484,
											"end": 7505,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7484,
											"end": 7505,
											"name": "tag",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 7484,
											"end": 7505,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7484,
											"end": 7510,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7484,
											"end": 7510,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 948,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1045,
											"end": 1052,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 1045,
											"end": 1052,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "tag",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 1045,
											"end": 1063,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1069,
											"end": 1082,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 1069,
											"end": 1082,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 1069,
											"end": 1099,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "tag",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "tag",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "tag",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "tag",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 324,
											"end": 345,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "tag",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4974,
											"end": 4981,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4997,
											"end": 5016,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4997,
											"end": 5016,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4993,
											"end": 5053,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 4993,
											"end": 5053,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23D3AD81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4993,
											"end": 5053,
											"name": "tag",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 4993,
											"end": 5053,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5090,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5105,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5078,
											"end": 5105,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5105,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 832,
											"end": 843,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 817,
											"end": 829,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 858,
											"end": 940,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 858,
											"end": 940,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 879,
											"end": 886,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 875,
											"end": 876,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 875,
											"end": 886,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 858,
											"end": 940,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 858,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 858,
											"end": 940,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 903,
											"end": 931,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 913,
											"end": 924,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 913,
											"end": 924,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 925,
											"end": 926,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 913,
											"end": 927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 913,
											"end": 927,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 929,
											"end": 930,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 903,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "183"
										},
										{
											"begin": 903,
											"end": 931,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 903,
											"end": 931,
											"name": "tag",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 903,
											"end": 931,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 888,
											"end": 891,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 888,
											"end": 891,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 888,
											"end": 891,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 888,
											"end": 891,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 888,
											"end": 891,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 888,
											"end": 891,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 888,
											"end": 891,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 888,
											"end": 891,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 888,
											"end": 891,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 888,
											"end": 891,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 858,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 858,
											"end": 940,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 858,
											"end": 940,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 858,
											"end": 940,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 858,
											"end": 940,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 811,
											"end": 944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 744,
											"end": 944,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "tag",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7797,
											"end": 7810,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 7829,
											"end": 7836,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "tag",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9400,
											"end": 9424,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9400,
											"end": 9424,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9400,
											"end": 9424,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9396,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 9396,
											"end": 9450,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B06307DB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 9396,
											"end": 9450,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 9396,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9479,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 540,
											"end": 581,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "PUSH",
											"source": 11,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "LOG3",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "tag",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10510,
											"end": 10538,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 10520,
											"end": 10524,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10526,
											"end": 10528,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10530,
											"end": 10537,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10510,
											"end": 10519,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 10510,
											"end": 10538,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10510,
											"end": 10538,
											"name": "tag",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 10510,
											"end": 10538,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10567,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 10552,
											"end": 10554,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10552,
											"end": 10565,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10565,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 10552,
											"end": 10567,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10552,
											"end": 10567,
											"name": "tag",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 10552,
											"end": 10567,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10572,
											"end": 10628,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10609,
											"end": 10611,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10613,
											"end": 10620,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10622,
											"end": 10627,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10572,
											"end": 10602,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 10572,
											"end": 10628,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10572,
											"end": 10628,
											"name": "tag",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 10572,
											"end": 10628,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10571,
											"end": 10628,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "tag",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10548,
											"end": 10702,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10548,
											"end": 10702,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "176"
										},
										{
											"begin": 10548,
											"end": 10702,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 349,
											"end": 376,
											"name": "tag",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 349,
											"end": 376,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 349,
											"end": 376,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 349,
											"end": 376,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 349,
											"end": 376,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 349,
											"end": 376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 349,
											"end": 376,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 349,
											"end": 376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 349,
											"end": 376,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "tag",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 447,
											"end": 740,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 517,
											"end": 530,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 546,
											"end": 562,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 554,
											"end": 561,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 546,
											"end": 553,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 546,
											"end": 562,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 546,
											"end": 562,
											"name": "tag",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 546,
											"end": 562,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 538,
											"end": 614,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 538,
											"end": 614,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 538,
											"end": 614,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 538,
											"end": 614,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 538,
											"end": 614,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 538,
											"end": 614,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7684,
											"end": 7686,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 538,
											"end": 614,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 538,
											"end": 614,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 538,
											"end": 614,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7666,
											"end": 7687,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7723,
											"end": 7725,
											"name": "PUSH",
											"source": 12,
											"value": "2F"
										},
										{
											"begin": 7703,
											"end": 7721,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7703,
											"end": 7721,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7703,
											"end": 7721,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7696,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7762,
											"end": 7796,
											"name": "PUSH",
											"source": 12,
											"value": "4552433732314D657461646174613A2055524920717565727920666F72206E6F"
										},
										{
											"begin": 7742,
											"end": 7760,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 7742,
											"end": 7760,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7742,
											"end": 7760,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7735,
											"end": 7797,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3732BC34B9BA32B73A103A37B5B2B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7813,
											"end": 7831,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 7813,
											"end": 7831,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7813,
											"end": 7831,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7806,
											"end": 7851,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7868,
											"end": 7887,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 7868,
											"end": 7887,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 538,
											"end": 614,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 7482,
											"end": 7893,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 538,
											"end": 614,
											"name": "tag",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 538,
											"end": 614,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 651,
											"end": 652,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 633,
											"end": 640,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 627,
											"end": 648,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 627,
											"end": 648,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 627,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 627,
											"end": 648,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 627,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 627,
											"end": 648,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 627,
											"end": 648,
											"name": "tag",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 627,
											"end": 648,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 627,
											"end": 648,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 627,
											"end": 648,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 627,
											"end": 652,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 627,
											"end": 735,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 735,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 735,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 735,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 627,
											"end": 735,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 627,
											"end": 735,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 627,
											"end": 735,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 627,
											"end": 735,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 687,
											"end": 694,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 696,
											"end": 714,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 696,
											"end": 703,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 696,
											"end": 712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 696,
											"end": 714,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 696,
											"end": 714,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 696,
											"end": 714,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 716,
											"end": 729,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 670,
											"end": 730,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 670,
											"end": 730,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 620,
											"end": 735,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 447,
											"end": 740,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 447,
											"end": 740,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "227"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "227"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9665,
											"end": 9667,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9647,
											"end": 9668,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9704,
											"end": 9706,
											"name": "PUSH",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 9684,
											"end": 9702,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 9684,
											"end": 9702,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9684,
											"end": 9702,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9677,
											"end": 9707,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9743,
											"end": 9777,
											"name": "PUSH",
											"source": 12,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 9723,
											"end": 9741,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 9723,
											"end": 9741,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9723,
											"end": 9741,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9716,
											"end": 9778,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9794,
											"end": 9812,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 9794,
											"end": 9812,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9794,
											"end": 9812,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9823,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9840,
											"end": 9859,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 9840,
											"end": 9859,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 9463,
											"end": 9865,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "tag",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 10954,
											"end": 11126,
											"name": "tag",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 10954,
											"end": 11126,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11011,
											"end": 11015,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11074,
											"end": 11087,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11074,
											"end": 11087,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 11064,
											"end": 11071,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11064,
											"end": 11087,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 11034,
											"end": 11119,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11034,
											"end": 11119,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 11034,
											"end": 11119,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 11034,
											"end": 11119,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11103,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 11091,
											"end": 11119,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 11091,
											"end": 11119,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10954,
											"end": 11126,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "tag",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19019,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "PUSH",
											"source": 11,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "LOG4",
											"source": 11
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "tag",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14074,
											"end": 14109,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14112,
											"end": 14133,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 14125,
											"end": 14132,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14112,
											"end": 14124,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 14112,
											"end": 14133,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14112,
											"end": 14133,
											"name": "tag",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 14112,
											"end": 14133,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14074,
											"end": 14133,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14074,
											"end": 14133,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14170,
											"end": 14174,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14148,
											"end": 14174,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14148,
											"end": 14161,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14148,
											"end": 14166,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14148,
											"end": 14166,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14148,
											"end": 14166,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14148,
											"end": 14174,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14148,
											"end": 14174,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 14144,
											"end": 14211,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 14144,
											"end": 14211,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A11481"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14144,
											"end": 14211,
											"name": "tag",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 14144,
											"end": 14211,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14222,
											"end": 14244,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14248,
											"end": 14268,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14268,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14268,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14268,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14320,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 14248,
											"end": 14320,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14284,
											"end": 14320,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 14301,
											"end": 14305,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14284,
											"end": 14320,
											"name": "tag",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 14284,
											"end": 14320,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 14336,
											"end": 14356,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 14348,
											"end": 14355,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14336,
											"end": 14347,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 14336,
											"end": 14356,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14336,
											"end": 14356,
											"name": "tag",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 14336,
											"end": 14356,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14336,
											"end": 14372,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14336,
											"end": 14372,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "tag",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14222,
											"end": 14373,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14222,
											"end": 14373,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14389,
											"end": 14406,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14384,
											"end": 14450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 14384,
											"end": 14450,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CE44B5F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14384,
											"end": 14450,
											"name": "tag",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 14384,
											"end": 14450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14464,
											"end": 14480,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14464,
											"end": 14480,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14460,
											"end": 14512,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 14460,
											"end": 14512,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A954ECD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14460,
											"end": 14512,
											"name": "tag",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 14460,
											"end": 14512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14628,
											"end": 14663,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 14645,
											"end": 14646,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14649,
											"end": 14656,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14658,
											"end": 14662,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 14628,
											"end": 14636,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 14628,
											"end": 14663,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14628,
											"end": 14663,
											"name": "tag",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 14628,
											"end": 14663,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14965,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15087,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 15110,
											"end": 15128,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15110,
											"end": 15128,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "OR",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15175,
											"end": 15190,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 15461,
											"end": 15472,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 15461,
											"end": 15472,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 15562,
											"end": 15575,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15562,
											"end": 15575,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15562,
											"end": 15575,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15558,
											"end": 15935,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 15558,
											"end": 15935,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 15769,
											"end": 15782,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 15769,
											"end": 15782,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 15754,
											"end": 15765,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 15754,
											"end": 15782,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 15750,
											"end": 15921,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 15750,
											"end": 15921,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 15806,
											"end": 15826,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15806,
											"end": 15826,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 15874,
											"end": 15902,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 15874,
											"end": 15902,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 15874,
											"end": 15902,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 15874,
											"end": 15902,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15806,
											"end": 15826,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 15806,
											"end": 15826,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 15750,
											"end": 15921,
											"name": "tag",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 15750,
											"end": 15921,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14929,
											"end": 15945,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14929,
											"end": 15945,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14929,
											"end": 15945,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 15979,
											"end": 15986,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 15975,
											"end": 15977,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15969,
											"end": 15973,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA389E1FC24A8587C776340EFB91B36E675792AB631816100D55DF0B5CF3CBC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "LOG4",
											"source": 11
										},
										{
											"begin": 15997,
											"end": 16039,
											"name": "tag",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 15997,
											"end": 16039,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14064,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14064,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "tag",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6363,
											"end": 6370,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6443,
											"end": 6456,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6443,
											"end": 6456,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6440,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6456,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "267"
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6507,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6521,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6545,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 6545,
											"end": 7259,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6594,
											"end": 6608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6594,
											"end": 6608,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6594,
											"end": 6622,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6594,
											"end": 6622,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6590,
											"end": 6689,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 6590,
											"end": 6689,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6657,
											"end": 6666,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6590,
											"end": 6689,
											"name": "tag",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 6590,
											"end": 6689,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7025,
											"end": 7031,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7080,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7116,
											"end": 7144,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7112,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "272"
										},
										{
											"begin": 7112,
											"end": 7219,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7183,
											"end": 7192,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7112,
											"end": 7219,
											"name": "tag",
											"source": 11,
											"value": "272"
										},
										{
											"begin": 7112,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6986,
											"end": 7241,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 6986,
											"end": 7241,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6986,
											"end": 7241,
											"name": "tag",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 6986,
											"end": 7241,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6458,
											"end": 7273,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "tag",
											"source": 11,
											"value": "267"
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F96CDA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11132,
											"end": 11234,
											"name": "tag",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 11132,
											"end": 11234,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "275"
										},
										{
											"begin": 11210,
											"end": 11212,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11214,
											"end": 11222,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11200,
											"end": 11209,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "tag",
											"source": 11,
											"value": "275"
										},
										{
											"begin": 11200,
											"end": 11227,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11132,
											"end": 11234,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11132,
											"end": 11234,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11132,
											"end": 11234,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "tag",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19722,
											"end": 19726,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19722,
											"end": 19726,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "PUSH",
											"source": 11,
											"value": "150B7A02"
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 19793,
											"end": 19797,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 19793,
											"end": 19797,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19799,
											"end": 19806,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 19799,
											"end": 19806,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19808,
											"end": 19813,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 19808,
											"end": 19813,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "281"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "tag",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "CALL",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "283"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "284"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "tag",
											"source": 11,
											"value": "283"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "tag",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "3F"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "289"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "tag",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "tag",
											"source": 11,
											"value": "289"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19973,
											"end": 19979,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19973,
											"end": 19986,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19990,
											"end": 19991,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19973,
											"end": 19991,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 19969,
											"end": 20198,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 19969,
											"end": 20198,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 19969,
											"end": 20198,
											"name": "tag",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 19969,
											"end": 20198,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 20158,
											"end": 20164,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 20152,
											"end": 20165,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 20143,
											"end": 20149,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 20139,
											"end": 20141,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 20135,
											"end": 20150,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 20128,
											"end": 20166,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "tag",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19860,
											"end": 19915,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19860,
											"end": 19915,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 19860,
											"end": 19915,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "tag",
											"source": 11,
											"value": "293"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "tag",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 384,
											"end": 397,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 601,
											"end": 606,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 610,
											"end": 611,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 601,
											"end": 611,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 597,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "tag",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 672,
											"end": 677,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 657,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 7,
											"value": "296"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 718,
											"end": 727,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 718,
											"end": 727,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "185"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "tag",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 773,
											"end": 775,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "300"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "tag",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "296"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 795,
											"end": 814,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "302"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "302"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "303"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 7,
											"value": "302"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "304"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 7,
											"value": "304"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 795,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 795,
											"end": 834,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "tag",
											"source": 7,
											"value": "305"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 851,
											"end": 861,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 851,
											"end": 861,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "293"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "307"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "tag",
											"source": 7,
											"value": "307"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "309"
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 945,
											"end": 950,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "310"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "tag",
											"source": 7,
											"value": "309"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "311"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 932,
											"end": 934,
											"name": "PUSH",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "312"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "tag",
											"source": 7,
											"value": "311"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 919,
											"end": 958,
											"name": "PUSH",
											"source": 7,
											"value": "F8"
										},
										{
											"begin": 919,
											"end": 958,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 902,
											"end": 908,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 909,
											"end": 915,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "181"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "tag",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 902,
											"end": 958,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 958,
											"name": "BYTE",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "MSTORE8",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "315"
										},
										{
											"begin": 981,
											"end": 983,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "300"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "tag",
											"source": 7,
											"value": "315"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "305"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11585,
											"end": 11742,
											"name": "tag",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 11585,
											"end": 11742,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11703,
											"end": 11735,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 11709,
											"end": 11711,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11713,
											"end": 11721,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11723,
											"end": 11728,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11730,
											"end": 11734,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 12122,
											"end": 12142,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12145,
											"end": 12158,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12172,
											"end": 12188,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 12172,
											"end": 12188,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12168,
											"end": 12216,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 12168,
											"end": 12216,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E0763"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12197,
											"end": 12216,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 12168,
											"end": 12216,
											"name": "tag",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 12168,
											"end": 12216,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12230,
											"end": 12238,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12242,
											"end": 12243,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12230,
											"end": 12243,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 12226,
											"end": 12270,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 12226,
											"end": 12270,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B562E8DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12252,
											"end": 12270,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 12226,
											"end": 12270,
											"name": "tag",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 12226,
											"end": 12270,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12625,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12629,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "DUP13",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "OR",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 12613,
											"end": 12657,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "DUP13",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12671,
											"end": 12720,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12746,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12770,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12770,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "OR",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12834,
											"end": 12849,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12784,
											"end": 12850,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 12735,
											"end": 12760,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12928,
											"end": 12951,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12928,
											"end": 12951,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 12928,
											"end": 12951,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12970,
											"end": 12974,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12970,
											"end": 12993,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12970,
											"end": 12993,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 12970,
											"end": 12993,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 12970,
											"end": 12993,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12970,
											"end": 12993,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12978,
											"end": 12993,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 12978,
											"end": 12980,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12978,
											"end": 12991,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12978,
											"end": 12991,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 12978,
											"end": 12993,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 12978,
											"end": 12993,
											"name": "tag",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 12978,
											"end": 12993,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13013,
											"end": 13322,
											"name": "tag",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 13013,
											"end": 13322,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13043,
											"end": 13081,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 13043,
											"end": 13081,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 13068,
											"end": 13080,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13068,
											"end": 13080,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13043,
											"end": 13081,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 13043,
											"end": 13081,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 13043,
											"end": 13081,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13060,
											"end": 13061,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13060,
											"end": 13061,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA389E1FC24A8587C776340EFB91B36E675792AB631816100D55DF0B5CF3CBC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 13043,
											"end": 13081,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13060,
											"end": 13061,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13060,
											"end": 13061,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13043,
											"end": 13081,
											"name": "LOG4",
											"source": 11
										},
										{
											"begin": 13108,
											"end": 13177,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 13147,
											"end": 13148,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13151,
											"end": 13153,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 13155,
											"end": 13169,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 13155,
											"end": 13169,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13155,
											"end": 13169,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 13155,
											"end": 13169,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13155,
											"end": 13169,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 13155,
											"end": 13169,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13171,
											"end": 13176,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 13108,
											"end": 13138,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 13108,
											"end": 13177,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 13108,
											"end": 13177,
											"name": "tag",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 13108,
											"end": 13177,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13103,
											"end": 13275,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 13103,
											"end": 13275,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13252,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 13103,
											"end": 13275,
											"name": "tag",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 13103,
											"end": 13275,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13317,
											"end": 13320,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13301,
											"end": 13313,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13301,
											"end": 13320,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 13013,
											"end": 13322,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 13013,
											"end": 13322,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13401,
											"end": 13413,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13384,
											"end": 13397,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13384,
											"end": 13397,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 13384,
											"end": 13413,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 13380,
											"end": 13423,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 13380,
											"end": 13423,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13415,
											"end": 13423,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13415,
											"end": 13423,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13415,
											"end": 13423,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 13380,
											"end": 13423,
											"name": "tag",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 13380,
											"end": 13423,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "334"
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "tag",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13462,
											"end": 13580,
											"name": "tag",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 13462,
											"end": 13580,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13492,
											"end": 13532,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 13492,
											"end": 13532,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 13517,
											"end": 13531,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 13517,
											"end": 13531,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13517,
											"end": 13531,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13517,
											"end": 13531,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 13517,
											"end": 13531,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13492,
											"end": 13532,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 13492,
											"end": 13532,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 13492,
											"end": 13532,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13509,
											"end": 13510,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13509,
											"end": 13510,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA389E1FC24A8587C776340EFB91B36E675792AB631816100D55DF0B5CF3CBC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 13492,
											"end": 13532,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13509,
											"end": 13510,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13509,
											"end": 13510,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13492,
											"end": 13532,
											"name": "LOG4",
											"source": 11
										},
										{
											"begin": 13575,
											"end": 13578,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13559,
											"end": 13571,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13559,
											"end": 13578,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 13462,
											"end": 13580,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 13462,
											"end": 13580,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "tag",
											"source": 11,
											"value": "334"
										},
										{
											"begin": 12966,
											"end": 13594,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13607,
											"end": 13620,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13607,
											"end": 13635,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 13655,
											"end": 13715,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 744,
											"end": 944,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "152"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "339"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "113"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "339"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "341"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "344"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "341"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "342"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "344"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "342"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "344"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "343"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "344"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "343"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "344"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "345"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "346"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "345"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "346"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "347"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "345"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "347"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 88,
											"end": 120,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 88,
											"end": 120,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 78,
											"end": 121,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 78,
											"end": 121,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 68,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 150,
											"end": 395,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 208,
											"end": 214,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 240,
											"end": 247,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 236,
											"end": 259,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 232,
											"end": 264,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "363"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 277,
											"end": 278,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 267,
											"end": 279,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 12,
											"value": "363"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 316,
											"end": 325,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 303,
											"end": 326,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 359,
											"end": 364,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 335,
											"end": 365,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 335,
											"end": 365,
											"name": "tag",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 335,
											"end": 365,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 384,
											"end": 389,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 150,
											"end": 395,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 592,
											"end": 850,
											"name": "tag",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 592,
											"end": 850,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 664,
											"end": 665,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "tag",
											"source": 12,
											"value": "367"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 688,
											"end": 694,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 685,
											"end": 686,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 682,
											"end": 695,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 674,
											"end": 787,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 674,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "369"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 764,
											"end": 775,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 764,
											"end": 775,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 764,
											"end": 775,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 758,
											"end": 776,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 745,
											"end": 756,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 745,
											"end": 756,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 745,
											"end": 756,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 738,
											"end": 777,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 710,
											"end": 712,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 703,
											"end": 713,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 674,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "367"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 674,
											"end": 787,
											"name": "tag",
											"source": 12,
											"value": "369"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 805,
											"end": 811,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 802,
											"end": 803,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 799,
											"end": 812,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 796,
											"end": 844,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 796,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "176"
										},
										{
											"begin": 796,
											"end": 844,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 840,
											"end": 841,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 838,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 822,
											"end": 838,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 815,
											"end": 842,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 592,
											"end": 850,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "tag",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 897,
											"end": 900,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 935,
											"end": 940,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 929,
											"end": 941,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 962,
											"end": 968,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 957,
											"end": 960,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 950,
											"end": 969,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 1034,
											"end": 1040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1027,
											"end": 1031,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1022,
											"end": 1025,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1018,
											"end": 1032,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1011,
											"end": 1015,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1000,
											"end": 1016,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "tag",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1095,
											"end": 1097,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 1074,
											"end": 1089,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1070,
											"end": 1099,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1102,
											"end": 1106,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1057,
											"end": 1107,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1057,
											"end": 1107,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1118,
											"end": 1338,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 1118,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1267,
											"end": 1269,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1256,
											"end": 1265,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1249,
											"end": 1270,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1230,
											"end": 1234,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 1328,
											"end": 1330,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1317,
											"end": 1326,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1313,
											"end": 1331,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1305,
											"end": 1311,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "tag",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1402,
											"end": 1408,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1455,
											"end": 1457,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1443,
											"end": 1452,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 1441,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1430,
											"end": 1453,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1426,
											"end": 1458,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1471,
											"end": 1472,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1468,
											"end": 1469,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1461,
											"end": 1473,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "tag",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "tag",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1804,
											"end": 1824,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1804,
											"end": 1824,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1853,
											"end": 1884,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1853,
											"end": 1884,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1843,
											"end": 1885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1843,
											"end": 1885,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "379"
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1896,
											"end": 1897,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1889,
											"end": 1901,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "tag",
											"source": 12,
											"value": "379"
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "tag",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1982,
											"end": 1988,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1990,
											"end": 1996,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2043,
											"end": 2045,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2031,
											"end": 2040,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2022,
											"end": 2029,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2018,
											"end": 2041,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2014,
											"end": 2046,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "381"
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2059,
											"end": 2060,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2056,
											"end": 2057,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2049,
											"end": 2061,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "tag",
											"source": 12,
											"value": "381"
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "382"
										},
										{
											"begin": 2101,
											"end": 2110,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "tag",
											"source": 12,
											"value": "382"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2072,
											"end": 2111,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 2158,
											"end": 2160,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2130,
											"end": 2162,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2130,
											"end": 2162,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "tag",
											"source": 12,
											"value": "50"
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2432,
											"end": 2438,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2440,
											"end": 2446,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2448,
											"end": 2454,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2501,
											"end": 2503,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2489,
											"end": 2498,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2480,
											"end": 2487,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2476,
											"end": 2499,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2472,
											"end": 2504,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2517,
											"end": 2518,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2514,
											"end": 2515,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2519,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "tag",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 2559,
											"end": 2568,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "tag",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2530,
											"end": 2569,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2530,
											"end": 2569,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "387"
										},
										{
											"begin": 2622,
											"end": 2624,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2611,
											"end": 2620,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2607,
											"end": 2625,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "tag",
											"source": 12,
											"value": "387"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2578,
											"end": 2626,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2578,
											"end": 2626,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2673,
											"end": 2675,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2662,
											"end": 2671,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2658,
											"end": 2676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2645,
											"end": 2677,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2635,
											"end": 2677,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2635,
											"end": 2677,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2688,
											"end": 2815,
											"name": "tag",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 2688,
											"end": 2815,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2749,
											"end": 2759,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 2744,
											"end": 2747,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 2737,
											"end": 2738,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2730,
											"end": 2761,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2780,
											"end": 2784,
											"name": "PUSH",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 2777,
											"end": 2778,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2770,
											"end": 2785,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2804,
											"end": 2808,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 2801,
											"end": 2802,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2794,
											"end": 2809,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2820,
											"end": 3452,
											"name": "tag",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 2820,
											"end": 3452,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2885,
											"end": 2890,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2945,
											"end": 2959,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2945,
											"end": 2959,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2945,
											"end": 2959,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2942,
											"end": 2982,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2942,
											"end": 2982,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 2942,
											"end": 2982,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2962,
											"end": 2980,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 2962,
											"end": 2980,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 2962,
											"end": 2980,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2962,
											"end": 2980,
											"name": "tag",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 2962,
											"end": 2980,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3037,
											"end": 3039,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3031,
											"end": 3040,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 3091,
											"end": 3106,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3091,
											"end": 3106,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3087,
											"end": 3111,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3087,
											"end": 3111,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3087,
											"end": 3111,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3113,
											"end": 3115,
											"name": "PUSH",
											"source": 12,
											"value": "3F"
										},
										{
											"begin": 3083,
											"end": 3116,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3079,
											"end": 3121,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3067,
											"end": 3122,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3067,
											"end": 3122,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3067,
											"end": 3122,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3137,
											"end": 3155,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3137,
											"end": 3155,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3137,
											"end": 3155,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3157,
											"end": 3179,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3157,
											"end": 3179,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3157,
											"end": 3179,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 3134,
											"end": 3180,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 3131,
											"end": 3203,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3131,
											"end": 3203,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 3131,
											"end": 3203,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3183,
											"end": 3201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 3183,
											"end": 3201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 3183,
											"end": 3201,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3183,
											"end": 3201,
											"name": "tag",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 3183,
											"end": 3201,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3223,
											"end": 3233,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3219,
											"end": 3221,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3212,
											"end": 3234,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3252,
											"end": 3258,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3243,
											"end": 3258,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 3243,
											"end": 3258,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3282,
											"end": 3288,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3274,
											"end": 3280,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3267,
											"end": 3289,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3322,
											"end": 3325,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3313,
											"end": 3319,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3308,
											"end": 3311,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3304,
											"end": 3320,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3301,
											"end": 3326,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3298,
											"end": 3343,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3298,
											"end": 3343,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "394"
										},
										{
											"begin": 3298,
											"end": 3343,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3339,
											"end": 3340,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3336,
											"end": 3337,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3329,
											"end": 3341,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3298,
											"end": 3343,
											"name": "tag",
											"source": 12,
											"value": "394"
										},
										{
											"begin": 3298,
											"end": 3343,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3389,
											"end": 3395,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3384,
											"end": 3387,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3377,
											"end": 3381,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3369,
											"end": 3375,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3365,
											"end": 3382,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3396,
											"name": "CALLDATACOPY",
											"source": 12
										},
										{
											"begin": 3444,
											"end": 3445,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3437,
											"end": 3441,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3428,
											"end": 3434,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3420,
											"end": 3426,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3416,
											"end": 3435,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3412,
											"end": 3442,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3405,
											"end": 3446,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3405,
											"end": 3446,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3405,
											"end": 3446,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3405,
											"end": 3446,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2820,
											"end": 3452,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2820,
											"end": 3452,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2820,
											"end": 3452,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2820,
											"end": 3452,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2820,
											"end": 3452,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2820,
											"end": 3452,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3457,
											"end": 3679,
											"name": "tag",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 3457,
											"end": 3679,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3500,
											"end": 3505,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3553,
											"end": 3556,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3546,
											"end": 3550,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 3538,
											"end": 3544,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3534,
											"end": 3551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3530,
											"end": 3557,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3520,
											"end": 3575,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 3520,
											"end": 3575,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3571,
											"end": 3572,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3568,
											"end": 3569,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3561,
											"end": 3573,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3520,
											"end": 3575,
											"name": "tag",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 3520,
											"end": 3575,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3593,
											"end": 3673,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 3669,
											"end": 3672,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3660,
											"end": 3666,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3647,
											"end": 3667,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3640,
											"end": 3644,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3632,
											"end": 3638,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3628,
											"end": 3645,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3593,
											"end": 3673,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 3593,
											"end": 3673,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3684,
											"end": 4227,
											"name": "tag",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 3684,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3780,
											"end": 3786,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3833,
											"end": 3835,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3821,
											"end": 3830,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3812,
											"end": 3819,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3808,
											"end": 3831,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3804,
											"end": 3836,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3801,
											"end": 3853,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3801,
											"end": 3853,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "399"
										},
										{
											"begin": 3801,
											"end": 3853,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3849,
											"end": 3850,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3846,
											"end": 3847,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3839,
											"end": 3851,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3801,
											"end": 3853,
											"name": "tag",
											"source": 12,
											"value": "399"
										},
										{
											"begin": 3801,
											"end": 3853,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3876,
											"end": 3899,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3876,
											"end": 3899,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3948,
											"end": 3962,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3948,
											"end": 3962,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3948,
											"end": 3962,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3975,
											"end": 3976,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3972,
											"end": 3973,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3965,
											"end": 3977,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "tag",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3998,
											"end": 4048,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "401"
										},
										{
											"begin": 4040,
											"end": 4047,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4031,
											"end": 4037,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4020,
											"end": 4029,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 4016,
											"end": 4038,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3998,
											"end": 4048,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 3998,
											"end": 4048,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3998,
											"end": 4048,
											"name": "tag",
											"source": 12,
											"value": "401"
										},
										{
											"begin": 3998,
											"end": 4048,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3988,
											"end": 4048,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 3988,
											"end": 4048,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4101,
											"end": 4103,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4090,
											"end": 4099,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4086,
											"end": 4104,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4073,
											"end": 4105,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 4057,
											"end": 4105,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4057,
											"end": 4105,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4130,
											"end": 4132,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4120,
											"end": 4128,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4117,
											"end": 4133,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4150,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 4114,
											"end": 4150,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4146,
											"end": 4147,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4143,
											"end": 4144,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4136,
											"end": 4148,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4150,
											"name": "tag",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 4114,
											"end": 4150,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4150,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4169,
											"end": 4221,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 4213,
											"end": 4220,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4202,
											"end": 4210,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4191,
											"end": 4200,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4187,
											"end": 4211,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4169,
											"end": 4221,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 4169,
											"end": 4221,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4169,
											"end": 4221,
											"name": "tag",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 4169,
											"end": 4221,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4159,
											"end": 4221,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4159,
											"end": 4221,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4159,
											"end": 4221,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3684,
											"end": 4227,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3684,
											"end": 4227,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3684,
											"end": 4227,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3684,
											"end": 4227,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3684,
											"end": 4227,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3684,
											"end": 4227,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4232,
											"end": 4418,
											"name": "tag",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 4232,
											"end": 4418,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4291,
											"end": 4297,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4344,
											"end": 4346,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4332,
											"end": 4341,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4323,
											"end": 4330,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4319,
											"end": 4342,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4315,
											"end": 4347,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4312,
											"end": 4364,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4312,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 4312,
											"end": 4364,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4360,
											"end": 4361,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4357,
											"end": 4358,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4350,
											"end": 4362,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4312,
											"end": 4364,
											"name": "tag",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 4312,
											"end": 4364,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4383,
											"end": 4412,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 4402,
											"end": 4411,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4383,
											"end": 4412,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 4383,
											"end": 4412,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4423,
											"end": 5038,
											"name": "tag",
											"source": 12,
											"value": "75"
										},
										{
											"begin": 4423,
											"end": 5038,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4509,
											"end": 4515,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4517,
											"end": 4523,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4570,
											"end": 4572,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4558,
											"end": 4567,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4549,
											"end": 4556,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4545,
											"end": 4568,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4541,
											"end": 4573,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4538,
											"end": 4590,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4538,
											"end": 4590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 4538,
											"end": 4590,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4586,
											"end": 4587,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4583,
											"end": 4584,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4576,
											"end": 4588,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4538,
											"end": 4590,
											"name": "tag",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 4538,
											"end": 4590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4613,
											"end": 4636,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4613,
											"end": 4636,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4685,
											"end": 4699,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4685,
											"end": 4699,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4685,
											"end": 4699,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4682,
											"end": 4716,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4682,
											"end": 4716,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 4682,
											"end": 4716,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4712,
											"end": 4713,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4709,
											"end": 4710,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4702,
											"end": 4714,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4682,
											"end": 4716,
											"name": "tag",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 4682,
											"end": 4716,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4750,
											"end": 4756,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4739,
											"end": 4748,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4735,
											"end": 4757,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4725,
											"end": 4757,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4725,
											"end": 4757,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4795,
											"end": 4802,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4788,
											"end": 4792,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 4784,
											"end": 4786,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4793,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4776,
											"end": 4803,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4766,
											"end": 4821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 4766,
											"end": 4821,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4817,
											"end": 4818,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4814,
											"end": 4815,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4807,
											"end": 4819,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4766,
											"end": 4821,
											"name": "tag",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 4766,
											"end": 4821,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4857,
											"end": 4859,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4844,
											"end": 4860,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 4883,
											"end": 4885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4875,
											"end": 4881,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4872,
											"end": 4886,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4869,
											"end": 4903,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4869,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 4869,
											"end": 4903,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4899,
											"end": 4900,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4896,
											"end": 4897,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4889,
											"end": 4901,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4869,
											"end": 4903,
											"name": "tag",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 4869,
											"end": 4903,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4952,
											"end": 4959,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4947,
											"end": 4949,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4937,
											"end": 4943,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4934,
											"end": 4935,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 4930,
											"end": 4944,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 4926,
											"end": 4928,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4922,
											"end": 4945,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4918,
											"end": 4950,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4915,
											"end": 4960,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4912,
											"end": 4977,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4912,
											"end": 4977,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 4912,
											"end": 4977,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4973,
											"end": 4974,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4970,
											"end": 4971,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4963,
											"end": 4975,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4912,
											"end": 4977,
											"name": "tag",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 4912,
											"end": 4977,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5004,
											"end": 5006,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4996,
											"end": 5007,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4996,
											"end": 5007,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4996,
											"end": 5007,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4996,
											"end": 5007,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4996,
											"end": 5007,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": 5026,
											"end": 5032,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5026,
											"end": 5032,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4423,
											"end": 5038,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4423,
											"end": 5038,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4423,
											"end": 5038,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5043,
											"end": 5390,
											"name": "tag",
											"source": 12,
											"value": "85"
										},
										{
											"begin": 5043,
											"end": 5390,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5108,
											"end": 5114,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5116,
											"end": 5122,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5169,
											"end": 5171,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5157,
											"end": 5166,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5148,
											"end": 5155,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5144,
											"end": 5167,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5140,
											"end": 5172,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 5137,
											"end": 5189,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5137,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 5137,
											"end": 5189,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5185,
											"end": 5186,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5182,
											"end": 5183,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5175,
											"end": 5187,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5137,
											"end": 5189,
											"name": "tag",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 5137,
											"end": 5189,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5208,
											"end": 5237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 5227,
											"end": 5236,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5208,
											"end": 5237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 5208,
											"end": 5237,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5208,
											"end": 5237,
											"name": "tag",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 5208,
											"end": 5237,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5198,
											"end": 5237,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5198,
											"end": 5237,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5287,
											"end": 5289,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5276,
											"end": 5285,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5259,
											"end": 5291,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 5334,
											"end": 5339,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5327,
											"end": 5340,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5320,
											"end": 5341,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5313,
											"end": 5318,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5310,
											"end": 5342,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 5300,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 5300,
											"end": 5360,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5356,
											"end": 5357,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5353,
											"end": 5354,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5346,
											"end": 5358,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5300,
											"end": 5360,
											"name": "tag",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 5300,
											"end": 5360,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5379,
											"end": 5384,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5369,
											"end": 5384,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5369,
											"end": 5384,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5369,
											"end": 5384,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5043,
											"end": 5390,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5043,
											"end": 5390,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5043,
											"end": 5390,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5043,
											"end": 5390,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5043,
											"end": 5390,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5043,
											"end": 5390,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "tag",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5490,
											"end": 5496,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5498,
											"end": 5504,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5506,
											"end": 5512,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5514,
											"end": 5520,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5567,
											"end": 5570,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 5555,
											"end": 5564,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5546,
											"end": 5553,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 5542,
											"end": 5565,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5538,
											"end": 5571,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 5535,
											"end": 5588,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5535,
											"end": 5588,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 5535,
											"end": 5588,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5584,
											"end": 5585,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5581,
											"end": 5582,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5574,
											"end": 5586,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5535,
											"end": 5588,
											"name": "tag",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 5535,
											"end": 5588,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5607,
											"end": 5636,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "419"
										},
										{
											"begin": 5626,
											"end": 5635,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5607,
											"end": 5636,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 5607,
											"end": 5636,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5607,
											"end": 5636,
											"name": "tag",
											"source": 12,
											"value": "419"
										},
										{
											"begin": 5607,
											"end": 5636,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5597,
											"end": 5636,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 5597,
											"end": 5636,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5655,
											"end": 5693,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 5689,
											"end": 5691,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5678,
											"end": 5687,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5674,
											"end": 5692,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5655,
											"end": 5693,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 5655,
											"end": 5693,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5655,
											"end": 5693,
											"name": "tag",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 5655,
											"end": 5693,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5645,
											"end": 5693,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5740,
											"end": 5742,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5725,
											"end": 5743,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5725,
											"end": 5743,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5712,
											"end": 5744,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 5712,
											"end": 5744,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5795,
											"end": 5797,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 5780,
											"end": 5798,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5780,
											"end": 5798,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5767,
											"end": 5799,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5811,
											"end": 5841,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5811,
											"end": 5841,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 5808,
											"end": 5858,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5808,
											"end": 5858,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 5808,
											"end": 5858,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5854,
											"end": 5855,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5851,
											"end": 5852,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5844,
											"end": 5856,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5808,
											"end": 5858,
											"name": "tag",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 5808,
											"end": 5858,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5877,
											"end": 5899,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5877,
											"end": 5899,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5930,
											"end": 5934,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 5922,
											"end": 5935,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5922,
											"end": 5935,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5918,
											"end": 5945,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 5908,
											"end": 5963,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 5908,
											"end": 5963,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5959,
											"end": 5960,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5956,
											"end": 5957,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5949,
											"end": 5961,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5908,
											"end": 5963,
											"name": "tag",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 5908,
											"end": 5963,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5982,
											"end": 6056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 6048,
											"end": 6055,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6043,
											"end": 6045,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6030,
											"end": 6046,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 6025,
											"end": 6027,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6021,
											"end": 6023,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6017,
											"end": 6028,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5982,
											"end": 6056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 5982,
											"end": 6056,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5982,
											"end": 6056,
											"name": "tag",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 5982,
											"end": 6056,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5972,
											"end": 6056,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5972,
											"end": 6056,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5972,
											"end": 6056,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5395,
											"end": 6062,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6067,
											"end": 6327,
											"name": "tag",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 6067,
											"end": 6327,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6135,
											"end": 6141,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6143,
											"end": 6149,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6196,
											"end": 6198,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6184,
											"end": 6193,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6175,
											"end": 6182,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6171,
											"end": 6194,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6167,
											"end": 6199,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 6164,
											"end": 6216,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6164,
											"end": 6216,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 6164,
											"end": 6216,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6212,
											"end": 6213,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6209,
											"end": 6210,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6202,
											"end": 6214,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6164,
											"end": 6216,
											"name": "tag",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 6164,
											"end": 6216,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6235,
											"end": 6264,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 6254,
											"end": 6263,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6235,
											"end": 6264,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 6235,
											"end": 6264,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6235,
											"end": 6264,
											"name": "tag",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 6235,
											"end": 6264,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6283,
											"end": 6321,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 6317,
											"end": 6319,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6306,
											"end": 6315,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6302,
											"end": 6320,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6283,
											"end": 6321,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 6283,
											"end": 6321,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6283,
											"end": 6321,
											"name": "tag",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 6283,
											"end": 6321,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6273,
											"end": 6321,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6273,
											"end": 6321,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6067,
											"end": 6327,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6067,
											"end": 6327,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6067,
											"end": 6327,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6067,
											"end": 6327,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6067,
											"end": 6327,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6067,
											"end": 6327,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6332,
											"end": 6712,
											"name": "tag",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 6332,
											"end": 6712,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6411,
											"end": 6412,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6407,
											"end": 6419,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6407,
											"end": 6419,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6407,
											"end": 6419,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 6407,
											"end": 6419,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6454,
											"end": 6466,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6454,
											"end": 6466,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6454,
											"end": 6466,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6475,
											"end": 6536,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "429"
										},
										{
											"begin": 6475,
											"end": 6536,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6529,
											"end": 6533,
											"name": "PUSH",
											"source": 12,
											"value": "7F"
										},
										{
											"begin": 6521,
											"end": 6527,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6517,
											"end": 6534,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6507,
											"end": 6534,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6507,
											"end": 6534,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6475,
											"end": 6536,
											"name": "tag",
											"source": 12,
											"value": "429"
										},
										{
											"begin": 6475,
											"end": 6536,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6582,
											"end": 6584,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6574,
											"end": 6580,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6571,
											"end": 6585,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6551,
											"end": 6569,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6548,
											"end": 6586,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6545,
											"end": 6706,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 6545,
											"end": 6706,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6628,
											"end": 6638,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 6623,
											"end": 6626,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 6619,
											"end": 6639,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 6616,
											"end": 6617,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6609,
											"end": 6640,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6663,
											"end": 6667,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 6660,
											"end": 6661,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6653,
											"end": 6668,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6691,
											"end": 6695,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 6688,
											"end": 6689,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6681,
											"end": 6696,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6545,
											"end": 6706,
											"name": "tag",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 6545,
											"end": 6706,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6545,
											"end": 6706,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6332,
											"end": 6712,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6332,
											"end": 6712,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6332,
											"end": 6712,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6332,
											"end": 6712,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6717,
											"end": 7073,
											"name": "tag",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 6717,
											"end": 7073,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6919,
											"end": 6921,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6901,
											"end": 6922,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6901,
											"end": 6922,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6901,
											"end": 6922,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6938,
											"end": 6956,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6938,
											"end": 6956,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6938,
											"end": 6956,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6931,
											"end": 6961,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6997,
											"end": 7031,
											"name": "PUSH",
											"source": 12,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 6992,
											"end": 6994,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6977,
											"end": 6995,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6977,
											"end": 6995,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6970,
											"end": 7032,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7064,
											"end": 7066,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7049,
											"end": 7067,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7049,
											"end": 7067,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6717,
											"end": 7073,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7078,
											"end": 7205,
											"name": "tag",
											"source": 12,
											"value": "181"
										},
										{
											"begin": 7078,
											"end": 7205,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7139,
											"end": 7149,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 7134,
											"end": 7137,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7130,
											"end": 7150,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7127,
											"end": 7128,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7120,
											"end": 7151,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7170,
											"end": 7174,
											"name": "PUSH",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 7167,
											"end": 7168,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7160,
											"end": 7175,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7194,
											"end": 7198,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7191,
											"end": 7192,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7184,
											"end": 7199,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7210,
											"end": 7337,
											"name": "tag",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 7210,
											"end": 7337,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7271,
											"end": 7281,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 7266,
											"end": 7269,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7262,
											"end": 7282,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7259,
											"end": 7260,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7252,
											"end": 7283,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7302,
											"end": 7306,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 7299,
											"end": 7300,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7292,
											"end": 7307,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7326,
											"end": 7330,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7323,
											"end": 7324,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7316,
											"end": 7331,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7342,
											"end": 7477,
											"name": "tag",
											"source": 12,
											"value": "185"
										},
										{
											"begin": 7342,
											"end": 7477,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7381,
											"end": 7384,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7402,
											"end": 7419,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 7402,
											"end": 7419,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7402,
											"end": 7419,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7399,
											"end": 7442,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 7399,
											"end": 7442,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7422,
											"end": 7440,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 7422,
											"end": 7440,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 7422,
											"end": 7440,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7422,
											"end": 7440,
											"name": "tag",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 7422,
											"end": 7440,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7469,
											"end": 7470,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 7458,
											"end": 7471,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7458,
											"end": 7471,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7342,
											"end": 7477,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8024,
											"end": 8997,
											"name": "tag",
											"source": 12,
											"value": "357"
										},
										{
											"begin": 8024,
											"end": 8997,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8109,
											"end": 8121,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8109,
											"end": 8121,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8074,
											"end": 8077,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8074,
											"end": 8077,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8164,
											"end": 8165,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 8184,
											"end": 8202,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8202,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8202,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8202,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8237,
											"end": 8255,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8237,
											"end": 8255,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8237,
											"end": 8255,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8237,
											"end": 8255,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8264,
											"end": 8325,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 8264,
											"end": 8325,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8318,
											"end": 8322,
											"name": "PUSH",
											"source": 12,
											"value": "7F"
										},
										{
											"begin": 8310,
											"end": 8316,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8306,
											"end": 8323,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8296,
											"end": 8323,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8296,
											"end": 8323,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8264,
											"end": 8325,
											"name": "tag",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 8264,
											"end": 8325,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8344,
											"end": 8346,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8392,
											"end": 8394,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8384,
											"end": 8390,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8381,
											"end": 8395,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 8361,
											"end": 8379,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8358,
											"end": 8396,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8355,
											"end": 8516,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 8355,
											"end": 8516,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8438,
											"end": 8448,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 8433,
											"end": 8436,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 8429,
											"end": 8449,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 8426,
											"end": 8427,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8419,
											"end": 8450,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8473,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 8470,
											"end": 8471,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8463,
											"end": 8478,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8501,
											"end": 8505,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8498,
											"end": 8499,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8491,
											"end": 8506,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8355,
											"end": 8516,
											"name": "tag",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 8355,
											"end": 8516,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8532,
											"end": 8550,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8559,
											"end": 8663,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8559,
											"end": 8663,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8559,
											"end": 8663,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "443"
										},
										{
											"begin": 8559,
											"end": 8663,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8677,
											"end": 8678,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 8672,
											"end": 8991,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8672,
											"end": 8991,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 8672,
											"end": 8991,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 8672,
											"end": 8991,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8559,
											"end": 8663,
											"name": "tag",
											"source": 12,
											"value": "443"
										},
										{
											"begin": 8559,
											"end": 8663,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8592,
											"end": 8616,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 8592,
											"end": 8616,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8580,
											"end": 8617,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 8580,
											"end": 8617,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8637,
											"end": 8653,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8637,
											"end": 8653,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 8637,
											"end": 8653,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8637,
											"end": 8653,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8559,
											"end": 8663,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 8559,
											"end": 8663,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8672,
											"end": 8991,
											"name": "tag",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 8672,
											"end": 8991,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7971,
											"end": 7972,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7964,
											"end": 7978,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 7964,
											"end": 7978,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7964,
											"end": 7978,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8008,
											"end": 8012,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7995,
											"end": 8013,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7995,
											"end": 8013,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8766,
											"end": 8767,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "tag",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8794,
											"end": 8800,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 8791,
											"end": 8792,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8788,
											"end": 8801,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8872,
											"end": 8886,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8872,
											"end": 8886,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8859,
											"end": 8870,
											"name": "DUP12",
											"source": 12
										},
										{
											"begin": 8859,
											"end": 8870,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8859,
											"end": 8870,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8852,
											"end": 8887,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8915,
											"end": 8931,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8915,
											"end": 8931,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8915,
											"end": 8931,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8915,
											"end": 8931,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8809,
											"end": 8819,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8809,
											"end": 8819,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "tag",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 8780,
											"end": 8945,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8784,
											"end": 8787,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8784,
											"end": 8787,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8974,
											"end": 8980,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8969,
											"end": 8972,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 8965,
											"end": 8981,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8958,
											"end": 8981,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": 8958,
											"end": 8981,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "tag",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8525,
											"end": 8991,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8997,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8997,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8997,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8997,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8997,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9002,
											"end": 9458,
											"name": "tag",
											"source": 12,
											"value": "223"
										},
										{
											"begin": 9002,
											"end": 9458,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9223,
											"end": 9226,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9251,
											"end": 9289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "450"
										},
										{
											"begin": 9285,
											"end": 9288,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9277,
											"end": 9283,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 9251,
											"end": 9289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "357"
										},
										{
											"begin": 9251,
											"end": 9289,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9251,
											"end": 9289,
											"name": "tag",
											"source": 12,
											"value": "450"
										},
										{
											"begin": 9251,
											"end": 9289,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9324,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9312,
											"end": 9325,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9334,
											"end": 9386,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "451"
										},
										{
											"begin": 9379,
											"end": 9385,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9375,
											"end": 9377,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9368,
											"end": 9372,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9360,
											"end": 9366,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 9356,
											"end": 9373,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9334,
											"end": 9386,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 9334,
											"end": 9386,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9334,
											"end": 9386,
											"name": "tag",
											"source": 12,
											"value": "451"
										},
										{
											"begin": 9334,
											"end": 9386,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9402,
											"end": 9452,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "452"
										},
										{
											"begin": 9444,
											"end": 9450,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9440,
											"end": 9442,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9436,
											"end": 9451,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9428,
											"end": 9434,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 9402,
											"end": 9452,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "357"
										},
										{
											"begin": 9402,
											"end": 9452,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9402,
											"end": 9452,
											"name": "tag",
											"source": 12,
											"value": "452"
										},
										{
											"begin": 9402,
											"end": 9452,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9395,
											"end": 9452,
											"name": "SWAP8",
											"source": 12
										},
										{
											"begin": 9002,
											"end": 9458,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9002,
											"end": 9458,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9870,
											"end": 10359,
											"name": "tag",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 9870,
											"end": 10359,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10139,
											"end": 10154,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10139,
											"end": 10154,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10139,
											"end": 10154,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10121,
											"end": 10155,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10121,
											"end": 10155,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10191,
											"end": 10206,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10191,
											"end": 10206,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10186,
											"end": 10188,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10171,
											"end": 10189,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10171,
											"end": 10189,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10164,
											"end": 10207,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10238,
											"end": 10240,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10223,
											"end": 10241,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10216,
											"end": 10250,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10216,
											"end": 10250,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10216,
											"end": 10250,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10286,
											"end": 10289,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 10281,
											"end": 10283,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 10266,
											"end": 10284,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10266,
											"end": 10284,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10259,
											"end": 10290,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10259,
											"end": 10290,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10259,
											"end": 10290,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10064,
											"end": 10068,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10064,
											"end": 10068,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10307,
											"end": 10353,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "455"
										},
										{
											"begin": 10307,
											"end": 10353,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10333,
											"end": 10352,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10333,
											"end": 10352,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10325,
											"end": 10331,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10307,
											"end": 10353,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 10307,
											"end": 10353,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10307,
											"end": 10353,
											"name": "tag",
											"source": 12,
											"value": "455"
										},
										{
											"begin": 10307,
											"end": 10353,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10299,
											"end": 10353,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": 9870,
											"end": 10359,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9870,
											"end": 10359,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10364,
											"end": 10613,
											"name": "tag",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 10364,
											"end": 10613,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10433,
											"end": 10439,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10486,
											"end": 10488,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10474,
											"end": 10483,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10465,
											"end": 10472,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10461,
											"end": 10484,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10457,
											"end": 10489,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 10454,
											"end": 10506,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10454,
											"end": 10506,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 10454,
											"end": 10506,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10502,
											"end": 10503,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10499,
											"end": 10500,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10492,
											"end": 10504,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10454,
											"end": 10506,
											"name": "tag",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 10454,
											"end": 10506,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10534,
											"end": 10543,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10528,
											"end": 10544,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10553,
											"end": 10583,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 10577,
											"end": 10582,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10553,
											"end": 10583,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 10553,
											"end": 10583,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10618,
											"end": 10745,
											"name": "tag",
											"source": 12,
											"value": "358"
										},
										{
											"begin": 10618,
											"end": 10745,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10679,
											"end": 10689,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 10674,
											"end": 10677,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 10670,
											"end": 10690,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 10667,
											"end": 10668,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10660,
											"end": 10691,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10710,
											"end": 10714,
											"name": "PUSH",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 10707,
											"end": 10708,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10700,
											"end": 10715,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10734,
											"end": 10738,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 10731,
											"end": 10732,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10724,
											"end": 10739,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10750,
											"end": 10870,
											"name": "tag",
											"source": 12,
											"value": "300"
										},
										{
											"begin": 10750,
											"end": 10870,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10790,
											"end": 10791,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10816,
											"end": 10817,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10806,
											"end": 10841,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "462"
										},
										{
											"begin": 10806,
											"end": 10841,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10821,
											"end": 10839,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "462"
										},
										{
											"begin": 10821,
											"end": 10839,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "358"
										},
										{
											"begin": 10821,
											"end": 10839,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10821,
											"end": 10839,
											"name": "tag",
											"source": 12,
											"value": "462"
										},
										{
											"begin": 10821,
											"end": 10839,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10855,
											"end": 10864,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 10855,
											"end": 10864,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10750,
											"end": 10870,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10875,
											"end": 11000,
											"name": "tag",
											"source": 12,
											"value": "308"
										},
										{
											"begin": 10875,
											"end": 11000,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10915,
											"end": 10919,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10943,
											"end": 10944,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10940,
											"end": 10941,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10937,
											"end": 10945,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 10934,
											"end": 10968,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10934,
											"end": 10968,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 10934,
											"end": 10968,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10948,
											"end": 10966,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 10948,
											"end": 10966,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 10948,
											"end": 10966,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10948,
											"end": 10966,
											"name": "tag",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 10948,
											"end": 10966,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10985,
											"end": 10994,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10985,
											"end": 10994,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10875,
											"end": 11000,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11005,
											"end": 11117,
											"name": "tag",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 11005,
											"end": 11117,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11037,
											"end": 11038,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11063,
											"end": 11064,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11053,
											"end": 11088,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 11053,
											"end": 11088,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11068,
											"end": 11086,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 11068,
											"end": 11086,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "358"
										},
										{
											"begin": 11068,
											"end": 11086,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11068,
											"end": 11086,
											"name": "tag",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 11068,
											"end": 11086,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11102,
											"end": 11111,
											"name": "MOD",
											"source": 12
										},
										{
											"begin": 11102,
											"end": 11111,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11005,
											"end": 11117,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11122,
											"end": 11250,
											"name": "tag",
											"source": 12,
											"value": "312"
										},
										{
											"begin": 11122,
											"end": 11250,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11162,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11193,
											"end": 11194,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11189,
											"end": 11195,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 11186,
											"end": 11187,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11183,
											"end": 11196,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 11180,
											"end": 11219,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11180,
											"end": 11219,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "471"
										},
										{
											"begin": 11180,
											"end": 11219,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11199,
											"end": 11217,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "471"
										},
										{
											"begin": 11199,
											"end": 11217,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 11199,
											"end": 11217,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11199,
											"end": 11217,
											"name": "tag",
											"source": 12,
											"value": "471"
										},
										{
											"begin": 11199,
											"end": 11217,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11235,
											"end": 11244,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11235,
											"end": 11244,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11122,
											"end": 11250,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										}
									],
									".data": {
										"ADA389E1FC24A8587C776340EFB91B36E675792AB631816100D55DF0B5CF3CBC": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
									}
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"baseExtension()": "c6682862",
							"baseURI()": "6c0360eb",
							"getApproved(uint256)": "081812fc",
							"giftCard(address[])": "7a2d0163",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"ownerOf(uint256)": "6352211e",
							"renounceOwnership()": "715018a6",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"setBaseURI(string,string)": "6790a9de",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"giftCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseExtension\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToonzRewardsCardV2.sol\":\"ToonzRewardsCardV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/ToonzRewardsCardV2.sol\":{\"keccak256\":\"0x9be956f12e24d36b528ba23132b55e119701d0ff0357ffd55a74215fc6764ad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88b1efcc77102796d76fbe5bf241f60d56455556fd0b1f000f184cfe7a72e801\",\"dweb:/ipfs/QmZGGRDpYBVN1JrZRWHHZ33LLGL8ogwUsCxanyKzN12M8g\"]},\"erc721a/contracts/ERC721A.sol\":{\"keccak256\":\"0x8ce51ff43bf1d6690341475ef3caf0929c43c63258fe56dc7fc301608ea9f30d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad7a49ea49d5b3dbe28c05bd863f7cb6adcd4ad7ed621bafa154b17d86c92056\",\"dweb:/ipfs/QmYw9nriaQkp2at42u9TD5SCXuJ9PgBq54zLCUUYphBvVk\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"erc721a/contracts/ERC721A.sol": {
				"ERC721A": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"erc721a/contracts/ERC721A.sol\":1464:21795  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"erc721a/contracts/ERC721A.sol\":3357:3511  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"erc721a/contracts/ERC721A.sol\":3423:3436  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3423:3428  _name */\n  0x02\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3423:3436  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3446:3463  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3446:3453  _symbol */\n  0x03\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3446:3463  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3659:3666  uint256 */\n  0x00\n    /* \"erc721a/contracts/ERC721A.sol\":3473:3504  _currentIndex = _startTokenId() */\n  dup1\n  sstore\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":1464:21795  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  jump(tag_26)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_13\n  swap1\n  tag_14\n  jump\t// in\ntag_13:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_16\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_19)\ntag_16:\n  dup3\n  0x1f\n  lt\n  tag_17\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_19)\ntag_17:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_19\n  jumpi\n  swap2\n  dup3\n  add\ntag_18:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_19\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_18)\ntag_19:\n  pop\n  tag_20\n  swap3\n  swap2\n  pop\n  tag_21\n  jump\t// in\ntag_20:\n  pop\n  swap1\n  jump\t// out\ntag_21:\ntag_22:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_20\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_22)\n    /* \"#utility.yul\":14:141   */\ntag_24:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_25:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_29\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_29:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_31\n  tag_24\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_33\n  tag_24\n  jump\t// in\ntag_33:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_34:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_35:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_35)\ntag_37:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_38\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_38:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1598   */\ntag_3:\n    /* \"#utility.yul\":1135:1141   */\n  0x00\n    /* \"#utility.yul\":1143:1149   */\n  dup1\n    /* \"#utility.yul\":1196:1198   */\n  0x40\n    /* \"#utility.yul\":1184:1193   */\n  dup4\n    /* \"#utility.yul\":1175:1182   */\n  dup6\n    /* \"#utility.yul\":1171:1194   */\n  sub\n    /* \"#utility.yul\":1167:1199   */\n  slt\n    /* \"#utility.yul\":1164:1216   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1212:1213   */\n  0x00\n    /* \"#utility.yul\":1209:1210   */\n  dup1\n    /* \"#utility.yul\":1202:1214   */\n  revert\n    /* \"#utility.yul\":1164:1216   */\ntag_40:\n    /* \"#utility.yul\":1239:1255   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1304:1318   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1301:1335   */\n  iszero\n  tag_41\n  jumpi\n    /* \"#utility.yul\":1331:1332   */\n  0x00\n    /* \"#utility.yul\":1328:1329   */\n  dup1\n    /* \"#utility.yul\":1321:1333   */\n  revert\n    /* \"#utility.yul\":1301:1335   */\ntag_41:\n    /* \"#utility.yul\":1354:1415   */\n  tag_42\n    /* \"#utility.yul\":1407:1414   */\n  dup7\n    /* \"#utility.yul\":1398:1404   */\n  dup4\n    /* \"#utility.yul\":1387:1396   */\n  dup8\n    /* \"#utility.yul\":1383:1405   */\n  add\n    /* \"#utility.yul\":1354:1415   */\n  tag_25\n  jump\t// in\ntag_42:\n    /* \"#utility.yul\":1344:1415   */\n  swap4\n  pop\n    /* \"#utility.yul\":1461:1463   */\n  0x20\n    /* \"#utility.yul\":1450:1459   */\n  dup6\n    /* \"#utility.yul\":1446:1464   */\n  add\n    /* \"#utility.yul\":1440:1465   */\n  mload\n    /* \"#utility.yul\":1424:1465   */\n  swap2\n  pop\n    /* \"#utility.yul\":1490:1492   */\n  dup1\n    /* \"#utility.yul\":1480:1488   */\n  dup3\n    /* \"#utility.yul\":1477:1493   */\n  gt\n    /* \"#utility.yul\":1474:1510   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1506:1507   */\n  0x00\n    /* \"#utility.yul\":1503:1504   */\n  dup1\n    /* \"#utility.yul\":1496:1508   */\n  revert\n    /* \"#utility.yul\":1474:1510   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1529:1592   */\n  tag_44\n    /* \"#utility.yul\":1584:1591   */\n  dup6\n    /* \"#utility.yul\":1573:1581   */\n  dup3\n    /* \"#utility.yul\":1562:1571   */\n  dup7\n    /* \"#utility.yul\":1558:1582   */\n  add\n    /* \"#utility.yul\":1529:1592   */\n  tag_25\n  jump\t// in\ntag_44:\n    /* \"#utility.yul\":1519:1592   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1598   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1603:1983   */\ntag_14:\n    /* \"#utility.yul\":1682:1683   */\n  0x01\n    /* \"#utility.yul\":1678:1690   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1725:1737   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1746:1807   */\n  tag_46\n  jumpi\n    /* \"#utility.yul\":1800:1804   */\n  0x7f\n    /* \"#utility.yul\":1792:1798   */\n  dup3\n    /* \"#utility.yul\":1788:1805   */\n  and\n    /* \"#utility.yul\":1778:1805   */\n  swap2\n  pop\n    /* \"#utility.yul\":1746:1807   */\ntag_46:\n    /* \"#utility.yul\":1853:1855   */\n  0x20\n    /* \"#utility.yul\":1845:1851   */\n  dup3\n    /* \"#utility.yul\":1842:1856   */\n  lt\n    /* \"#utility.yul\":1822:1840   */\n  dup2\n    /* \"#utility.yul\":1819:1857   */\n  sub\n    /* \"#utility.yul\":1816:1977   */\n  tag_47\n  jumpi\n    /* \"#utility.yul\":1899:1909   */\n  0x4e487b71\n    /* \"#utility.yul\":1894:1897   */\n  0xe0\n    /* \"#utility.yul\":1890:1910   */\n  shl\n    /* \"#utility.yul\":1887:1888   */\n  0x00\n    /* \"#utility.yul\":1880:1911   */\n  mstore\n    /* \"#utility.yul\":1934:1938   */\n  0x22\n    /* \"#utility.yul\":1931:1932   */\n  0x04\n    /* \"#utility.yul\":1924:1939   */\n  mstore\n    /* \"#utility.yul\":1962:1966   */\n  0x24\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1967   */\n  revert\n    /* \"#utility.yul\":1816:1977   */\ntag_47:\n  pop\n    /* \"#utility.yul\":1603:1983   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_26:\n    /* \"erc721a/contracts/ERC721A.sol\":1464:21795  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"erc721a/contracts/ERC721A.sol\":1464:21795  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_16\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":4551:4851  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_17\n      tag_18\n      calldatasize\n      0x04\n      tag_19\n      jump\t// in\n    tag_18:\n      tag_20\n      jump\t// in\n    tag_17:\n      mload(0x40)\n        /* \"#utility.yul\":565:579   */\n      swap1\n      iszero\n        /* \"#utility.yul\":558:580   */\n      iszero\n        /* \"#utility.yul\":540:581   */\n      dup2\n      mstore\n        /* \"#utility.yul\":528:530   */\n      0x20\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":4551:4851  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_21:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"erc721a/contracts/ERC721A.sol\":7579:7677  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_21\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9035:9235  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_5:\n      tag_27\n      tag_28\n      calldatasize\n      0x04\n      tag_29\n      jump\t// in\n    tag_28:\n      tag_30\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1692:1724   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1674:1725   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1662:1664   */\n      0x20\n        /* \"#utility.yul\":1647:1665   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":9035:9235  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      tag_21\n        /* \"#utility.yul\":1528:1731   */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":8612:8974  function approve(address to, uint256 tokenId) public override {... */\n    tag_6:\n      tag_33\n      tag_34\n      calldatasize\n      0x04\n      tag_35\n      jump\t// in\n    tag_34:\n      tag_36\n      jump\t// in\n    tag_33:\n      stop\n        /* \"erc721a/contracts/ERC721A.sol\":3822:4119  function totalSupply() public view returns (uint256) {... */\n    tag_7:\n        /* \"erc721a/contracts/ERC721A.sol\":4072:4084  _burnCounter */\n      sload(0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":3866:3873  uint256 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":4056:4069  _currentIndex */\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":4056:4084  _currentIndex - _burnCounter */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":3822:4119  function totalSupply() public view returns (uint256) {... */\n    tag_37:\n      mload(0x40)\n        /* \"#utility.yul\":2319:2344   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":2307:2309   */\n      0x20\n        /* \"#utility.yul\":2292:2310   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":3822:4119  function totalSupply() public view returns (uint256) {... */\n      tag_21\n        /* \"#utility.yul\":2173:2350   */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":9874:10038  function transferFrom(... */\n    tag_8:\n      tag_33\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10104:10283  function safeTransferFrom(... */\n    tag_9:\n      tag_33\n      tag_46\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_46:\n      tag_47\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7394:7517  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_10:\n      tag_27\n      tag_49\n      calldatasize\n      0x04\n      tag_29\n      jump\t// in\n    tag_49:\n      tag_50\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":4910:5113  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_11:\n      tag_37\n      tag_53\n      calldatasize\n      0x04\n      tag_54\n      jump\t// in\n    tag_53:\n      tag_55\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7741:7843  function symbol() public view virtual override returns (string memory) {... */\n    tag_12:\n      tag_23\n      tag_58\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9302:9584  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_13:\n      tag_33\n      tag_61\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_61:\n      tag_63\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10349:10708  function safeTransferFrom(... */\n    tag_14:\n      tag_33\n      tag_65\n      calldatasize\n      0x04\n      tag_66\n      jump\t// in\n    tag_65:\n      tag_67\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7909:8222  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_15:\n      tag_23\n      tag_69\n      calldatasize\n      0x04\n      tag_29\n      jump\t// in\n    tag_69:\n      tag_70\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9650:9812  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_16:\n      tag_17\n      tag_73\n      calldatasize\n      0x04\n      tag_74\n      jump\t// in\n    tag_73:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9795  _operatorApprovals[owner] */\n      swap2\n      dup3\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":9747:9751  bool */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9795  _operatorApprovals[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9788  _operatorApprovals */\n      0x07\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9795  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":9770:9805  _operatorApprovals[owner][operator] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9650:9812  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":4551:4851  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_20:\n        /* \"erc721a/contracts/ERC721A.sol\":4653:4657  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":4688:4728  interfaceId == type(IERC721).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x80ac58cd)\n      eq\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":4688:4792  interfaceId == type(IERC721).interfaceId ||... */\n      tag_78\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":4744:4792  interfaceId == type(IERC721Metadata).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5b5e139f)\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":4688:4792  interfaceId == type(IERC721).interfaceId ||... */\n    tag_78:\n        /* \"erc721a/contracts/ERC721A.sol\":4688:4844  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_80\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":4808:4844  super.supportsInterface(interfaceId) */\n    tag_80:\n        /* \"erc721a/contracts/ERC721A.sol\":4669:4844  return... */\n      swap3\n        /* \"erc721a/contracts/ERC721A.sol\":4551:4851  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7579:7677  function name() public view virtual override returns (string memory) {... */\n    tag_24:\n        /* \"erc721a/contracts/ERC721A.sol\":7633:7646  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":7665:7670  _name */\n      0x02\n        /* \"erc721a/contracts/ERC721A.sol\":7658:7670  return _name */\n      dup1\n      sload\n      tag_83\n      swap1\n      tag_84\n      jump\t// in\n    tag_83:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_85\n      swap1\n      tag_84\n      jump\t// in\n    tag_85:\n      dup1\n      iszero\n      tag_86\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_87\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_86)\n    tag_87:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_88:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_88\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_86:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":7579:7677  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9035:9235  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_30:\n        /* \"erc721a/contracts/ERC721A.sol\":9103:9110  address */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":9127:9143  _exists(tokenId) */\n      tag_90\n        /* \"erc721a/contracts/ERC721A.sol\":9135:9142  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":9127:9134  _exists */\n      tag_91\n        /* \"erc721a/contracts/ERC721A.sol\":9127:9143  _exists(tokenId) */\n      jump\t// in\n    tag_90:\n        /* \"erc721a/contracts/ERC721A.sol\":9122:9186  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n      tag_92\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9152:9186  ApprovalQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe2, 0x33d1c039)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9122:9186  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n    tag_92:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9204:9228  _tokenApprovals[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9204:9219  _tokenApprovals */\n      0x06\n        /* \"erc721a/contracts/ERC721A.sol\":9204:9228  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9035:9235  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":8612:8974  function approve(address to, uint256 tokenId) public override {... */\n    tag_36:\n        /* \"erc721a/contracts/ERC721A.sol\":8684:8697  address owner */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":8700:8724  ERC721A.ownerOf(tokenId) */\n      tag_94\n        /* \"erc721a/contracts/ERC721A.sol\":8716:8723  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":8700:8715  ERC721A.ownerOf */\n      tag_50\n        /* \"erc721a/contracts/ERC721A.sol\":8700:8724  ERC721A.ownerOf(tokenId) */\n      jump\t// in\n    tag_94:\n        /* \"erc721a/contracts/ERC721A.sol\":8684:8724  address owner = ERC721A.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8744:8749  owner */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":8738:8749  to == owner */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":8738:8740  to */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":8738:8749  to == owner */\n      and\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":8734:8782  if (to == owner) revert ApprovalToCurrentOwner() */\n      tag_95\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":8758:8782  ApprovalToCurrentOwner() */\n      mload(0x40)\n      shl(0xe2, 0x250fdee3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":8734:8782  if (to == owner) revert ApprovalToCurrentOwner() */\n    tag_95:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":8797:8818  _msgSender() != owner */\n      dup3\n      and\n      eq\n      dup1\n      iszero\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":8797:8860  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n      tag_98\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8823:8860  isApprovedForAll(owner, _msgSender()) */\n      tag_99\n        /* \"erc721a/contracts/ERC721A.sol\":8840:8845  owner */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":9650:9812  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_73\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":8823:8860  isApprovedForAll(owner, _msgSender()) */\n    tag_99:\n        /* \"erc721a/contracts/ERC721A.sol\":8822:8860  !isApprovedForAll(owner, _msgSender()) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":8797:8860  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n    tag_98:\n        /* \"erc721a/contracts/ERC721A.sol\":8793:8929  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n      iszero\n      tag_101\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":8883:8918  ApprovalCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x67d9dca1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":8793:8929  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n    tag_101:\n        /* \"erc721a/contracts/ERC721A.sol\":8939:8967  _approve(to, tokenId, owner) */\n      tag_102\n        /* \"erc721a/contracts/ERC721A.sol\":8948:8950  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":8952:8959  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":8961:8966  owner */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":8939:8947  _approve */\n      tag_103\n        /* \"erc721a/contracts/ERC721A.sol\":8939:8967  _approve(to, tokenId, owner) */\n      jump\t// in\n    tag_102:\n        /* \"erc721a/contracts/ERC721A.sol\":8674:8974  {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8612:8974  function approve(address to, uint256 tokenId) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9874:10038  function transferFrom(... */\n    tag_44:\n        /* \"erc721a/contracts/ERC721A.sol\":10003:10031  _transfer(from, to, tokenId) */\n      tag_102\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10017  from */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10019:10021  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10023:10030  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10003:10012  _transfer */\n      tag_109\n        /* \"erc721a/contracts/ERC721A.sol\":10003:10031  _transfer(from, to, tokenId) */\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10104:10283  function safeTransferFrom(... */\n    tag_47:\n        /* \"erc721a/contracts/ERC721A.sol\":10237:10276  safeTransferFrom(from, to, tokenId, '') */\n      tag_102\n        /* \"erc721a/contracts/ERC721A.sol\":10254:10258  from */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10260:10262  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10264:10271  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10237:10276  safeTransferFrom(from, to, tokenId, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":10237:10253  safeTransferFrom */\n      tag_67\n        /* \"erc721a/contracts/ERC721A.sol\":10237:10276  safeTransferFrom(from, to, tokenId, '') */\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7394:7517  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_50:\n        /* \"erc721a/contracts/ERC721A.sol\":7458:7465  address */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":7484:7505  _ownershipOf(tokenId) */\n      tag_113\n        /* \"erc721a/contracts/ERC721A.sol\":7497:7504  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":7484:7496  _ownershipOf */\n      tag_114\n        /* \"erc721a/contracts/ERC721A.sol\":7484:7505  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_113:\n        /* \"erc721a/contracts/ERC721A.sol\":7484:7510  _ownershipOf(tokenId).addr */\n      mload\n      swap3\n        /* \"erc721a/contracts/ERC721A.sol\":7394:7517  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":4910:5113  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_55:\n        /* \"erc721a/contracts/ERC721A.sol\":4974:4981  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":4997:5016  owner == address(0) */\n      dup3\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":4993:5053  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n      tag_116\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":5025:5053  BalanceQueryForZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x23d3ad81)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":4993:5053  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n    tag_116:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":5078:5097  _addressData[owner] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":5078:5090  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":5078:5097  _addressData[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":5078:5105  _addressData[owner].balance */\n      sload\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":4910:5113  function balanceOf(address owner) public view override returns (uint256) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7741:7843  function symbol() public view virtual override returns (string memory) {... */\n    tag_58:\n        /* \"erc721a/contracts/ERC721A.sol\":7797:7810  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":7829:7836  _symbol */\n      0x03\n        /* \"erc721a/contracts/ERC721A.sol\":7822:7836  return _symbol */\n      dup1\n      sload\n      tag_83\n      swap1\n      tag_84\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9302:9584  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9400:9424  operator == _msgSender() */\n      dup4\n      and\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":9396:9450  if (operator == _msgSender()) revert ApproveToCaller() */\n      tag_125\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9433:9450  ApproveToCaller() */\n      mload(0x40)\n      shl(0xe0, 0xb06307db)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9396:9450  if (operator == _msgSender()) revert ApproveToCaller() */\n    tag_125:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9493  _operatorApprovals[_msgSender()] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9479  _operatorApprovals */\n      0x07\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9493  _operatorApprovals[_msgSender()] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9503  _operatorApprovals[_msgSender()][operator] */\n      dup8\n      and\n      dup1\n      dup6\n      mstore\n      swap1\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9514  _operatorApprovals[_msgSender()][operator] = approved */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup7\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":9529:9577  ApprovalForAll(_msgSender(), operator, approved) */\n      swap1\n      mload\n        /* \"#utility.yul\":540:581   */\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9461:9503  _operatorApprovals[_msgSender()][operator] */\n      swap2\n      swap3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap2\n        /* \"erc721a/contracts/ERC721A.sol\":9529:9577  ApprovalForAll(_msgSender(), operator, approved) */\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n      swap2\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":9529:9577  ApprovalForAll(_msgSender(), operator, approved) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"erc721a/contracts/ERC721A.sol\":9302:9584  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":10349:10708  function safeTransferFrom(... */\n    tag_67:\n        /* \"erc721a/contracts/ERC721A.sol\":10510:10538  _transfer(from, to, tokenId) */\n      tag_130\n        /* \"erc721a/contracts/ERC721A.sol\":10520:10524  from */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10526:10528  to */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10530:10537  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10510:10519  _transfer */\n      tag_109\n        /* \"erc721a/contracts/ERC721A.sol\":10510:10538  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10565  to.isContract */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      iszero\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10628  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      dup1\n      iszero\n      tag_133\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":10572:10628  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      tag_134\n        /* \"erc721a/contracts/ERC721A.sol\":10603:10607  from */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10609:10611  to */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10613:10620  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10622:10627  _data */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":10572:10602  _checkContractOnERC721Received */\n      tag_135\n        /* \"erc721a/contracts/ERC721A.sol\":10572:10628  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_134:\n        /* \"erc721a/contracts/ERC721A.sol\":10571:10628  !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":10552:10628  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n    tag_133:\n        /* \"erc721a/contracts/ERC721A.sol\":10548:10702  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      iszero\n      tag_136\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":10651:10691  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":10548:10702  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_136:\n        /* \"erc721a/contracts/ERC721A.sol\":10349:10708  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7909:8222  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_70:\n        /* \"erc721a/contracts/ERC721A.sol\":7982:7995  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":8012:8028  _exists(tokenId) */\n      tag_138\n        /* \"erc721a/contracts/ERC721A.sol\":8020:8027  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":8012:8019  _exists */\n      tag_91\n        /* \"erc721a/contracts/ERC721A.sol\":8012:8028  _exists(tokenId) */\n      jump\t// in\n    tag_138:\n        /* \"erc721a/contracts/ERC721A.sol\":8007:8066  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n      tag_139\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":8037:8066  URIQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe4, 0x0a14c4b5)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":8007:8066  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n    tag_139:\n        /* \"erc721a/contracts/ERC721A.sol\":8077:8098  string memory baseURI */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":8101:8111  _baseURI() */\n      tag_140\n        /* \"erc721a/contracts/ERC721A.sol\":8539:8548  return '' */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n      swap1\n      swap2\n      mstore\n      0x00\n      dup2\n      mstore\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":8463:8555  function _baseURI() internal view virtual returns (string memory) {... */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":8101:8111  _baseURI() */\n    tag_140:\n        /* \"erc721a/contracts/ERC721A.sol\":8077:8111  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8134:8141  baseURI */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":8128:8149  bytes(baseURI).length */\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":8153:8154  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":8128:8154  bytes(baseURI).length != 0 */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":8128:8215  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      tag_142\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_143)\n    tag_142:\n        /* \"erc721a/contracts/ERC721A.sol\":8181:8188  baseURI */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":8190:8208  tokenId.toString() */\n      tag_144\n        /* \"erc721a/contracts/ERC721A.sol\":8190:8197  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":8190:8206  tokenId.toString */\n      tag_145\n        /* \"erc721a/contracts/ERC721A.sol\":8190:8208  tokenId.toString() */\n      jump\t// in\n    tag_144:\n        /* \"erc721a/contracts/ERC721A.sol\":8164:8209  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_146\n      swap3\n      swap2\n      swap1\n      tag_147\n      jump\t// in\n    tag_146:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":8128:8215  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n    tag_143:\n        /* \"erc721a/contracts/ERC721A.sol\":8121:8215  return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":7909:8222  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":10954:11126  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_91:\n        /* \"erc721a/contracts/ERC721A.sol\":11011:11015  bool */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":11074:11087  _currentIndex */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":11064:11071  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":11064:11087  tokenId < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":11034:11119  _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned */\n      dup1\n      iszero\n      tag_80\n      jumpi\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":11092:11112  _ownerships[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":11092:11103  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":11092:11112  _ownerships[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":11092:11119  _ownerships[tokenId].burned */\n      sload\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":11091:11119  !_ownerships[tokenId].burned */\n      iszero\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":10954:11126  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":18894:19083  function _approve(... */\n    tag_103:\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19028  _tokenApprovals[tokenId] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19019  _tokenApprovals */\n      0x06\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19028  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19033  _tokenApprovals[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      dup2\n      and\n      swap2\n      dup3\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":19048:19076  Approval(owner, to, tokenId) */\n      swap2\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":19004:19028  _tokenApprovals[tokenId] */\n      dup6\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":19048:19076  Approval(owner, to, tokenId) */\n      swap2\n      dup6\n      and\n      swap2\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":18894:19083  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":13964:16046  function _transfer(... */\n    tag_109:\n        /* \"erc721a/contracts/ERC721A.sol\":14074:14109  TokenOwnership memory prevOwnership */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":14112:14133  _ownershipOf(tokenId) */\n      tag_158\n        /* \"erc721a/contracts/ERC721A.sol\":14125:14132  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":14112:14124  _ownershipOf */\n      tag_114\n        /* \"erc721a/contracts/ERC721A.sol\":14112:14133  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_158:\n        /* \"erc721a/contracts/ERC721A.sol\":14074:14133  TokenOwnership memory prevOwnership = _ownershipOf(tokenId) */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14170:14174  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14148:14174  prevOwnership.addr != from */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":14148:14161  prevOwnership */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":14148:14166  prevOwnership.addr */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14148:14174  prevOwnership.addr != from */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14144:14211  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n      tag_159\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":14183:14211  TransferFromIncorrectOwner() */\n      mload(0x40)\n      shl(0xe8, 0xa11481)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14144:14211  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n    tag_159:\n        /* \"erc721a/contracts/ERC721A.sol\":14222:14244  bool isApprovedOrOwner */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14248:14268  _msgSender() == from */\n      dup7\n      and\n      eq\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":14248:14320  _msgSender() == from ||... */\n      tag_162\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14284:14320  isApprovedForAll(from, _msgSender()) */\n      tag_162\n        /* \"erc721a/contracts/ERC721A.sol\":14301:14305  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":9650:9812  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_73\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":14284:14320  isApprovedForAll(from, _msgSender()) */\n    tag_162:\n        /* \"erc721a/contracts/ERC721A.sol\":14248:14372  _msgSender() == from ||... */\n      dup1\n      tag_164\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":14336:14356  getApproved(tokenId) */\n      tag_166\n        /* \"erc721a/contracts/ERC721A.sol\":14348:14355  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":14336:14347  getApproved */\n      tag_30\n        /* \"erc721a/contracts/ERC721A.sol\":14336:14356  getApproved(tokenId) */\n      jump\t// in\n    tag_166:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14336:14372  getApproved(tokenId) == _msgSender() */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14248:14372  _msgSender() == from ||... */\n    tag_164:\n        /* \"erc721a/contracts/ERC721A.sol\":14222:14373  bool isApprovedOrOwner = (_msgSender() == from ||... */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14389:14406  isApprovedOrOwner */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":14384:14450  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n      tag_167\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":14415:14450  TransferCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x2ce44b5f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14384:14450  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n    tag_167:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14464:14480  to == address(0) */\n      dup5\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":14460:14512  if (to == address(0)) revert TransferToZeroAddress() */\n      tag_168\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":14489:14512  TransferToZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x3a954ecd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14460:14512  if (to == address(0)) revert TransferToZeroAddress() */\n    tag_168:\n        /* \"erc721a/contracts/ERC721A.sol\":14628:14663  _approve(address(0), tokenId, from) */\n      tag_171\n        /* \"erc721a/contracts/ERC721A.sol\":14645:14646  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":14649:14656  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":14658:14662  from */\n      dup8\n        /* \"erc721a/contracts/ERC721A.sol\":14628:14636  _approve */\n      tag_103\n        /* \"erc721a/contracts/ERC721A.sol\":14628:14663  _approve(address(0), tokenId, from) */\n      jump\t// in\n    tag_171:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14953:14971  _addressData[from] */\n      dup6\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":14953:14965  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":14953:14971  _addressData[from] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":14953:14984  _addressData[from].balance -= 1 */\n      dup1\n      sload\n      not(sub(shl(0x40, 0x01), 0x01))\n      dup1\n      dup3\n      and\n      sub(shl(0x40, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      not(0x00)\n      add\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":14998:15014  _addressData[to] */\n      dup10\n      dup7\n      and\n      dup1\n      dup7\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":14998:15027  _addressData[to].balance += 1 */\n      dup1\n      sload\n      swap4\n      dup5\n      and\n      swap4\n      dup4\n      and\n      0x01\n      swap1\n      dup2\n      add\n      dup5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap1\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15076:15096  _ownerships[tokenId] */\n      dup10\n      dup7\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":15076:15087  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":15076:15096  _ownerships[tokenId] */\n      swap1\n      swap5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15110:15128  currSlot.addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":15142:15191  currSlot.startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap5\n      or\n      shl(0xa0, 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15175:15190  block.timestamp */\n      timestamp\n        /* \"erc721a/contracts/ERC721A.sol\":15142:15191  currSlot.startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      dup4\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15461:15472  tokenId + 1 */\n      dup8\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":15520:15544  _ownerships[nextTokenId] */\n      dup1\n      dup5\n      mstore\n      swap3\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15562:15575  nextSlot.addr */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":15076:15096  _ownerships[tokenId] */\n      swap2\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":15520:15544  _ownerships[nextTokenId] */\n      swap1\n      swap2\n        /* \"erc721a/contracts/ERC721A.sol\":15562:15575  nextSlot.addr */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":15558:15935  if (nextSlot.addr == address(0)) {... */\n      tag_173\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":15769:15782  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":15754:15765  nextTokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":15754:15782  nextTokenId != _currentIndex */\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":15750:15921  if (nextTokenId != _currentIndex) {... */\n      tag_173\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":15806:15826  nextSlot.addr = from */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":15874:15902  prevOwnership.startTimestamp */\n      0x20\n      dup7\n      add\n      mload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15848:15902  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      and\n      shl(0xa0, 0x01)\n      mul\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15806:15826  nextSlot.addr = from */\n      dup11\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":15848:15902  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      or\n      or\n      dup2\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15750:15921  if (nextTokenId != _currentIndex) {... */\n    tag_173:\n        /* \"erc721a/contracts/ERC721A.sol\":14929:15945  unchecked {... */\n      pop\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":15979:15986  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":15975:15977  to */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15960:15987  Transfer(from, to, tokenId) */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":15969:15973  from */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15960:15987  Transfer(from, to, tokenId) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":14064:16046  {... */\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":13964:16046  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":6253:7337  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_114:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":6363:6370  tokenId */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":6443:6456  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":6436:6440  curr */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":6436:6456  curr < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":6405:7273  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n      iszero\n      tag_181\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":6476:6507  TokenOwnership memory ownership */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":6510:6527  _ownerships[curr] */\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":6510:6521  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":6510:6527  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":6476:6527  TokenOwnership memory ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup3\n      mstore\n      shl(0xa0, 0x01)\n      dup2\n      div\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      swap2\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":6545:7259  if (!ownership.burned) {... */\n      tag_185\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":6594:6608  ownership.addr */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":6594:6622  ownership.addr != address(0) */\n      and\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":6590:6689  if (ownership.addr != address(0)) {... */\n      tag_183\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":6657:6666  ownership */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":6253:7337  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":6590:6689  if (ownership.addr != address(0)) {... */\n    tag_183:\n      pop\n      not(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":7025:7031  curr-- */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":7069:7086  _ownerships[curr] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7069:7080  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":7069:7086  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":7057:7086  ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup1\n      dup4\n      mstore\n      shl(0xa0, 0x01)\n      dup3\n      div\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap4\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7116:7144  ownership.addr != address(0) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":7112:7219  if (ownership.addr != address(0)) {... */\n      tag_186\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7183:7192  ownership */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":6253:7337  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7112:7219  if (ownership.addr != address(0)) {... */\n    tag_186:\n        /* \"erc721a/contracts/ERC721A.sol\":6986:7241  while (true) {... */\n      jump(tag_183)\n    tag_185:\n        /* \"erc721a/contracts/ERC721A.sol\":6458:7273  {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":6405:7273  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n    tag_181:\n        /* \"erc721a/contracts/ERC721A.sol\":7299:7330  OwnerQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe1, 0x6f96cda1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19564:20214  function _checkContractOnERC721Received(... */\n    tag_135:\n        /* \"erc721a/contracts/ERC721A.sol\":19742:19814  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      mload(0x40)\n      shl(0xe1, 0x0a85bd01)\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":19722:19726  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":19742:19778  IERC721Receiver(to).onERC721Received */\n      dup6\n      and\n      swap1\n      0x150b7a02\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19742:19814  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      tag_190\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19793:19797  from */\n      dup10\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19799:19806  tokenId */\n      dup9\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19808:19813  _data */\n      dup9\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19742:19814  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      0x04\n      add\n      tag_191\n      jump\t// in\n    tag_190:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_192\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_193\n      swap2\n      dup2\n      add\n      swap1\n      tag_194\n      jump\t// in\n    tag_193:\n      0x01\n    tag_192:\n        /* \"erc721a/contracts/ERC721A.sol\":19738:20208  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n      tag_195\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_200\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_199)\n    tag_200:\n      0x60\n      swap2\n      pop\n    tag_199:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":19973:19979  reason */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":19973:19986  reason.length */\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":19990:19991  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":19973:19991  reason.length == 0 */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":19969:20198  if (reason.length == 0) {... */\n      tag_201\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":20018:20058  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19969:20198  if (reason.length == 0) {... */\n    tag_201:\n        /* \"erc721a/contracts/ERC721A.sol\":20158:20164  reason */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":20152:20165  mload(reason) */\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":20143:20149  reason */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":20139:20141  32 */\n      0x20\n        /* \"erc721a/contracts/ERC721A.sol\":20135:20150  add(32, reason) */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":20128:20166  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19738:20208  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_195:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":19860:19915  retval == IERC721Receiver(to).onERC721Received.selector */\n      and\n      shl(0xe1, 0x0a85bd01)\n      eq\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":19738:20208  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_203:\n        /* \"erc721a/contracts/ERC721A.sol\":19564:20214  function _checkContractOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_145:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":384:397  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:606  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":610:611  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:611  value == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n      tag_206\n      jumpi\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:637  return \"0\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x01\n      dup2\n      mstore\n      shl(0xfc, 0x03)\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n    tag_206:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":672:677  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":657:669  uint256 temp */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n    tag_207:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":718:727  temp != 0 */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      tag_208\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":743:751  digits++ */\n      dup1\n      tag_209\n      dup2\n      tag_210\n      jump\t// in\n    tag_209:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      tag_211\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":773:775  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      dup4\n      tag_212\n      jump\t// in\n    tag_211:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      jump(tag_207)\n    tag_208:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:814  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":827:833  digits */\n      dup2\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":817:834  new bytes(digits) */\n      dup2\n      gt\n      iszero\n      tag_214\n      jumpi\n      tag_214\n      tag_215\n      jump\t// in\n    tag_214:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_216\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_216:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:834  bytes memory buffer = new bytes(digits) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n    tag_217:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:861  value != 0 */\n      dup5\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      tag_203\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      tag_219\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":887:888  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      dup4\n      tag_220\n      jump\t// in\n    tag_219:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_221\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:950  value */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_222\n      jump\t// in\n    tag_221:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_223\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:934  48 */\n      0x30\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_224\n      jump\t// in\n    tag_223:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":919:958  bytes1(uint8(48 + uint256(value % 10))) */\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:908  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":909:915  digits */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:916  buffer[digits] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_226\n      jumpi\n      tag_226\n      tag_227\n      jump\t// in\n    tag_226:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:958  buffer[digits] = bytes1(uint8(48 + uint256(value % 10))) */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      tag_228\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":981:983  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      dup7\n      tag_212\n      jump\t// in\n    tag_228:\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      jump(tag_217)\n        /* \"#utility.yul\":14:145   */\n    tag_231:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":88:120   */\n      dup2\n      and\n        /* \"#utility.yul\":78:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":68:139   */\n      tag_239\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":68:139   */\n    tag_239:\n        /* \"#utility.yul\":14:145   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":150:395   */\n    tag_19:\n        /* \"#utility.yul\":208:214   */\n      0x00\n        /* \"#utility.yul\":261:263   */\n      0x20\n        /* \"#utility.yul\":249:258   */\n      dup3\n        /* \"#utility.yul\":240:247   */\n      dup5\n        /* \"#utility.yul\":236:259   */\n      sub\n        /* \"#utility.yul\":232:264   */\n      slt\n        /* \"#utility.yul\":229:281   */\n      iszero\n      tag_241\n      jumpi\n        /* \"#utility.yul\":277:278   */\n      0x00\n        /* \"#utility.yul\":274:275   */\n      dup1\n        /* \"#utility.yul\":267:279   */\n      revert\n        /* \"#utility.yul\":229:281   */\n    tag_241:\n        /* \"#utility.yul\":316:325   */\n      dup2\n        /* \"#utility.yul\":303:326   */\n      calldataload\n        /* \"#utility.yul\":335:365   */\n      tag_143\n        /* \"#utility.yul\":359:364   */\n      dup2\n        /* \"#utility.yul\":335:365   */\n      tag_231\n      jump\t// in\n        /* \"#utility.yul\":592:850   */\n    tag_232:\n        /* \"#utility.yul\":664:665   */\n      0x00\n        /* \"#utility.yul\":674:787   */\n    tag_245:\n        /* \"#utility.yul\":688:694   */\n      dup4\n        /* \"#utility.yul\":685:686   */\n      dup2\n        /* \"#utility.yul\":682:695   */\n      lt\n        /* \"#utility.yul\":674:787   */\n      iszero\n      tag_247\n      jumpi\n        /* \"#utility.yul\":764:775   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":758:776   */\n      mload\n        /* \"#utility.yul\":745:756   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":738:777   */\n      mstore\n        /* \"#utility.yul\":710:712   */\n      0x20\n        /* \"#utility.yul\":703:713   */\n      add\n        /* \"#utility.yul\":674:787   */\n      jump(tag_245)\n    tag_247:\n        /* \"#utility.yul\":805:811   */\n      dup4\n        /* \"#utility.yul\":802:803   */\n      dup2\n        /* \"#utility.yul\":799:812   */\n      gt\n        /* \"#utility.yul\":796:844   */\n      iszero\n      tag_136\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":840:841   */\n      0x00\n        /* \"#utility.yul\":822:838   */\n      swap2\n      add\n        /* \"#utility.yul\":815:842   */\n      mstore\n        /* \"#utility.yul\":592:850   */\n      jump\t// out\n        /* \"#utility.yul\":855:1113   */\n    tag_233:\n        /* \"#utility.yul\":897:900   */\n      0x00\n        /* \"#utility.yul\":935:940   */\n      dup2\n        /* \"#utility.yul\":929:941   */\n      mload\n        /* \"#utility.yul\":962:968   */\n      dup1\n        /* \"#utility.yul\":957:960   */\n      dup5\n        /* \"#utility.yul\":950:969   */\n      mstore\n        /* \"#utility.yul\":978:1041   */\n      tag_250\n        /* \"#utility.yul\":1034:1040   */\n      dup2\n        /* \"#utility.yul\":1027:1031   */\n      0x20\n        /* \"#utility.yul\":1022:1025   */\n      dup7\n        /* \"#utility.yul\":1018:1032   */\n      add\n        /* \"#utility.yul\":1011:1015   */\n      0x20\n        /* \"#utility.yul\":1004:1009   */\n      dup7\n        /* \"#utility.yul\":1000:1016   */\n      add\n        /* \"#utility.yul\":978:1041   */\n      tag_232\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":1095:1097   */\n      0x1f\n        /* \"#utility.yul\":1074:1089   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1070:1099   */\n      and\n        /* \"#utility.yul\":1061:1100   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1102:1106   */\n      0x20\n        /* \"#utility.yul\":1057:1107   */\n      add\n      swap3\n        /* \"#utility.yul\":855:1113   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1118:1338   */\n    tag_26:\n        /* \"#utility.yul\":1267:1269   */\n      0x20\n        /* \"#utility.yul\":1256:1265   */\n      dup2\n        /* \"#utility.yul\":1249:1270   */\n      mstore\n        /* \"#utility.yul\":1230:1234   */\n      0x00\n        /* \"#utility.yul\":1287:1332   */\n      tag_143\n        /* \"#utility.yul\":1328:1330   */\n      0x20\n        /* \"#utility.yul\":1317:1326   */\n      dup4\n        /* \"#utility.yul\":1313:1331   */\n      add\n        /* \"#utility.yul\":1305:1311   */\n      dup5\n        /* \"#utility.yul\":1287:1332   */\n      tag_233\n      jump\t// in\n        /* \"#utility.yul\":1343:1523   */\n    tag_29:\n        /* \"#utility.yul\":1402:1408   */\n      0x00\n        /* \"#utility.yul\":1455:1457   */\n      0x20\n        /* \"#utility.yul\":1443:1452   */\n      dup3\n        /* \"#utility.yul\":1434:1441   */\n      dup5\n        /* \"#utility.yul\":1430:1453   */\n      sub\n        /* \"#utility.yul\":1426:1458   */\n      slt\n        /* \"#utility.yul\":1423:1475   */\n      iszero\n      tag_254\n      jumpi\n        /* \"#utility.yul\":1471:1472   */\n      0x00\n        /* \"#utility.yul\":1468:1469   */\n      dup1\n        /* \"#utility.yul\":1461:1473   */\n      revert\n        /* \"#utility.yul\":1423:1475   */\n    tag_254:\n      pop\n        /* \"#utility.yul\":1494:1517   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1343:1523   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1736:1909   */\n    tag_234:\n        /* \"#utility.yul\":1804:1824   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1853:1884   */\n      dup2\n      and\n        /* \"#utility.yul\":1843:1885   */\n      dup2\n      eq\n        /* \"#utility.yul\":1833:1903   */\n      tag_257\n      jumpi\n        /* \"#utility.yul\":1899:1900   */\n      0x00\n        /* \"#utility.yul\":1896:1897   */\n      dup1\n        /* \"#utility.yul\":1889:1901   */\n      revert\n        /* \"#utility.yul\":1833:1903   */\n    tag_257:\n        /* \"#utility.yul\":1736:1909   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1914:2168   */\n    tag_35:\n        /* \"#utility.yul\":1982:1988   */\n      0x00\n        /* \"#utility.yul\":1990:1996   */\n      dup1\n        /* \"#utility.yul\":2043:2045   */\n      0x40\n        /* \"#utility.yul\":2031:2040   */\n      dup4\n        /* \"#utility.yul\":2022:2029   */\n      dup6\n        /* \"#utility.yul\":2018:2041   */\n      sub\n        /* \"#utility.yul\":2014:2046   */\n      slt\n        /* \"#utility.yul\":2011:2063   */\n      iszero\n      tag_259\n      jumpi\n        /* \"#utility.yul\":2059:2060   */\n      0x00\n        /* \"#utility.yul\":2056:2057   */\n      dup1\n        /* \"#utility.yul\":2049:2061   */\n      revert\n        /* \"#utility.yul\":2011:2063   */\n    tag_259:\n        /* \"#utility.yul\":2082:2111   */\n      tag_260\n        /* \"#utility.yul\":2101:2110   */\n      dup4\n        /* \"#utility.yul\":2082:2111   */\n      tag_234\n      jump\t// in\n    tag_260:\n        /* \"#utility.yul\":2072:2111   */\n      swap5\n        /* \"#utility.yul\":2158:2160   */\n      0x20\n        /* \"#utility.yul\":2143:2161   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2130:2162   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1914:2168   */\n      jump\t// out\n        /* \"#utility.yul\":2355:2683   */\n    tag_43:\n        /* \"#utility.yul\":2432:2438   */\n      0x00\n        /* \"#utility.yul\":2440:2446   */\n      dup1\n        /* \"#utility.yul\":2448:2454   */\n      0x00\n        /* \"#utility.yul\":2501:2503   */\n      0x60\n        /* \"#utility.yul\":2489:2498   */\n      dup5\n        /* \"#utility.yul\":2480:2487   */\n      dup7\n        /* \"#utility.yul\":2476:2499   */\n      sub\n        /* \"#utility.yul\":2472:2504   */\n      slt\n        /* \"#utility.yul\":2469:2521   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":2517:2518   */\n      0x00\n        /* \"#utility.yul\":2514:2515   */\n      dup1\n        /* \"#utility.yul\":2507:2519   */\n      revert\n        /* \"#utility.yul\":2469:2521   */\n    tag_263:\n        /* \"#utility.yul\":2540:2569   */\n      tag_264\n        /* \"#utility.yul\":2559:2568   */\n      dup5\n        /* \"#utility.yul\":2540:2569   */\n      tag_234\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":2530:2569   */\n      swap3\n      pop\n        /* \"#utility.yul\":2588:2626   */\n      tag_265\n        /* \"#utility.yul\":2622:2624   */\n      0x20\n        /* \"#utility.yul\":2611:2620   */\n      dup6\n        /* \"#utility.yul\":2607:2625   */\n      add\n        /* \"#utility.yul\":2588:2626   */\n      tag_234\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":2578:2626   */\n      swap2\n      pop\n        /* \"#utility.yul\":2673:2675   */\n      0x40\n        /* \"#utility.yul\":2662:2671   */\n      dup5\n        /* \"#utility.yul\":2658:2676   */\n      add\n        /* \"#utility.yul\":2645:2677   */\n      calldataload\n        /* \"#utility.yul\":2635:2677   */\n      swap1\n      pop\n        /* \"#utility.yul\":2355:2683   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2688:2874   */\n    tag_54:\n        /* \"#utility.yul\":2747:2753   */\n      0x00\n        /* \"#utility.yul\":2800:2802   */\n      0x20\n        /* \"#utility.yul\":2788:2797   */\n      dup3\n        /* \"#utility.yul\":2779:2786   */\n      dup5\n        /* \"#utility.yul\":2775:2798   */\n      sub\n        /* \"#utility.yul\":2771:2803   */\n      slt\n        /* \"#utility.yul\":2768:2820   */\n      iszero\n      tag_267\n      jumpi\n        /* \"#utility.yul\":2816:2817   */\n      0x00\n        /* \"#utility.yul\":2813:2814   */\n      dup1\n        /* \"#utility.yul\":2806:2818   */\n      revert\n        /* \"#utility.yul\":2768:2820   */\n    tag_267:\n        /* \"#utility.yul\":2839:2868   */\n      tag_143\n        /* \"#utility.yul\":2858:2867   */\n      dup3\n        /* \"#utility.yul\":2839:2868   */\n      tag_234\n      jump\t// in\n        /* \"#utility.yul\":2879:3226   */\n    tag_62:\n        /* \"#utility.yul\":2944:2950   */\n      0x00\n        /* \"#utility.yul\":2952:2958   */\n      dup1\n        /* \"#utility.yul\":3005:3007   */\n      0x40\n        /* \"#utility.yul\":2993:3002   */\n      dup4\n        /* \"#utility.yul\":2984:2991   */\n      dup6\n        /* \"#utility.yul\":2980:3003   */\n      sub\n        /* \"#utility.yul\":2976:3008   */\n      slt\n        /* \"#utility.yul\":2973:3025   */\n      iszero\n      tag_270\n      jumpi\n        /* \"#utility.yul\":3021:3022   */\n      0x00\n        /* \"#utility.yul\":3018:3019   */\n      dup1\n        /* \"#utility.yul\":3011:3023   */\n      revert\n        /* \"#utility.yul\":2973:3025   */\n    tag_270:\n        /* \"#utility.yul\":3044:3073   */\n      tag_271\n        /* \"#utility.yul\":3063:3072   */\n      dup4\n        /* \"#utility.yul\":3044:3073   */\n      tag_234\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":3034:3073   */\n      swap2\n      pop\n        /* \"#utility.yul\":3123:3125   */\n      0x20\n        /* \"#utility.yul\":3112:3121   */\n      dup4\n        /* \"#utility.yul\":3108:3126   */\n      add\n        /* \"#utility.yul\":3095:3127   */\n      calldataload\n        /* \"#utility.yul\":3170:3175   */\n      dup1\n        /* \"#utility.yul\":3163:3176   */\n      iszero\n        /* \"#utility.yul\":3156:3177   */\n      iszero\n        /* \"#utility.yul\":3149:3154   */\n      dup2\n        /* \"#utility.yul\":3146:3178   */\n      eq\n        /* \"#utility.yul\":3136:3196   */\n      tag_272\n      jumpi\n        /* \"#utility.yul\":3192:3193   */\n      0x00\n        /* \"#utility.yul\":3189:3190   */\n      dup1\n        /* \"#utility.yul\":3182:3194   */\n      revert\n        /* \"#utility.yul\":3136:3196   */\n    tag_272:\n        /* \"#utility.yul\":3215:3220   */\n      dup1\n        /* \"#utility.yul\":3205:3220   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2879:3226   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3231:3358   */\n    tag_215:\n        /* \"#utility.yul\":3292:3302   */\n      0x4e487b71\n        /* \"#utility.yul\":3287:3290   */\n      0xe0\n        /* \"#utility.yul\":3283:3303   */\n      shl\n        /* \"#utility.yul\":3280:3281   */\n      0x00\n        /* \"#utility.yul\":3273:3304   */\n      mstore\n        /* \"#utility.yul\":3323:3327   */\n      0x41\n        /* \"#utility.yul\":3320:3321   */\n      0x04\n        /* \"#utility.yul\":3313:3328   */\n      mstore\n        /* \"#utility.yul\":3347:3351   */\n      0x24\n        /* \"#utility.yul\":3344:3345   */\n      0x00\n        /* \"#utility.yul\":3337:3352   */\n      revert\n        /* \"#utility.yul\":3363:4501   */\n    tag_66:\n        /* \"#utility.yul\":3458:3464   */\n      0x00\n        /* \"#utility.yul\":3466:3472   */\n      dup1\n        /* \"#utility.yul\":3474:3480   */\n      0x00\n        /* \"#utility.yul\":3482:3488   */\n      dup1\n        /* \"#utility.yul\":3535:3538   */\n      0x80\n        /* \"#utility.yul\":3523:3532   */\n      dup6\n        /* \"#utility.yul\":3514:3521   */\n      dup8\n        /* \"#utility.yul\":3510:3533   */\n      sub\n        /* \"#utility.yul\":3506:3539   */\n      slt\n        /* \"#utility.yul\":3503:3556   */\n      iszero\n      tag_275\n      jumpi\n        /* \"#utility.yul\":3552:3553   */\n      0x00\n        /* \"#utility.yul\":3549:3550   */\n      dup1\n        /* \"#utility.yul\":3542:3554   */\n      revert\n        /* \"#utility.yul\":3503:3556   */\n    tag_275:\n        /* \"#utility.yul\":3575:3604   */\n      tag_276\n        /* \"#utility.yul\":3594:3603   */\n      dup6\n        /* \"#utility.yul\":3575:3604   */\n      tag_234\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":3565:3604   */\n      swap4\n      pop\n        /* \"#utility.yul\":3623:3661   */\n      tag_277\n        /* \"#utility.yul\":3657:3659   */\n      0x20\n        /* \"#utility.yul\":3646:3655   */\n      dup7\n        /* \"#utility.yul\":3642:3660   */\n      add\n        /* \"#utility.yul\":3623:3661   */\n      tag_234\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":3613:3661   */\n      swap3\n      pop\n        /* \"#utility.yul\":3708:3710   */\n      0x40\n        /* \"#utility.yul\":3693:3711   */\n      dup6\n      add\n        /* \"#utility.yul\":3680:3712   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":3763:3765   */\n      0x60\n        /* \"#utility.yul\":3748:3766   */\n      dup6\n      add\n        /* \"#utility.yul\":3735:3767   */\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":3816:3830   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3813:3847   */\n      iszero\n      tag_278\n      jumpi\n        /* \"#utility.yul\":3843:3844   */\n      0x00\n        /* \"#utility.yul\":3840:3841   */\n      dup1\n        /* \"#utility.yul\":3833:3845   */\n      revert\n        /* \"#utility.yul\":3813:3847   */\n    tag_278:\n        /* \"#utility.yul\":3881:3887   */\n      dup2\n        /* \"#utility.yul\":3870:3879   */\n      dup8\n        /* \"#utility.yul\":3866:3888   */\n      add\n        /* \"#utility.yul\":3856:3888   */\n      swap2\n      pop\n        /* \"#utility.yul\":3926:3933   */\n      dup8\n        /* \"#utility.yul\":3919:3923   */\n      0x1f\n        /* \"#utility.yul\":3915:3917   */\n      dup4\n        /* \"#utility.yul\":3911:3924   */\n      add\n        /* \"#utility.yul\":3907:3934   */\n      slt\n        /* \"#utility.yul\":3897:3952   */\n      tag_279\n      jumpi\n        /* \"#utility.yul\":3948:3949   */\n      0x00\n        /* \"#utility.yul\":3945:3946   */\n      dup1\n        /* \"#utility.yul\":3938:3950   */\n      revert\n        /* \"#utility.yul\":3897:3952   */\n    tag_279:\n        /* \"#utility.yul\":3984:3986   */\n      dup2\n        /* \"#utility.yul\":3971:3987   */\n      calldataload\n        /* \"#utility.yul\":4006:4008   */\n      dup2\n        /* \"#utility.yul\":4002:4004   */\n      dup2\n        /* \"#utility.yul\":3999:4009   */\n      gt\n        /* \"#utility.yul\":3996:4032   */\n      iszero\n      tag_281\n      jumpi\n        /* \"#utility.yul\":4012:4030   */\n      tag_281\n      tag_215\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":4087:4089   */\n      0x40\n        /* \"#utility.yul\":4081:4090   */\n      mload\n        /* \"#utility.yul\":4055:4057   */\n      0x1f\n        /* \"#utility.yul\":4141:4154   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4137:4159   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":4161:4163   */\n      0x3f\n        /* \"#utility.yul\":4133:4164   */\n      add\n        /* \"#utility.yul\":4129:4169   */\n      and\n        /* \"#utility.yul\":4117:4170   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4185:4203   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":4205:4227   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":4182:4228   */\n      or\n        /* \"#utility.yul\":4179:4251   */\n      iszero\n      tag_283\n      jumpi\n        /* \"#utility.yul\":4231:4249   */\n      tag_283\n      tag_215\n      jump\t// in\n    tag_283:\n        /* \"#utility.yul\":4271:4281   */\n      dup2\n        /* \"#utility.yul\":4267:4269   */\n      0x40\n        /* \"#utility.yul\":4260:4282   */\n      mstore\n        /* \"#utility.yul\":4306:4308   */\n      dup3\n        /* \"#utility.yul\":4298:4304   */\n      dup2\n        /* \"#utility.yul\":4291:4309   */\n      mstore\n        /* \"#utility.yul\":4346:4353   */\n      dup11\n        /* \"#utility.yul\":4341:4343   */\n      0x20\n        /* \"#utility.yul\":4336:4338   */\n      dup5\n        /* \"#utility.yul\":4332:4334   */\n      dup8\n        /* \"#utility.yul\":4328:4339   */\n      add\n        /* \"#utility.yul\":4324:4344   */\n      add\n        /* \"#utility.yul\":4321:4354   */\n      gt\n        /* \"#utility.yul\":4318:4371   */\n      iszero\n      tag_284\n      jumpi\n        /* \"#utility.yul\":4367:4368   */\n      0x00\n        /* \"#utility.yul\":4364:4365   */\n      dup1\n        /* \"#utility.yul\":4357:4369   */\n      revert\n        /* \"#utility.yul\":4318:4371   */\n    tag_284:\n        /* \"#utility.yul\":4423:4425   */\n      dup3\n        /* \"#utility.yul\":4418:4420   */\n      0x20\n        /* \"#utility.yul\":4414:4416   */\n      dup7\n        /* \"#utility.yul\":4410:4421   */\n      add\n        /* \"#utility.yul\":4405:4407   */\n      0x20\n        /* \"#utility.yul\":4397:4403   */\n      dup4\n        /* \"#utility.yul\":4393:4408   */\n      add\n        /* \"#utility.yul\":4380:4426   */\n      calldatacopy\n        /* \"#utility.yul\":4468:4469   */\n      0x00\n        /* \"#utility.yul\":4463:4465   */\n      0x20\n        /* \"#utility.yul\":4458:4460   */\n      dup5\n        /* \"#utility.yul\":4450:4456   */\n      dup4\n        /* \"#utility.yul\":4446:4461   */\n      add\n        /* \"#utility.yul\":4442:4466   */\n      add\n        /* \"#utility.yul\":4435:4470   */\n      mstore\n        /* \"#utility.yul\":4489:4495   */\n      dup1\n        /* \"#utility.yul\":4479:4495   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3363:4501   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4506:4766   */\n    tag_74:\n        /* \"#utility.yul\":4574:4580   */\n      0x00\n        /* \"#utility.yul\":4582:4588   */\n      dup1\n        /* \"#utility.yul\":4635:4637   */\n      0x40\n        /* \"#utility.yul\":4623:4632   */\n      dup4\n        /* \"#utility.yul\":4614:4621   */\n      dup6\n        /* \"#utility.yul\":4610:4633   */\n      sub\n        /* \"#utility.yul\":4606:4638   */\n      slt\n        /* \"#utility.yul\":4603:4655   */\n      iszero\n      tag_286\n      jumpi\n        /* \"#utility.yul\":4651:4652   */\n      0x00\n        /* \"#utility.yul\":4648:4649   */\n      dup1\n        /* \"#utility.yul\":4641:4653   */\n      revert\n        /* \"#utility.yul\":4603:4655   */\n    tag_286:\n        /* \"#utility.yul\":4674:4703   */\n      tag_287\n        /* \"#utility.yul\":4693:4702   */\n      dup4\n        /* \"#utility.yul\":4674:4703   */\n      tag_234\n      jump\t// in\n    tag_287:\n        /* \"#utility.yul\":4664:4703   */\n      swap2\n      pop\n        /* \"#utility.yul\":4722:4760   */\n      tag_288\n        /* \"#utility.yul\":4756:4758   */\n      0x20\n        /* \"#utility.yul\":4745:4754   */\n      dup5\n        /* \"#utility.yul\":4741:4759   */\n      add\n        /* \"#utility.yul\":4722:4760   */\n      tag_234\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":4712:4760   */\n      swap1\n      pop\n        /* \"#utility.yul\":4506:4766   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4771:5151   */\n    tag_84:\n        /* \"#utility.yul\":4850:4851   */\n      0x01\n        /* \"#utility.yul\":4846:4858   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4893:4905   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4914:4975   */\n      tag_290\n      jumpi\n        /* \"#utility.yul\":4968:4972   */\n      0x7f\n        /* \"#utility.yul\":4960:4966   */\n      dup3\n        /* \"#utility.yul\":4956:4973   */\n      and\n        /* \"#utility.yul\":4946:4973   */\n      swap2\n      pop\n        /* \"#utility.yul\":4914:4975   */\n    tag_290:\n        /* \"#utility.yul\":5021:5023   */\n      0x20\n        /* \"#utility.yul\":5013:5019   */\n      dup3\n        /* \"#utility.yul\":5010:5024   */\n      lt\n        /* \"#utility.yul\":4990:5008   */\n      dup2\n        /* \"#utility.yul\":4987:5025   */\n      sub\n        /* \"#utility.yul\":4984:5145   */\n      tag_291\n      jumpi\n        /* \"#utility.yul\":5067:5077   */\n      0x4e487b71\n        /* \"#utility.yul\":5062:5065   */\n      0xe0\n        /* \"#utility.yul\":5058:5078   */\n      shl\n        /* \"#utility.yul\":5055:5056   */\n      0x00\n        /* \"#utility.yul\":5048:5079   */\n      mstore\n        /* \"#utility.yul\":5102:5106   */\n      0x22\n        /* \"#utility.yul\":5099:5100   */\n      0x04\n        /* \"#utility.yul\":5092:5107   */\n      mstore\n        /* \"#utility.yul\":5130:5134   */\n      0x24\n        /* \"#utility.yul\":5127:5128   */\n      0x00\n        /* \"#utility.yul\":5120:5135   */\n      revert\n        /* \"#utility.yul\":4984:5145   */\n    tag_291:\n      pop\n        /* \"#utility.yul\":4771:5151   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5156:5626   */\n    tag_147:\n        /* \"#utility.yul\":5335:5338   */\n      0x00\n        /* \"#utility.yul\":5373:5379   */\n      dup4\n        /* \"#utility.yul\":5367:5380   */\n      mload\n        /* \"#utility.yul\":5389:5442   */\n      tag_293\n        /* \"#utility.yul\":5435:5441   */\n      dup2\n        /* \"#utility.yul\":5430:5433   */\n      dup5\n        /* \"#utility.yul\":5423:5427   */\n      0x20\n        /* \"#utility.yul\":5415:5421   */\n      dup9\n        /* \"#utility.yul\":5411:5428   */\n      add\n        /* \"#utility.yul\":5389:5442   */\n      tag_232\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":5505:5518   */\n      dup4\n      mload\n        /* \"#utility.yul\":5464:5480   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":5527:5584   */\n      tag_294\n        /* \"#utility.yul\":5505:5518   */\n      dup2\n        /* \"#utility.yul\":5464:5480   */\n      dup4\n        /* \"#utility.yul\":5561:5565   */\n      0x20\n        /* \"#utility.yul\":5549:5566   */\n      dup9\n      add\n        /* \"#utility.yul\":5527:5584   */\n      tag_232\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":5600:5620   */\n      add\n      swap5\n        /* \"#utility.yul\":5156:5626   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5631:6120   */\n    tag_191:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5900:5915   */\n      dup6\n      dup2\n      and\n        /* \"#utility.yul\":5882:5916   */\n      dup3\n      mstore\n        /* \"#utility.yul\":5952:5967   */\n      dup5\n      and\n        /* \"#utility.yul\":5947:5949   */\n      0x20\n        /* \"#utility.yul\":5932:5950   */\n      dup3\n      add\n        /* \"#utility.yul\":5925:5968   */\n      mstore\n        /* \"#utility.yul\":5999:6001   */\n      0x40\n        /* \"#utility.yul\":5984:6002   */\n      dup2\n      add\n        /* \"#utility.yul\":5977:6011   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":6047:6050   */\n      0x80\n        /* \"#utility.yul\":6042:6044   */\n      0x60\n        /* \"#utility.yul\":6027:6045   */\n      dup3\n      add\n        /* \"#utility.yul\":6020:6051   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5825:5829   */\n      0x00\n      swap1\n        /* \"#utility.yul\":6068:6114   */\n      tag_296\n      swap1\n        /* \"#utility.yul\":6094:6113   */\n      dup4\n      add\n        /* \"#utility.yul\":6086:6092   */\n      dup5\n        /* \"#utility.yul\":6068:6114   */\n      tag_233\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":6060:6114   */\n      swap7\n        /* \"#utility.yul\":5631:6120   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6125:6374   */\n    tag_194:\n        /* \"#utility.yul\":6194:6200   */\n      0x00\n        /* \"#utility.yul\":6247:6249   */\n      0x20\n        /* \"#utility.yul\":6235:6244   */\n      dup3\n        /* \"#utility.yul\":6226:6233   */\n      dup5\n        /* \"#utility.yul\":6222:6245   */\n      sub\n        /* \"#utility.yul\":6218:6250   */\n      slt\n        /* \"#utility.yul\":6215:6267   */\n      iszero\n      tag_298\n      jumpi\n        /* \"#utility.yul\":6263:6264   */\n      0x00\n        /* \"#utility.yul\":6260:6261   */\n      dup1\n        /* \"#utility.yul\":6253:6265   */\n      revert\n        /* \"#utility.yul\":6215:6267   */\n    tag_298:\n        /* \"#utility.yul\":6295:6304   */\n      dup2\n        /* \"#utility.yul\":6289:6305   */\n      mload\n        /* \"#utility.yul\":6314:6344   */\n      tag_143\n        /* \"#utility.yul\":6338:6343   */\n      dup2\n        /* \"#utility.yul\":6314:6344   */\n      tag_231\n      jump\t// in\n        /* \"#utility.yul\":6379:6506   */\n    tag_235:\n        /* \"#utility.yul\":6440:6450   */\n      0x4e487b71\n        /* \"#utility.yul\":6435:6438   */\n      0xe0\n        /* \"#utility.yul\":6431:6451   */\n      shl\n        /* \"#utility.yul\":6428:6429   */\n      0x00\n        /* \"#utility.yul\":6421:6452   */\n      mstore\n        /* \"#utility.yul\":6471:6475   */\n      0x11\n        /* \"#utility.yul\":6468:6469   */\n      0x04\n        /* \"#utility.yul\":6461:6476   */\n      mstore\n        /* \"#utility.yul\":6495:6499   */\n      0x24\n        /* \"#utility.yul\":6492:6493   */\n      0x00\n        /* \"#utility.yul\":6485:6500   */\n      revert\n        /* \"#utility.yul\":6511:6646   */\n    tag_210:\n        /* \"#utility.yul\":6550:6553   */\n      0x00\n        /* \"#utility.yul\":6571:6588   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":6568:6611   */\n      tag_303\n      jumpi\n        /* \"#utility.yul\":6591:6609   */\n      tag_303\n      tag_235\n      jump\t// in\n    tag_303:\n      pop\n        /* \"#utility.yul\":6638:6639   */\n      0x01\n        /* \"#utility.yul\":6627:6640   */\n      add\n      swap1\n        /* \"#utility.yul\":6511:6646   */\n      jump\t// out\n        /* \"#utility.yul\":6651:6778   */\n    tag_236:\n        /* \"#utility.yul\":6712:6722   */\n      0x4e487b71\n        /* \"#utility.yul\":6707:6710   */\n      0xe0\n        /* \"#utility.yul\":6703:6723   */\n      shl\n        /* \"#utility.yul\":6700:6701   */\n      0x00\n        /* \"#utility.yul\":6693:6724   */\n      mstore\n        /* \"#utility.yul\":6743:6747   */\n      0x12\n        /* \"#utility.yul\":6740:6741   */\n      0x04\n        /* \"#utility.yul\":6733:6748   */\n      mstore\n        /* \"#utility.yul\":6767:6771   */\n      0x24\n        /* \"#utility.yul\":6764:6765   */\n      0x00\n        /* \"#utility.yul\":6757:6772   */\n      revert\n        /* \"#utility.yul\":6783:6903   */\n    tag_212:\n        /* \"#utility.yul\":6823:6824   */\n      0x00\n        /* \"#utility.yul\":6849:6850   */\n      dup3\n        /* \"#utility.yul\":6839:6874   */\n      tag_307\n      jumpi\n        /* \"#utility.yul\":6854:6872   */\n      tag_307\n      tag_236\n      jump\t// in\n    tag_307:\n      pop\n        /* \"#utility.yul\":6888:6897   */\n      div\n      swap1\n        /* \"#utility.yul\":6783:6903   */\n      jump\t// out\n        /* \"#utility.yul\":6908:7033   */\n    tag_220:\n        /* \"#utility.yul\":6948:6952   */\n      0x00\n        /* \"#utility.yul\":6976:6977   */\n      dup3\n        /* \"#utility.yul\":6973:6974   */\n      dup3\n        /* \"#utility.yul\":6970:6978   */\n      lt\n        /* \"#utility.yul\":6967:7001   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":6981:6999   */\n      tag_310\n      tag_235\n      jump\t// in\n    tag_310:\n      pop\n        /* \"#utility.yul\":7018:7027   */\n      sub\n      swap1\n        /* \"#utility.yul\":6908:7033   */\n      jump\t// out\n        /* \"#utility.yul\":7038:7150   */\n    tag_222:\n        /* \"#utility.yul\":7070:7071   */\n      0x00\n        /* \"#utility.yul\":7096:7097   */\n      dup3\n        /* \"#utility.yul\":7086:7121   */\n      tag_313\n      jumpi\n        /* \"#utility.yul\":7101:7119   */\n      tag_313\n      tag_236\n      jump\t// in\n    tag_313:\n      pop\n        /* \"#utility.yul\":7135:7144   */\n      mod\n      swap1\n        /* \"#utility.yul\":7038:7150   */\n      jump\t// out\n        /* \"#utility.yul\":7155:7283   */\n    tag_224:\n        /* \"#utility.yul\":7195:7198   */\n      0x00\n        /* \"#utility.yul\":7226:7227   */\n      dup3\n        /* \"#utility.yul\":7222:7228   */\n      not\n        /* \"#utility.yul\":7219:7220   */\n      dup3\n        /* \"#utility.yul\":7216:7229   */\n      gt\n        /* \"#utility.yul\":7213:7252   */\n      iszero\n      tag_316\n      jumpi\n        /* \"#utility.yul\":7232:7250   */\n      tag_316\n      tag_235\n      jump\t// in\n    tag_316:\n      pop\n        /* \"#utility.yul\":7268:7277   */\n      add\n      swap1\n        /* \"#utility.yul\":7155:7283   */\n      jump\t// out\n        /* \"#utility.yul\":7288:7415   */\n    tag_227:\n        /* \"#utility.yul\":7349:7359   */\n      0x4e487b71\n        /* \"#utility.yul\":7344:7347   */\n      0xe0\n        /* \"#utility.yul\":7340:7360   */\n      shl\n        /* \"#utility.yul\":7337:7338   */\n      0x00\n        /* \"#utility.yul\":7330:7361   */\n      mstore\n        /* \"#utility.yul\":7380:7384   */\n      0x32\n        /* \"#utility.yul\":7377:7378   */\n      0x04\n        /* \"#utility.yul\":7370:7385   */\n      mstore\n        /* \"#utility.yul\":7404:7408   */\n      0x24\n        /* \"#utility.yul\":7401:7402   */\n      0x00\n        /* \"#utility.yul\":7394:7409   */\n      revert\n\n    auxdata: 0xa264697066735822122048030cddb04734b6db34513a6de4e316561df08331fcdc5d014c33a1ddc7ecd764736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1127": {
									"entryPoint": null,
									"id": 1127,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_startTokenId_1136": {
									"entryPoint": null,
									"id": 1136,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 296,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 479,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"extract_byte_array_length": {
									"entryPoint": 585,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 274,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1985:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:12"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:12"
															},
															"nodeType": "YulIf",
															"src": "220:55:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:12",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:12"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:12"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:12"
															},
															"nodeType": "YulIf",
															"src": "353:36:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:12"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:12"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:12",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:12"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:12",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:12"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:12"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:12",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:12"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:12"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:12"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:12"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:12"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:12"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:12"
															},
															"nodeType": "YulIf",
															"src": "536:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:12",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:12",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:12"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:12"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:12"
															},
															"nodeType": "YulIf",
															"src": "698:53:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:12"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:12"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:12"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:12"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:12"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:12"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:12"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:12",
																"statements": []
															},
															"src": "779:133:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:12"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:12"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:12"
															},
															"nodeType": "YulIf",
															"src": "921:80:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:12",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:12",
														"type": ""
													}
												],
												"src": "146:885:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1154:444:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1200:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1209:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1212:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1202:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1202:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1202:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1175:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1184:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1171:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1171:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1196:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:32:12"
															},
															"nodeType": "YulIf",
															"src": "1164:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1225:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1245:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1239:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1239:16:12"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1229:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1264:28:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1282:2:12",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1278:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1278:10:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1290:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1274:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:18:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1268:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1319:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1328:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1331:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1321:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1321:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1321:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1307:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1315:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1304:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1304:14:12"
															},
															"nodeType": "YulIf",
															"src": "1301:34:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:71:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1387:9:12"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1398:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1383:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1383:22:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1407:7:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1354:28:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:61:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1344:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1424:41:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1450:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1461:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1446:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1446:18:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1440:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:25:12"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1428:8:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1494:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1503:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1506:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1496:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1496:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1496:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1480:8:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1490:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:16:12"
															},
															"nodeType": "YulIf",
															"src": "1474:36:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1519:73:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1562:9:12"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1573:8:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1558:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1558:24:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1584:7:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1529:28:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:63:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1112:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1123:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1135:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1143:6:12",
														"type": ""
													}
												],
												"src": "1036:562:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1658:325:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1668:22:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1682:1:12",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1685:4:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1678:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1678:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1668:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1699:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1729:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1735:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1725:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1725:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1703:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1776:31:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1778:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1792:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1800:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1788:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1788:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1756:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1749:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1749:26:12"
															},
															"nodeType": "YulIf",
															"src": "1746:61:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1866:111:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1887:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1894:3:12",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1899:10:12",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1890:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1890:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1880:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1880:31:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1880:31:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1931:1:12",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1934:4:12",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1924:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1924:15:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1959:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1962:4:12",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1952:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1952:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1952:15:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1822:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1845:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1853:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1842:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1842:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1819:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:38:12"
															},
															"nodeType": "YulIf",
															"src": "1816:161:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1638:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1647:6:12",
														"type": ""
													}
												],
												"src": "1603:380:12"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200124c3803806200124c8339810160408190526200003491620001df565b8151620000499060029060208501906200006c565b5080516200005f9060039060208401906200006c565b5050600080555062000285565b8280546200007a9062000249565b90600052602060002090601f0160209004810192826200009e5760008555620000e9565b82601f10620000b957805160ff1916838001178555620000e9565b82800160010185558215620000e9579182015b82811115620000e9578251825591602001919060010190620000cc565b50620000f7929150620000fb565b5090565b5b80821115620000f75760008155600101620000fc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013a57600080fd5b81516001600160401b038082111562000157576200015762000112565b604051601f8301601f19908116603f0116810190828211818310171562000182576200018262000112565b816040528381526020925086838588010111156200019f57600080fd5b600091505b83821015620001c35785820183015181830184015290820190620001a4565b83821115620001d55760008385830101525b9695505050505050565b60008060408385031215620001f357600080fd5b82516001600160401b03808211156200020b57600080fd5b620002198683870162000128565b935060208501519150808211156200023057600080fd5b506200023f8582860162000128565b9150509250929050565b600181811c908216806200025e57607f821691505b6020821081036200027f57634e487b7160e01b600052602260045260246000fd5b50919050565b610fb780620002956000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c806301ffc9a7146100bf57806306fdde03146100e7578063081812fc146100fc578063095ea7b31461012757806318160ddd1461013c57806323b872dd1461015257806342842e0e146101655780636352211e1461017857806370a082311461018b57806395d89b411461019e578063a22cb465146101a6578063b88d4fde146101b9578063c87b56dd146101cc578063e985e9c5146101df575b600080fd5b6100d26100cd366004610b6e565b61021b565b60405190151581526020015b60405180910390f35b6100ef61026d565b6040516100de9190610be3565b61010f61010a366004610bf6565b6102ff565b6040516001600160a01b0390911681526020016100de565b61013a610135366004610c2b565b610343565b005b600154600054035b6040519081526020016100de565b61013a610160366004610c55565b6103d0565b61013a610173366004610c55565b6103db565b61010f610186366004610bf6565b6103f6565b610144610199366004610c91565b610408565b6100ef610456565b61013a6101b4366004610cac565b610465565b61013a6101c7366004610cfe565b6104fa565b6100ef6101da366004610bf6565b61054b565b6100d26101ed366004610dd9565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061024c57506001600160e01b03198216635b5e139f60e01b145b8061026757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461027c90610e0c565b80601f01602080910402602001604051908101604052809291908181526020018280546102a890610e0c565b80156102f55780601f106102ca576101008083540402835291602001916102f5565b820191906000526020600020905b8154815290600101906020018083116102d857829003601f168201915b5050505050905090565b600061030a826105dc565b610327576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061034e826103f6565b9050806001600160a01b0316836001600160a01b0316036103825760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906103a257506103a081336101ed565b155b156103c0576040516367d9dca160e11b815260040160405180910390fd5b6103cb838383610607565b505050565b6103cb838383610663565b6103cb838383604051806020016040528060008152506104fa565b60006104018261084f565b5192915050565b60006001600160a01b038216610431576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b60606003805461027c90610e0c565b336001600160a01b0383160361048e5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610505848484610663565b6001600160a01b0383163b15158015610527575061052584848484610969565b155b15610545576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610556826105dc565b61057357604051630a14c4b560e41b815260040160405180910390fd5b600061058a60408051602081019091526000815290565b905080516000036105aa57604051806020016040528060008152506105d5565b806105b484610a55565b6040516020016105c5929190610e46565b6040516020818303038152906040525b9392505050565b6000805482108015610267575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061066e8261084f565b9050836001600160a01b031681600001516001600160a01b0316146106a55760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806106c357506106c385336101ed565b806106de5750336106d3846102ff565b6001600160a01b0316145b9050806106fe57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661072557604051633a954ecd60e21b815260040160405180910390fd5b61073160008487610607565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661080457600054821461080457805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60408051606081018252600080825260208201819052918101919091528160005481101561095057600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529061094e5780516001600160a01b0316156108e5579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215610949579392505050565b6108e5565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061099e903390899088908890600401610e75565b6020604051808303816000875af19250505080156109d9575060408051601f3d908101601f191682019092526109d691810190610eb2565b60015b610a37573d808015610a07576040519150601f19603f3d011682016040523d82523d6000602084013e610a0c565b606091505b508051600003610a2f576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081600003610a7c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610aa65780610a9081610ee5565b9150610a9f9050600a83610f14565b9150610a80565b6000816001600160401b03811115610ac057610ac0610ce8565b6040519080825280601f01601f191660200182016040528015610aea576020820181803683370190505b5090505b8415610a4d57610aff600183610f28565b9150610b0c600a86610f3f565b610b17906030610f53565b60f81b818381518110610b2c57610b2c610f6b565b60200101906001600160f81b031916908160001a905350610b4e600a86610f14565b9450610aee565b6001600160e01b031981168114610b6b57600080fd5b50565b600060208284031215610b8057600080fd5b81356105d581610b55565b60005b83811015610ba6578181015183820152602001610b8e565b838111156105455750506000910152565b60008151808452610bcf816020860160208601610b8b565b601f01601f19169290920160200192915050565b6020815260006105d56020830184610bb7565b600060208284031215610c0857600080fd5b5035919050565b80356001600160a01b0381168114610c2657600080fd5b919050565b60008060408385031215610c3e57600080fd5b610c4783610c0f565b946020939093013593505050565b600080600060608486031215610c6a57600080fd5b610c7384610c0f565b9250610c8160208501610c0f565b9150604084013590509250925092565b600060208284031215610ca357600080fd5b6105d582610c0f565b60008060408385031215610cbf57600080fd5b610cc883610c0f565b915060208301358015158114610cdd57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610d1457600080fd5b610d1d85610c0f565b9350610d2b60208601610c0f565b92506040850135915060608501356001600160401b0380821115610d4e57600080fd5b818701915087601f830112610d6257600080fd5b813581811115610d7457610d74610ce8565b604051601f8201601f19908116603f01168101908382118183101715610d9c57610d9c610ce8565b816040528281528a6020848701011115610db557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610dec57600080fd5b610df583610c0f565b9150610e0360208401610c0f565b90509250929050565b600181811c90821680610e2057607f821691505b602082108103610e4057634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610e58818460208801610b8b565b835190830190610e6c818360208801610b8b565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610ea890830184610bb7565b9695505050505050565b600060208284031215610ec457600080fd5b81516105d581610b55565b634e487b7160e01b600052601160045260246000fd5b600060018201610ef757610ef7610ecf565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610f2357610f23610efe565b500490565b600082821015610f3a57610f3a610ecf565b500390565b600082610f4e57610f4e610efe565b500690565b60008219821115610f6657610f66610ecf565b500190565b634e487b7160e01b600052603260045260246000fdfea264697066735822122048030cddb04734b6db34513a6de4e316561df08331fcdc5d014c33a1ddc7ecd764736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x124C CODESIZE SUB DUP1 PUSH3 0x124C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DF JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x6C JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x6C JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x285 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7A SWAP1 PUSH3 0x249 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9E JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB9 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE9 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xCC JUMP JUMPDEST POP PUSH3 0xF7 SWAP3 SWAP2 POP PUSH3 0xFB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF7 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xFC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x157 JUMPI PUSH3 0x157 PUSH3 0x112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x182 JUMPI PUSH3 0x182 PUSH3 0x112 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1C3 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A4 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D5 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x20B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x219 DUP7 DUP4 DUP8 ADD PUSH3 0x128 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23F DUP6 DUP3 DUP7 ADD PUSH3 0x128 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x27F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFB7 DUP1 PUSH3 0x295 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1DF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0xB6E JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDE SWAP2 SWAP1 PUSH2 0xBE3 JUMP JUMPDEST PUSH2 0x10F PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0xBF6 JUMP JUMPDEST PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDE JUMP JUMPDEST PUSH2 0x13A PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0xC2B JUMP JUMPDEST PUSH2 0x343 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDE JUMP JUMPDEST PUSH2 0x13A PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x3D0 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x3DB JUMP JUMPDEST PUSH2 0x10F PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF6 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0xC91 JUMP JUMPDEST PUSH2 0x408 JUMP JUMPDEST PUSH2 0xEF PUSH2 0x456 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x1B4 CALLDATASIZE PUSH1 0x4 PUSH2 0xCAC JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x4FA JUMP JUMPDEST PUSH2 0xEF PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0xBF6 JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x24C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x267 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x27C SWAP1 PUSH2 0xE0C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2A8 SWAP1 PUSH2 0xE0C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2CA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2F5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2D8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30A DUP3 PUSH2 0x5DC JUMP JUMPDEST PUSH2 0x327 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34E DUP3 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x382 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x3A2 JUMPI POP PUSH2 0x3A0 DUP2 CALLER PUSH2 0x1ED JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3CB DUP4 DUP4 DUP4 PUSH2 0x607 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x3CB DUP4 DUP4 DUP4 PUSH2 0x663 JUMP JUMPDEST PUSH2 0x3CB DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x4FA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x401 DUP3 PUSH2 0x84F JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x27C SWAP1 PUSH2 0xE0C JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x48E JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x505 DUP5 DUP5 DUP5 PUSH2 0x663 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0x527 JUMPI POP PUSH2 0x525 DUP5 DUP5 DUP5 DUP5 PUSH2 0x969 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x556 DUP3 PUSH2 0x5DC JUMP JUMPDEST PUSH2 0x573 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x58A PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x5AA JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x5D5 JUMP JUMPDEST DUP1 PUSH2 0x5B4 DUP5 PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5C5 SWAP3 SWAP2 SWAP1 PUSH2 0xE46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x267 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66E DUP3 PUSH2 0x84F JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ DUP1 PUSH2 0x6C3 JUMPI POP PUSH2 0x6C3 DUP6 CALLER PUSH2 0x1ED JUMP JUMPDEST DUP1 PUSH2 0x6DE JUMPI POP CALLER PUSH2 0x6D3 DUP5 PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0x6FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x725 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x731 PUSH1 0x0 DUP5 DUP8 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR DUP4 SSTORE DUP8 ADD DUP1 DUP5 MSTORE SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 AND PUSH2 0x804 JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0x804 JUMPI DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR OR DUP2 SSTORE JUMPDEST POP POP POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x950 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x94E JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x8E5 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x949 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8E5 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x99E SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xE75 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x9D9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x9D6 SWAP2 DUP2 ADD SWAP1 PUSH2 0xEB2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA37 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA0C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xA2F JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0xA7C JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xAA6 JUMPI DUP1 PUSH2 0xA90 DUP2 PUSH2 0xEE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xA9F SWAP1 POP PUSH1 0xA DUP4 PUSH2 0xF14 JUMP JUMPDEST SWAP2 POP PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAC0 JUMPI PUSH2 0xAC0 PUSH2 0xCE8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAEA JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xA4D JUMPI PUSH2 0xAFF PUSH1 0x1 DUP4 PUSH2 0xF28 JUMP JUMPDEST SWAP2 POP PUSH2 0xB0C PUSH1 0xA DUP7 PUSH2 0xF3F JUMP JUMPDEST PUSH2 0xB17 SWAP1 PUSH1 0x30 PUSH2 0xF53 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB2C JUMPI PUSH2 0xB2C PUSH2 0xF6B JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xB4E PUSH1 0xA DUP7 PUSH2 0xF14 JUMP JUMPDEST SWAP5 POP PUSH2 0xAEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x5D5 DUP2 PUSH2 0xB55 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBA6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB8E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x545 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xBCF DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xB8B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5D5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC47 DUP4 PUSH2 0xC0F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC73 DUP5 PUSH2 0xC0F JUMP JUMPDEST SWAP3 POP PUSH2 0xC81 PUSH1 0x20 DUP6 ADD PUSH2 0xC0F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5D5 DUP3 PUSH2 0xC0F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC8 DUP4 PUSH2 0xC0F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD1D DUP6 PUSH2 0xC0F JUMP JUMPDEST SWAP4 POP PUSH2 0xD2B PUSH1 0x20 DUP7 ADD PUSH2 0xC0F JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xD4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xD74 JUMPI PUSH2 0xD74 PUSH2 0xCE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xD9C JUMPI PUSH2 0xD9C PUSH2 0xCE8 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xDB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDF5 DUP4 PUSH2 0xC0F JUMP JUMPDEST SWAP2 POP PUSH2 0xE03 PUSH1 0x20 DUP5 ADD PUSH2 0xC0F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xE20 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xE40 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xE58 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xB8B JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xE6C DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xB8B JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xEA8 SWAP1 DUP4 ADD DUP5 PUSH2 0xBB7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x5D5 DUP2 PUSH2 0xB55 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xEF7 JUMPI PUSH2 0xEF7 PUSH2 0xECF JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF23 JUMPI PUSH2 0xF23 PUSH2 0xEFE JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xF3A JUMPI PUSH2 0xF3A PUSH2 0xECF JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF4E JUMPI PUSH2 0xF4E PUSH2 0xEFE JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF66 JUMPI PUSH2 0xF66 PUSH2 0xECF JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE SUB 0xC 0xDD 0xB0 SELFBALANCE CALLVALUE 0xB6 0xDB CALLVALUE MLOAD GASPRICE PUSH14 0xE4E316561DF08331FCDC5D014C33 LOG1 0xDD 0xC7 0xEC 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "1464:20331:11:-:0;;;3357:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3423:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;3446:17:11;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;3659:7:11;3473:31;;-1:-1:-1;1464:20331:11;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1464:20331:11;;;-1:-1:-1;1464:20331:11;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:12;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:12;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:12;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:12:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:12;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;1464:20331:11;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfers_2332": {
									"entryPoint": null,
									"id": 2332,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_2251": {
									"entryPoint": 1543,
									"id": 2251,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_baseURI_1448": {
									"entryPoint": null,
									"id": 1448,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_beforeTokenTransfers_2319": {
									"entryPoint": null,
									"id": 2319,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkContractOnERC721Received_2306": {
									"entryPoint": 2409,
									"id": 2306,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_exists_1665": {
									"entryPoint": 1500,
									"id": 1665,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_msgSender_572": {
									"entryPoint": null,
									"id": 572,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownershipOf_1361": {
									"entryPoint": 2127,
									"id": 1361,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_startTokenId_1136": {
									"entryPoint": null,
									"id": 1136,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transfer_2034": {
									"entryPoint": 1635,
									"id": 2034,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_1494": {
									"entryPoint": 835,
									"id": 1494,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_1223": {
									"entryPoint": 1032,
									"id": 1223,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_1516": {
									"entryPoint": 767,
									"id": 1516,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isApprovedForAll_1568": {
									"entryPoint": null,
									"id": 1568,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_283": {
									"entryPoint": null,
									"id": 283,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_1386": {
									"entryPoint": 621,
									"id": 1386,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_1376": {
									"entryPoint": 1014,
									"id": 1376,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFrom_1605": {
									"entryPoint": 987,
									"id": 1605,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_1641": {
									"entryPoint": 1274,
									"id": 1641,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_1550": {
									"entryPoint": 1125,
									"id": 1550,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_1195": {
									"entryPoint": 539,
									"id": 1195,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_882": {
									"entryPoint": null,
									"id": 882,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_1396": {
									"entryPoint": 1110,
									"id": 1396,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_741": {
									"entryPoint": 2645,
									"id": 741,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_1439": {
									"entryPoint": 1355,
									"id": 1439,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_1151": {
									"entryPoint": null,
									"id": 1151,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1586": {
									"entryPoint": 976,
									"id": 1586,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 3087,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3217,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3545,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3157,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 3326,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 3244,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3115,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 2926,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 3762,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3062,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 2999,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 3654,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 3701,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3043,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3923,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3860,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3880,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 2955,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3596,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 3813,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint256": {
									"entryPoint": 3903,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3791,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 3838,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 3947,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3304,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bytes4": {
									"entryPoint": 2901,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7417:12",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:12",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "58:87:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "81:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "92:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "103:3:12",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "108:10:12",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "99:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "99:20:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "88:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "88:32:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "78:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "78:43:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "71:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "71:51:12"
															},
															"nodeType": "YulIf",
															"src": "68:71:12"
														}
													]
												},
												"name": "validator_revert_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "47:5:12",
														"type": ""
													}
												],
												"src": "14:131:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "219:176:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "265:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "274:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "277:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "267:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "267:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "267:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "240:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "249:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "236:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "236:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "261:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:32:12"
															},
															"nodeType": "YulIf",
															"src": "229:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "290:36:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:23:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "294:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "359:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "335:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:30:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "374:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "384:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "374:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "185:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "196:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "208:6:12",
														"type": ""
													}
												],
												"src": "150:245:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "495:92:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "505:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "517:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "528:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "513:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "513:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "505:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "547:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "572:6:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "565:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "565:14:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "558:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "558:22:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "540:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:41:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "464:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "475:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "486:4:12",
														"type": ""
													}
												],
												"src": "400:187:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "645:205:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "655:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "664:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "659:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "724:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "749:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "754:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "745:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "745:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "768:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "773:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "764:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "764:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "758:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "758:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "738:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "738:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "738:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "685:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "688:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "682:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "682:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "696:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "698:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "707:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "710:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "703:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "703:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "698:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "678:3:12",
																"statements": []
															},
															"src": "674:113:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "813:31:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "826:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "831:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "822:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "822:16:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "840:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "815:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "815:27:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "815:27:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "802:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "805:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "799:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "799:13:12"
															},
															"nodeType": "YulIf",
															"src": "796:48:12"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "623:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "628:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "633:6:12",
														"type": ""
													}
												],
												"src": "592:258:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "905:208:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "915:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "935:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "929:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "929:12:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "919:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "957:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "962:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "950:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "950:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "950:19:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1004:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1011:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1000:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1000:16:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1022:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1027:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1018:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1018:14:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1034:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "978:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "978:63:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "978:63:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1050:57:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1065:3:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1078:6:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1086:2:12",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1074:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1074:15:12"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1095:2:12",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1091:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1091:7:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1070:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1070:29:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1061:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1061:39:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1102:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1057:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1057:50:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1050:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "882:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "889:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "897:3:12",
														"type": ""
													}
												],
												"src": "855:258:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1239:99:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1256:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1267:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1249:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1249:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1249:21:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1279:53:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1305:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1317:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1328:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1313:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1313:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "1287:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1287:45:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1279:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1208:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1219:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1230:4:12",
														"type": ""
													}
												],
												"src": "1118:220:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1413:110:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1459:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1468:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1471:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1461:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1461:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1461:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1434:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1443:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1430:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1430:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1455:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1426:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1426:32:12"
															},
															"nodeType": "YulIf",
															"src": "1423:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1484:33:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1507:9:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1494:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:23:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1484:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1379:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1390:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1402:6:12",
														"type": ""
													}
												],
												"src": "1343:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1629:102:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1639:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1651:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1662:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1647:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1639:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1681:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1696:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1712:3:12",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1717:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1708:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1708:11:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1721:1:12",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1704:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1704:19:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1692:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1692:32:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1674:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1674:51:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1674:51:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1598:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1609:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1620:4:12",
														"type": ""
													}
												],
												"src": "1528:203:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1785:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1795:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1817:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1804:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1804:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1795:5:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1887:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1896:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1899:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1889:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1889:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1889:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1846:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1857:5:12"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1872:3:12",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1877:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1868:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1868:11:12"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1881:1:12",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1864:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1864:19:12"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1853:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1853:31:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1843:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1843:42:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1836:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1836:50:12"
															},
															"nodeType": "YulIf",
															"src": "1833:70:12"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1764:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1775:5:12",
														"type": ""
													}
												],
												"src": "1736:173:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2001:167:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2047:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2056:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2059:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2049:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2049:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2049:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2022:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2031:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2018:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2018:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2043:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2014:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2014:32:12"
															},
															"nodeType": "YulIf",
															"src": "2011:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2072:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2101:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2082:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2082:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2072:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2120:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2147:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2158:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2143:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2143:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2130:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2130:32:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2120:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1959:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1970:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1982:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1990:6:12",
														"type": ""
													}
												],
												"src": "1914:254:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2274:76:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2284:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2296:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2307:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2292:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2292:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2284:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2326:9:12"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2337:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2319:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2319:25:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2319:25:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2243:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2254:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2265:4:12",
														"type": ""
													}
												],
												"src": "2173:177:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2459:224:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2505:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2514:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2517:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2507:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2507:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2507:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2480:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2489:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2476:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2476:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2501:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2472:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2472:32:12"
															},
															"nodeType": "YulIf",
															"src": "2469:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2530:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2559:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2540:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2540:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2530:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2578:48:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2611:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2622:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2607:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2607:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2588:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2588:38:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2578:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2635:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2662:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2673:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2658:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2658:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2645:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2645:32:12"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2635:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2409:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2420:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2432:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2440:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2448:6:12",
														"type": ""
													}
												],
												"src": "2355:328:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2758:116:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2804:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2813:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2816:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2806:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2806:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2806:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2779:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2788:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2775:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2775:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2800:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2771:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2771:32:12"
															},
															"nodeType": "YulIf",
															"src": "2768:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2829:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2858:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2839:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2839:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2829:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2724:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2735:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2747:6:12",
														"type": ""
													}
												],
												"src": "2688:186:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2963:263:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3009:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3018:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3021:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3011:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3011:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3011:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2984:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2993:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2980:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2980:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3005:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2976:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2976:32:12"
															},
															"nodeType": "YulIf",
															"src": "2973:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3034:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3063:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3044:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3044:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3034:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3082:45:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3095:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3095:32:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3086:5:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3180:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3189:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3192:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3182:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3182:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3182:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3149:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3170:5:12"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3163:6:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3163:13:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3156:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3156:21:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3146:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3146:32:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3139:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3139:40:12"
															},
															"nodeType": "YulIf",
															"src": "3136:60:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3205:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3215:5:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3205:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2921:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2932:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2944:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2952:6:12",
														"type": ""
													}
												],
												"src": "2879:347:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3263:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3280:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3287:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3292:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3283:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3283:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3320:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3323:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3313:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3313:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3313:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3344:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3347:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3337:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3337:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3337:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3231:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3493:1008:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3540:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3549:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3552:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3542:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3542:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3542:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3514:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3523:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3510:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3510:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3535:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3506:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3506:33:12"
															},
															"nodeType": "YulIf",
															"src": "3503:53:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3565:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3594:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3575:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3575:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3565:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3613:48:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3646:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3657:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3642:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3642:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3623:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3623:38:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3613:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3670:42:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3697:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3708:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3693:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3693:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3680:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3680:32:12"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3670:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3721:46:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3752:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3763:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3748:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3748:18:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3735:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3735:32:12"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3725:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3776:28:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3794:2:12",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3798:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3790:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3790:10:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3802:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3786:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3786:18:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3780:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3831:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3840:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3843:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3833:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3833:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3833:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3819:6:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3827:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3816:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3816:14:12"
															},
															"nodeType": "YulIf",
															"src": "3813:34:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3856:32:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3870:9:12"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3881:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3866:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3866:22:12"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3860:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3936:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3945:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3948:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3938:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3938:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3938:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3915:2:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3919:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3911:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3911:13:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3926:7:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3907:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3907:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3900:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3900:35:12"
															},
															"nodeType": "YulIf",
															"src": "3897:55:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3961:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3984:2:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3971:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3971:16:12"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3965:2:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4010:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4012:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4012:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4012:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4002:2:12"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4006:2:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3999:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3999:10:12"
															},
															"nodeType": "YulIf",
															"src": "3996:36:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4041:17:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4055:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "4051:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4051:7:12"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "4045:2:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4067:23:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4087:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4081:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4081:9:12"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "4071:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4099:71:12",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4121:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "4145:2:12"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4149:4:12",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4141:3:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4141:13:12"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "4156:2:12"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "4137:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4137:22:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4161:2:12",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4133:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4133:31:12"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4166:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4129:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4129:40:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4117:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:53:12"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "4103:10:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4229:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4231:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4231:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4231:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4188:10:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4200:2:12"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4185:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4185:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4208:10:12"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4220:6:12"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4205:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4205:22:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4182:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4182:46:12"
															},
															"nodeType": "YulIf",
															"src": "4179:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4267:2:12",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4271:10:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4260:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4260:22:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4260:22:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4298:6:12"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4306:2:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4291:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4291:18:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4291:18:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4355:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4364:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4367:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4357:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4357:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4357:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4332:2:12"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4336:2:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4328:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4328:11:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4341:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4324:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4324:20:12"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4346:7:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4321:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4321:33:12"
															},
															"nodeType": "YulIf",
															"src": "4318:53:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4397:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4405:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4393:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4393:15:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4414:2:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4418:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4410:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4410:11:12"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4423:2:12"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4380:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4380:46:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4380:46:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "4450:6:12"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4458:2:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4446:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4446:15:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4463:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4442:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4442:24:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4468:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4435:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4435:35:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4435:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4479:16:12",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "4489:6:12"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4479:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3435:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3446:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3458:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3466:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3474:6:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3482:6:12",
														"type": ""
													}
												],
												"src": "3363:1138:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4593:173:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4639:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4648:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4651:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4641:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4641:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4641:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4614:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4623:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4610:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4610:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4635:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4606:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4606:32:12"
															},
															"nodeType": "YulIf",
															"src": "4603:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4664:39:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4693:9:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4674:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4674:29:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4664:6:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4712:48:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4745:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4756:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4741:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4741:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4722:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4722:38:12"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4712:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4551:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4562:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4574:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4582:6:12",
														"type": ""
													}
												],
												"src": "4506:260:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4826:325:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4836:22:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4850:1:12",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4853:4:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4846:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4846:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4836:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4867:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4897:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4903:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4893:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4893:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4871:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4944:31:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4946:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4960:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4968:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4956:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4956:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4946:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4924:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4917:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4917:26:12"
															},
															"nodeType": "YulIf",
															"src": "4914:61:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5034:111:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5055:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5062:3:12",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5067:10:12",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5058:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5058:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5048:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5048:31:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5048:31:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5099:1:12",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5102:4:12",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5092:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5092:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5092:15:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5127:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5130:4:12",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5120:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5120:15:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5120:15:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4990:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5013:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5021:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5010:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5010:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4987:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4987:38:12"
															},
															"nodeType": "YulIf",
															"src": "4984:161:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4806:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4815:6:12",
														"type": ""
													}
												],
												"src": "4771:380:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5343:283:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5353:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5373:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5367:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5367:13:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5357:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5415:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5423:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5411:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5411:17:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5430:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5435:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5389:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5389:53:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5389:53:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5451:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5468:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5473:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5464:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5464:16:12"
															},
															"variables": [
																{
																	"name": "end_1",
																	"nodeType": "YulTypedName",
																	"src": "5455:5:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5489:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5511:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5505:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5505:13:12"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "5493:8:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5553:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5561:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5549:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5549:17:12"
																	},
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "5568:5:12"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "5575:8:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5527:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5527:57:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5527:57:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5593:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "5604:5:12"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "5611:8:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5600:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5600:20:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5593:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5311:3:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5316:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5324:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5335:3:12",
														"type": ""
													}
												],
												"src": "5156:470:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5834:286:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5844:29:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5862:3:12",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5867:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5858:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5858:11:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5871:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5854:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5854:19:12"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5848:2:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5889:9:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5904:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5912:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5900:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5900:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5882:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5882:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5882:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5936:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5947:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5932:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5932:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5956:6:12"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5964:2:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5952:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5952:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5925:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5925:43:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5925:43:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5988:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5999:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5984:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5984:18:12"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6004:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5977:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5977:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5977:34:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6031:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6042:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6027:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6027:18:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6047:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6020:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6020:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6020:31:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6060:54:12",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "6086:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6098:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6109:3:12",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6094:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6094:19:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "6068:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6068:46:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6060:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5779:9:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5790:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5798:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5806:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5814:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5825:4:12",
														"type": ""
													}
												],
												"src": "5631:489:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6205:169:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6251:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6260:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6263:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6253:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6253:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6253:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6226:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6235:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6222:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6222:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6247:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6218:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6218:32:12"
															},
															"nodeType": "YulIf",
															"src": "6215:52:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6276:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6295:9:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6289:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6289:16:12"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "6280:5:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6338:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "6314:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6314:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6314:30:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6353:15:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6363:5:12"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6353:6:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6171:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6182:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6194:6:12",
														"type": ""
													}
												],
												"src": "6125:249:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6411:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6428:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6435:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6440:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6431:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6431:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6421:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6421:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6421:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6468:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6471:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6461:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6461:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6461:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6492:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6495:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6485:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6485:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6485:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6379:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6558:88:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6589:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6591:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6591:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6591:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6574:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6585:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "6581:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6581:6:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6571:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6571:17:12"
															},
															"nodeType": "YulIf",
															"src": "6568:43:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6620:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6631:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6638:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6627:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6627:13:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "6620:3:12"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6540:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "6550:3:12",
														"type": ""
													}
												],
												"src": "6511:135:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6683:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6700:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6707:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6712:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6703:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6703:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6693:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6693:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6693:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6740:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6743:4:12",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6733:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6733:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6733:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6764:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6767:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6757:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6757:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6757:15:12"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "6651:127:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6829:74:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6852:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "6854:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6854:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6854:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6849:1:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6842:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6842:9:12"
															},
															"nodeType": "YulIf",
															"src": "6839:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6883:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6892:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6895:1:12"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "6888:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6888:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6883:1:12"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6814:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6817:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "6823:1:12",
														"type": ""
													}
												],
												"src": "6783:120:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6957:76:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6979:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6981:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6981:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6981:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6973:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6976:1:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6970:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6970:8:12"
															},
															"nodeType": "YulIf",
															"src": "6967:34:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7010:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7022:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7025:1:12"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7018:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7018:9:12"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "7010:4:12"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6939:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6942:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "6948:4:12",
														"type": ""
													}
												],
												"src": "6908:125:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7076:74:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7099:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "7101:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7101:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7101:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7096:1:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7089:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7089:9:12"
															},
															"nodeType": "YulIf",
															"src": "7086:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7130:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7139:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7142:1:12"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "7135:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7135:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7130:1:12"
																}
															]
														}
													]
												},
												"name": "mod_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7061:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7064:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "7070:1:12",
														"type": ""
													}
												],
												"src": "7038:112:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7203:80:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7230:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7232:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7232:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7232:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7219:1:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7226:1:12"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7222:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7222:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7216:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7216:13:12"
															},
															"nodeType": "YulIf",
															"src": "7213:39:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7261:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7272:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7275:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7268:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7268:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7261:3:12"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7186:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7189:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "7195:3:12",
														"type": ""
													}
												],
												"src": "7155:128:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7320:95:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7337:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7344:3:12",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7349:10:12",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7340:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7340:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7330:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7330:31:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7330:31:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7377:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7380:4:12",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7370:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7370:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7370:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7401:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7404:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7394:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7394:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7394:15:12"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "7288:127:12"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1DF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0xB6E JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDE SWAP2 SWAP1 PUSH2 0xBE3 JUMP JUMPDEST PUSH2 0x10F PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0xBF6 JUMP JUMPDEST PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDE JUMP JUMPDEST PUSH2 0x13A PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0xC2B JUMP JUMPDEST PUSH2 0x343 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDE JUMP JUMPDEST PUSH2 0x13A PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x3D0 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x3DB JUMP JUMPDEST PUSH2 0x10F PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF6 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0xC91 JUMP JUMPDEST PUSH2 0x408 JUMP JUMPDEST PUSH2 0xEF PUSH2 0x456 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x1B4 CALLDATASIZE PUSH1 0x4 PUSH2 0xCAC JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x4FA JUMP JUMPDEST PUSH2 0xEF PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0xBF6 JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x24C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x267 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x27C SWAP1 PUSH2 0xE0C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2A8 SWAP1 PUSH2 0xE0C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2CA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2F5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2D8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30A DUP3 PUSH2 0x5DC JUMP JUMPDEST PUSH2 0x327 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34E DUP3 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x382 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x3A2 JUMPI POP PUSH2 0x3A0 DUP2 CALLER PUSH2 0x1ED JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3CB DUP4 DUP4 DUP4 PUSH2 0x607 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x3CB DUP4 DUP4 DUP4 PUSH2 0x663 JUMP JUMPDEST PUSH2 0x3CB DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x4FA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x401 DUP3 PUSH2 0x84F JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x27C SWAP1 PUSH2 0xE0C JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x48E JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x505 DUP5 DUP5 DUP5 PUSH2 0x663 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0x527 JUMPI POP PUSH2 0x525 DUP5 DUP5 DUP5 DUP5 PUSH2 0x969 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x556 DUP3 PUSH2 0x5DC JUMP JUMPDEST PUSH2 0x573 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x58A PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x5AA JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x5D5 JUMP JUMPDEST DUP1 PUSH2 0x5B4 DUP5 PUSH2 0xA55 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5C5 SWAP3 SWAP2 SWAP1 PUSH2 0xE46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x267 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66E DUP3 PUSH2 0x84F JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ DUP1 PUSH2 0x6C3 JUMPI POP PUSH2 0x6C3 DUP6 CALLER PUSH2 0x1ED JUMP JUMPDEST DUP1 PUSH2 0x6DE JUMPI POP CALLER PUSH2 0x6D3 DUP5 PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0x6FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x725 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x731 PUSH1 0x0 DUP5 DUP8 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR DUP4 SSTORE DUP8 ADD DUP1 DUP5 MSTORE SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 AND PUSH2 0x804 JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0x804 JUMPI DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR OR DUP2 SSTORE JUMPDEST POP POP POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x950 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x94E JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x8E5 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x949 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8E5 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x99E SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xE75 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x9D9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x9D6 SWAP2 DUP2 ADD SWAP1 PUSH2 0xEB2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA37 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA0C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xA2F JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0xA7C JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xAA6 JUMPI DUP1 PUSH2 0xA90 DUP2 PUSH2 0xEE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xA9F SWAP1 POP PUSH1 0xA DUP4 PUSH2 0xF14 JUMP JUMPDEST SWAP2 POP PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAC0 JUMPI PUSH2 0xAC0 PUSH2 0xCE8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAEA JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xA4D JUMPI PUSH2 0xAFF PUSH1 0x1 DUP4 PUSH2 0xF28 JUMP JUMPDEST SWAP2 POP PUSH2 0xB0C PUSH1 0xA DUP7 PUSH2 0xF3F JUMP JUMPDEST PUSH2 0xB17 SWAP1 PUSH1 0x30 PUSH2 0xF53 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB2C JUMPI PUSH2 0xB2C PUSH2 0xF6B JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xB4E PUSH1 0xA DUP7 PUSH2 0xF14 JUMP JUMPDEST SWAP5 POP PUSH2 0xAEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x5D5 DUP2 PUSH2 0xB55 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBA6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB8E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x545 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xBCF DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xB8B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5D5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC47 DUP4 PUSH2 0xC0F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC73 DUP5 PUSH2 0xC0F JUMP JUMPDEST SWAP3 POP PUSH2 0xC81 PUSH1 0x20 DUP6 ADD PUSH2 0xC0F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5D5 DUP3 PUSH2 0xC0F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC8 DUP4 PUSH2 0xC0F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD1D DUP6 PUSH2 0xC0F JUMP JUMPDEST SWAP4 POP PUSH2 0xD2B PUSH1 0x20 DUP7 ADD PUSH2 0xC0F JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xD4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xD74 JUMPI PUSH2 0xD74 PUSH2 0xCE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xD9C JUMPI PUSH2 0xD9C PUSH2 0xCE8 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xDB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDF5 DUP4 PUSH2 0xC0F JUMP JUMPDEST SWAP2 POP PUSH2 0xE03 PUSH1 0x20 DUP5 ADD PUSH2 0xC0F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xE20 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xE40 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xE58 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xB8B JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xE6C DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xB8B JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xEA8 SWAP1 DUP4 ADD DUP5 PUSH2 0xBB7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x5D5 DUP2 PUSH2 0xB55 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xEF7 JUMPI PUSH2 0xEF7 PUSH2 0xECF JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF23 JUMPI PUSH2 0xF23 PUSH2 0xEFE JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xF3A JUMPI PUSH2 0xF3A PUSH2 0xECF JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF4E JUMPI PUSH2 0xF4E PUSH2 0xEFE JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF66 JUMPI PUSH2 0xF66 PUSH2 0xECF JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE SUB 0xC 0xDD 0xB0 SELFBALANCE CALLVALUE 0xB6 0xDB CALLVALUE MLOAD GASPRICE PUSH14 0xE4E316561DF08331FCDC5D014C33 LOG1 0xDD 0xC7 0xEC 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "1464:20331:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4551:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:12;;558:22;540:41;;528:2;513:18;4551:300:11;;;;;;;;7579:98;;;:::i;:::-;;;;;;;:::i;9035:200::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:12;;;1674:51;;1662:2;1647:18;9035:200:11;1528:203:12;8612:362:11;;;;;;:::i;:::-;;:::i;:::-;;3822:297;4072:12;;3866:7;4056:13;:28;3822:297;;;2319:25:12;;;2307:2;2292:18;3822:297:11;2173:177:12;9874:164:11;;;;;;:::i;:::-;;:::i;10104:179::-;;;;;;:::i;:::-;;:::i;7394:123::-;;;;;;:::i;:::-;;:::i;4910:203::-;;;;;;:::i;:::-;;:::i;7741:102::-;;;:::i;9302:282::-;;;;;;:::i;:::-;;:::i;10349:359::-;;;;;;:::i;:::-;;:::i;7909:313::-;;;;;;:::i;:::-;;:::i;9650:162::-;;;;;;:::i;:::-;-1:-1:-1;;;;;9770:25:11;;;9747:4;9770:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;9650:162;4551:300;4653:4;-1:-1:-1;;;;;;4688:40:11;;-1:-1:-1;;;4688:40:11;;:104;;-1:-1:-1;;;;;;;4744:48:11;;-1:-1:-1;;;4744:48:11;4688:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:8;;;4808:36:11;4669:175;4551:300;-1:-1:-1;;4551:300:11:o;7579:98::-;7633:13;7665:5;7658:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7579:98;:::o;9035:200::-;9103:7;9127:16;9135:7;9127;:16::i;:::-;9122:64;;9152:34;;-1:-1:-1;;;9152:34:11;;;;;;;;;;;9122:64;-1:-1:-1;9204:24:11;;;;:15;:24;;;;;;-1:-1:-1;;;;;9204:24:11;;9035:200::o;8612:362::-;8684:13;8700:24;8716:7;8700:15;:24::i;:::-;8684:40;;8744:5;-1:-1:-1;;;;;8738:11:11;:2;-1:-1:-1;;;;;8738:11:11;;8734:48;;8758:24;;-1:-1:-1;;;8758:24:11;;;;;;;;;;;8734:48;719:10:5;-1:-1:-1;;;;;8797:21:11;;;;;;:63;;-1:-1:-1;8823:37:11;8840:5;719:10:5;9650:162:11;:::i;8823:37::-;8822:38;8797:63;8793:136;;;8883:35;;-1:-1:-1;;;8883:35:11;;;;;;;;;;;8793:136;8939:28;8948:2;8952:7;8961:5;8939:8;:28::i;:::-;8674:300;8612:362;;:::o;9874:164::-;10003:28;10013:4;10019:2;10023:7;10003:9;:28::i;10104:179::-;10237:39;10254:4;10260:2;10264:7;10237:39;;;;;;;;;;;;:16;:39::i;7394:123::-;7458:7;7484:21;7497:7;7484:12;:21::i;:::-;:26;;7394:123;-1:-1:-1;;7394:123:11:o;4910:203::-;4974:7;-1:-1:-1;;;;;4997:19:11;;4993:60;;5025:28;;-1:-1:-1;;;5025:28:11;;;;;;;;;;;4993:60;-1:-1:-1;;;;;;5078:19:11;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;5078:27:11;;4910:203::o;7741:102::-;7797:13;7829:7;7822:14;;;;;:::i;9302:282::-;719:10:5;-1:-1:-1;;;;;9400:24:11;;;9396:54;;9433:17;;-1:-1:-1;;;9433:17:11;;;;;;;;;;;9396:54;719:10:5;9461:32:11;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;9461:42:11;;;;;;;;;;;;:53;;-1:-1:-1;;9461:53:11;;;;;;;;;;9529:48;;540:41:12;;;9461:42:11;;719:10:5;9529:48:11;;513:18:12;9529:48:11;;;;;;;9302:282;;:::o;10349:359::-;10510:28;10520:4;10526:2;10530:7;10510:9;:28::i;:::-;-1:-1:-1;;;;;10552:13:11;;1465:19:4;:23;;10552:76:11;;;;;10572:56;10603:4;10609:2;10613:7;10622:5;10572:30;:56::i;:::-;10571:57;10552:76;10548:154;;;10651:40;;-1:-1:-1;;;10651:40:11;;;;;;;;;;;10548:154;10349:359;;;;:::o;7909:313::-;7982:13;8012:16;8020:7;8012;:16::i;:::-;8007:59;;8037:29;;-1:-1:-1;;;8037:29:11;;;;;;;;;;;8007:59;8077:21;8101:10;8539:9;;;;;;;;;-1:-1:-1;8539:9:11;;;8463:92;8101:10;8077:34;;8134:7;8128:21;8153:1;8128:26;:87;;;;;;;;;;;;;;;;;8181:7;8190:18;:7;:16;:18::i;:::-;8164:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8128:87;8121:94;7909:313;-1:-1:-1;;;7909:313:11:o;10954:172::-;11011:4;11074:13;;11064:7;:23;11034:85;;;;-1:-1:-1;;11092:20:11;;;;:11;:20;;;;;:27;-1:-1:-1;;;11092:27:11;;;;11091:28;;10954:172::o;18894:189::-;19004:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;19004:29:11;-1:-1:-1;;;;;19004:29:11;;;;;;;;;19048:28;;19004:24;;19048:28;;;;;;;18894:189;;;:::o;13964:2082::-;14074:35;14112:21;14125:7;14112:12;:21::i;:::-;14074:59;;14170:4;-1:-1:-1;;;;;14148:26:11;:13;:18;;;-1:-1:-1;;;;;14148:26:11;;14144:67;;14183:28;;-1:-1:-1;;;14183:28:11;;;;;;;;;;;14144:67;14222:22;719:10:5;-1:-1:-1;;;;;14248:20:11;;;;:72;;-1:-1:-1;14284:36:11;14301:4;719:10:5;9650:162:11;:::i;14284:36::-;14248:124;;;-1:-1:-1;719:10:5;14336:20:11;14348:7;14336:11;:20::i;:::-;-1:-1:-1;;;;;14336:36:11;;14248:124;14222:151;;14389:17;14384:66;;14415:35;;-1:-1:-1;;;14415:35:11;;;;;;;;;;;14384:66;-1:-1:-1;;;;;14464:16:11;;14460:52;;14489:23;;-1:-1:-1;;;14489:23:11;;;;;;;;;;;14460:52;14628:35;14645:1;14649:7;14658:4;14628:8;:35::i;:::-;-1:-1:-1;;;;;14953:18:11;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14953:31:11;;;-1:-1:-1;;;;;14953:31:11;;;-1:-1:-1;;14953:31:11;;;;;;;14998:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14998:29:11;;;;;;;;;;;15076:20;;;:11;:20;;;;;;15110:18;;-1:-1:-1;;;;;;15142:49:11;;;;-1:-1:-1;;;15175:15:11;15142:49;;;;;;;;;;15461:11;;15520:24;;;;;15562:13;;15076:20;;15520:24;;15562:13;15558:377;;15769:13;;15754:11;:28;15750:171;;15806:20;;15874:28;;;;-1:-1:-1;;;;;15848:54:11;-1:-1:-1;;;15848:54:11;-1:-1:-1;;;;;;15848:54:11;;;-1:-1:-1;;;;;15806:20:11;;15848:54;;;;15750:171;14929:1016;;;15979:7;15975:2;-1:-1:-1;;;;;15960:27:11;15969:4;-1:-1:-1;;;;;15960:27:11;;;;;;;;;;;14064:1982;;13964:2082;;;:::o;6253:1084::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;6363:7:11;6443:13;;6436:4;:20;6405:868;;;6476:31;6510:17;;;:11;:17;;;;;;;;;6476:51;;;;;;;;;-1:-1:-1;;;;;6476:51:11;;;;-1:-1:-1;;;6476:51:11;;-1:-1:-1;;;;;6476:51:11;;;;;;;;-1:-1:-1;;;6476:51:11;;;;;;;;;;;;;;6545:714;;6594:14;;-1:-1:-1;;;;;6594:28:11;;6590:99;;6657:9;6253:1084;-1:-1:-1;;;6253:1084:11:o;6590:99::-;-1:-1:-1;;;7025:6:11;7069:17;;;;:11;:17;;;;;;;;;7057:29;;;;;;;;;-1:-1:-1;;;;;7057:29:11;;;;;-1:-1:-1;;;7057:29:11;;-1:-1:-1;;;;;7057:29:11;;;;;;;;-1:-1:-1;;;7057:29:11;;;;;;;;;;;;;7116:28;7112:107;;7183:9;6253:1084;-1:-1:-1;;;6253:1084:11:o;7112:107::-;6986:255;;;6458:815;6405:868;7299:31;;-1:-1:-1;;;7299:31:11;;;;;;;;;;;19564:650;19742:72;;-1:-1:-1;;;19742:72:11;;19722:4;;-1:-1:-1;;;;;19742:36:11;;;;;:72;;719:10:5;;19793:4:11;;19799:7;;19808:5;;19742:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19742:72:11;;;;;;;;-1:-1:-1;;19742:72:11;;;;;;;;;;;;:::i;:::-;;;19738:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19973:6;:13;19990:1;19973:18;19969:229;;20018:40;;-1:-1:-1;;;20018:40:11;;;;;;;;;;;19969:229;20158:6;20152:13;20143:6;20139:2;20135:15;20128:38;19738:470;-1:-1:-1;;;;;;19860:55:11;-1:-1:-1;;;19860:55:11;;-1:-1:-1;19738:470:11;19564:650;;;;;;:::o;328:703:7:-;384:13;601:5;610:1;601:10;597:51;;-1:-1:-1;;627:10:7;;;;;;;;;;;;-1:-1:-1;;;627:10:7;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:7;;-1:-1:-1;773:2:7;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;-1:-1:-1;;;;;817:17:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:7;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:7;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;902:56:7;;;;;;;;-1:-1:-1;972:11:7;981:2;972:11;;:::i;:::-;;;844:150;;14:131:12;-1:-1:-1;;;;;;88:32:12;;78:43;;68:71;;135:1;132;125:12;68:71;14:131;:::o;150:245::-;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:12;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:12;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:12:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:12;;1343:180;-1:-1:-1;1343:180:12:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:12;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:12:o;2355:328::-;2432:6;2440;2448;2501:2;2489:9;2480:7;2476:23;2472:32;2469:52;;;2517:1;2514;2507:12;2469:52;2540:29;2559:9;2540:29;:::i;:::-;2530:39;;2588:38;2622:2;2611:9;2607:18;2588:38;:::i;:::-;2578:48;;2673:2;2662:9;2658:18;2645:32;2635:42;;2355:328;;;;;:::o;2688:186::-;2747:6;2800:2;2788:9;2779:7;2775:23;2771:32;2768:52;;;2816:1;2813;2806:12;2768:52;2839:29;2858:9;2839:29;:::i;2879:347::-;2944:6;2952;3005:2;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3044:29;3063:9;3044:29;:::i;:::-;3034:39;;3123:2;3112:9;3108:18;3095:32;3170:5;3163:13;3156:21;3149:5;3146:32;3136:60;;3192:1;3189;3182:12;3136:60;3215:5;3205:15;;;2879:347;;;;;:::o;3231:127::-;3292:10;3287:3;3283:20;3280:1;3273:31;3323:4;3320:1;3313:15;3347:4;3344:1;3337:15;3363:1138;3458:6;3466;3474;3482;3535:3;3523:9;3514:7;3510:23;3506:33;3503:53;;;3552:1;3549;3542:12;3503:53;3575:29;3594:9;3575:29;:::i;:::-;3565:39;;3623:38;3657:2;3646:9;3642:18;3623:38;:::i;:::-;3613:48;-1:-1:-1;3708:2:12;3693:18;;3680:32;;-1:-1:-1;3763:2:12;3748:18;;3735:32;-1:-1:-1;;;;;3816:14:12;;;3813:34;;;3843:1;3840;3833:12;3813:34;3881:6;3870:9;3866:22;3856:32;;3926:7;3919:4;3915:2;3911:13;3907:27;3897:55;;3948:1;3945;3938:12;3897:55;3984:2;3971:16;4006:2;4002;3999:10;3996:36;;;4012:18;;:::i;:::-;4087:2;4081:9;4055:2;4141:13;;-1:-1:-1;;4137:22:12;;;4161:2;4133:31;4129:40;4117:53;;;4185:18;;;4205:22;;;4182:46;4179:72;;;4231:18;;:::i;:::-;4271:10;4267:2;4260:22;4306:2;4298:6;4291:18;4346:7;4341:2;4336;4332;4328:11;4324:20;4321:33;4318:53;;;4367:1;4364;4357:12;4318:53;4423:2;4418;4414;4410:11;4405:2;4397:6;4393:15;4380:46;4468:1;4463:2;4458;4450:6;4446:15;4442:24;4435:35;4489:6;4479:16;;;;;;;3363:1138;;;;;;;:::o;4506:260::-;4574:6;4582;4635:2;4623:9;4614:7;4610:23;4606:32;4603:52;;;4651:1;4648;4641:12;4603:52;4674:29;4693:9;4674:29;:::i;:::-;4664:39;;4722:38;4756:2;4745:9;4741:18;4722:38;:::i;:::-;4712:48;;4506:260;;;;;:::o;4771:380::-;4850:1;4846:12;;;;4893;;;4914:61;;4968:4;4960:6;4956:17;4946:27;;4914:61;5021:2;5013:6;5010:14;4990:18;4987:38;4984:161;;5067:10;5062:3;5058:20;5055:1;5048:31;5102:4;5099:1;5092:15;5130:4;5127:1;5120:15;4984:161;;4771:380;;;:::o;5156:470::-;5335:3;5373:6;5367:13;5389:53;5435:6;5430:3;5423:4;5415:6;5411:17;5389:53;:::i;:::-;5505:13;;5464:16;;;;5527:57;5505:13;5464:16;5561:4;5549:17;;5527:57;:::i;:::-;5600:20;;5156:470;-1:-1:-1;;;;5156:470:12:o;5631:489::-;-1:-1:-1;;;;;5900:15:12;;;5882:34;;5952:15;;5947:2;5932:18;;5925:43;5999:2;5984:18;;5977:34;;;6047:3;6042:2;6027:18;;6020:31;;;5825:4;;6068:46;;6094:19;;6086:6;6068:46;:::i;:::-;6060:54;5631:489;-1:-1:-1;;;;;;5631:489:12:o;6125:249::-;6194:6;6247:2;6235:9;6226:7;6222:23;6218:32;6215:52;;;6263:1;6260;6253:12;6215:52;6295:9;6289:16;6314:30;6338:5;6314:30;:::i;6379:127::-;6440:10;6435:3;6431:20;6428:1;6421:31;6471:4;6468:1;6461:15;6495:4;6492:1;6485:15;6511:135;6550:3;6571:17;;;6568:43;;6591:18;;:::i;:::-;-1:-1:-1;6638:1:12;6627:13;;6511:135::o;6651:127::-;6712:10;6707:3;6703:20;6700:1;6693:31;6743:4;6740:1;6733:15;6767:4;6764:1;6757:15;6783:120;6823:1;6849;6839:35;;6854:18;;:::i;:::-;-1:-1:-1;6888:9:12;;6783:120::o;6908:125::-;6948:4;6976:1;6973;6970:8;6967:34;;;6981:18;;:::i;:::-;-1:-1:-1;7018:9:12;;6908:125::o;7038:112::-;7070:1;7096;7086:35;;7101:18;;:::i;:::-;-1:-1:-1;7135:9:12;;7038:112::o;7155:128::-;7195:3;7226:1;7222:6;7219:1;7216:13;7213:39;;;7232:18;;:::i;:::-;-1:-1:-1;7268:9:12;;7155:128::o;7288:127::-;7349:10;7344:3;7340:20;7337:1;7330:31;7380:4;7377:1;7370:15;7404:4;7401:1;7394:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "804600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2761",
								"getApproved(uint256)": "6890",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "26823",
								"supportsInterface(bytes4)": "488",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"totalSupply()": "4453",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfers(address,address,uint256,uint256)": "infinite",
								"_approve(address,uint256,address)": "26264",
								"_baseURI()": "infinite",
								"_beforeTokenTransfers(address,address,uint256,uint256)": "infinite",
								"_burn(uint256)": "infinite",
								"_burn(uint256,bool)": "infinite",
								"_checkContractOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "4348",
								"_getAux(address)": "infinite",
								"_mint(address,uint256,bytes memory,bool)": "infinite",
								"_numberBurned(address)": "infinite",
								"_numberMinted(address)": "infinite",
								"_ownershipOf(uint256)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_setAux(address,uint64)": "infinite",
								"_startTokenId()": "infinite",
								"_totalMinted()": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "CODESIZE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "tag",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 3357,
									"end": 3511,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "6"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3428,
									"name": "PUSH",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 3423,
									"end": 3428,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "tag",
									"source": 11,
									"value": "6"
								},
								{
									"begin": 3423,
									"end": 3436,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3453,
									"name": "PUSH",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 3446,
									"end": 3453,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "tag",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 3446,
									"end": 3463,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3659,
									"end": 3666,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3473,
									"end": 3504,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3473,
									"end": 3504,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "13"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "13"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DIV",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "tag",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 12,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 12,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 12
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1135,
									"end": 1141,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1143,
									"end": 1149,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1196,
									"end": 1198,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1184,
									"end": 1193,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1175,
									"end": 1182,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1171,
									"end": 1194,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 1167,
									"end": 1199,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1212,
									"end": 1213,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1209,
									"end": 1210,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1202,
									"end": 1214,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "tag",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1331,
									"end": 1332,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1329,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1321,
									"end": 1333,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "tag",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 1407,
									"end": 1414,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 1398,
									"end": 1404,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1387,
									"end": 1396,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 1383,
									"end": 1405,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "tag",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1461,
									"end": 1463,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1450,
									"end": 1459,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1446,
									"end": 1464,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1440,
									"end": 1465,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1490,
									"end": 1492,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1480,
									"end": 1488,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1477,
									"end": 1493,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1506,
									"end": 1507,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1503,
									"end": 1504,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1496,
									"end": 1508,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "tag",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 1584,
									"end": 1591,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1573,
									"end": 1581,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1562,
									"end": 1571,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 1558,
									"end": 1582,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "tag",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1682,
									"end": 1683,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SHR",
									"source": 12
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1800,
									"end": 1804,
									"name": "PUSH",
									"source": 12,
									"value": "7F"
								},
								{
									"begin": 1792,
									"end": 1798,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1788,
									"end": 1805,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "tag",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1853,
									"end": 1855,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1845,
									"end": 1851,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1842,
									"end": 1856,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 1822,
									"end": 1840,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1819,
									"end": 1857,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "47"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1899,
									"end": 1909,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B71"
								},
								{
									"begin": 1894,
									"end": 1897,
									"name": "PUSH",
									"source": 12,
									"value": "E0"
								},
								{
									"begin": 1890,
									"end": 1910,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 1887,
									"end": 1888,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1880,
									"end": 1911,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1934,
									"end": 1938,
									"name": "PUSH",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 1931,
									"end": 1932,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1924,
									"end": 1939,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1962,
									"end": 1966,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1967,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "tag",
									"source": 12,
									"value": "47"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1464,
									"end": 21795,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122048030cddb04734b6db34513a6de4e316561df08331fcdc5d014c33a1ddc7ecd764736f6c634300080d0033",
									".code": [
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "1FFC9A7"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "6FDDE03"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "81812FC"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "95EA7B3"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "18160DDD"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "23B872DD"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "42842E0E"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "6352211E"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "95D89B41"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "A22CB465"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "B88D4FDE"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "C87B56DD"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "E985E9C5"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "tag",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1464,
											"end": 21795,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 565,
											"end": 579,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 565,
											"end": 579,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 558,
											"end": 580,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "tag",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "tag",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "tag",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "tag",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1674,
											"end": 1725,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1674,
											"end": 1725,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1662,
											"end": 1664,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 1528,
											"end": 1731,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "tag",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "tag",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4072,
											"end": 4084,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 4072,
											"end": 4084,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3866,
											"end": 3873,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4056,
											"end": 4069,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4056,
											"end": 4084,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2307,
											"end": 2309,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2292,
											"end": 2310,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3822,
											"end": 4119,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 2173,
											"end": 2350,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "tag",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "tag",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "tag",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "tag",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "tag",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "tag",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "tag",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "tag",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "tag",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "58"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "tag",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "tag",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "63"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "tag",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "66"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "tag",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "tag",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "tag",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "70"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "tag",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "tag",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9747,
											"end": 9751,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9788,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9795,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9770,
											"end": 9805,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "tag",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4653,
											"end": 4657,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4688,
											"end": 4728,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4728,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80AC58CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4688,
											"end": 4728,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4728,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4792,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 4688,
											"end": 4792,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4744,
											"end": 4792,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4744,
											"end": 4792,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5B5E139F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4744,
											"end": 4792,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4792,
											"name": "tag",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 4688,
											"end": 4792,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4844,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4688,
											"end": 4844,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 4688,
											"end": 4844,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4808,
											"end": 4844,
											"name": "tag",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 4808,
											"end": 4844,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4669,
											"end": 4844,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4551,
											"end": 4851,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7633,
											"end": 7646,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 7665,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "tag",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7579,
											"end": 7677,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "tag",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9103,
											"end": 9110,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9127,
											"end": 9143,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 9135,
											"end": 9142,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9127,
											"end": 9134,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 9127,
											"end": 9143,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9127,
											"end": 9143,
											"name": "tag",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 9127,
											"end": 9143,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9122,
											"end": 9186,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "92"
										},
										{
											"begin": 9122,
											"end": 9186,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "33D1C039"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 9122,
											"end": 9186,
											"name": "tag",
											"source": 11,
											"value": "92"
										},
										{
											"begin": 9122,
											"end": 9186,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9219,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9204,
											"end": 9228,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9035,
											"end": 9235,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "tag",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8684,
											"end": 8697,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 8716,
											"end": 8723,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8700,
											"end": 8715,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "tag",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8684,
											"end": 8724,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8684,
											"end": 8724,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8744,
											"end": 8749,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8738,
											"end": 8749,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8738,
											"end": 8740,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8738,
											"end": 8749,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8738,
											"end": 8749,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8734,
											"end": 8782,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 8734,
											"end": 8782,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "250FDEE3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8758,
											"end": 8782,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 8734,
											"end": 8782,
											"name": "tag",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 8734,
											"end": 8782,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8818,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8860,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 8797,
											"end": 8860,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8823,
											"end": 8860,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 8840,
											"end": 8845,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8823,
											"end": 8860,
											"name": "tag",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 8823,
											"end": 8860,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8822,
											"end": 8860,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8797,
											"end": 8860,
											"name": "tag",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 8797,
											"end": 8860,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "67D9DCA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8883,
											"end": 8918,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "tag",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 8793,
											"end": 8929,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8939,
											"end": 8967,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 8948,
											"end": 8950,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8952,
											"end": 8959,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8961,
											"end": 8966,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8939,
											"end": 8947,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 8939,
											"end": 8967,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8939,
											"end": 8967,
											"name": "tag",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 8939,
											"end": 8967,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8674,
											"end": 8974,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8612,
											"end": 8974,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "tag",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 9874,
											"end": 10038,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10003,
											"end": 10031,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 10013,
											"end": 10017,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10019,
											"end": 10021,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10023,
											"end": 10030,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10003,
											"end": 10012,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 10003,
											"end": 10031,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "tag",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 10104,
											"end": 10283,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 10254,
											"end": 10258,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10260,
											"end": 10262,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10264,
											"end": 10271,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10237,
											"end": 10253,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 10237,
											"end": 10276,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "tag",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7458,
											"end": 7465,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7484,
											"end": 7505,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 7497,
											"end": 7504,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7484,
											"end": 7496,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 7484,
											"end": 7505,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7484,
											"end": 7505,
											"name": "tag",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 7484,
											"end": 7505,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7484,
											"end": 7510,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7484,
											"end": 7510,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7394,
											"end": 7517,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "tag",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4974,
											"end": 4981,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4997,
											"end": 5016,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4997,
											"end": 5016,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4993,
											"end": 5053,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 4993,
											"end": 5053,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23D3AD81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5025,
											"end": 5053,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4993,
											"end": 5053,
											"name": "tag",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 4993,
											"end": 5053,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5090,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5097,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5105,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5078,
											"end": 5105,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5078,
											"end": 5105,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4910,
											"end": 5113,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "tag",
											"source": 11,
											"value": "58"
										},
										{
											"begin": 7741,
											"end": 7843,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7797,
											"end": 7810,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 7829,
											"end": 7836,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 7822,
											"end": 7836,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "tag",
											"source": 11,
											"value": "63"
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9400,
											"end": 9424,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9400,
											"end": 9424,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9400,
											"end": 9424,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9396,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 9396,
											"end": 9450,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B06307DB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9450,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 9396,
											"end": 9450,
											"name": "tag",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 9396,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9479,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9493,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9514,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 540,
											"end": 581,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9461,
											"end": 9503,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "PUSH",
											"source": 11,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9529,
											"end": 9577,
											"name": "LOG3",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9584,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "tag",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10510,
											"end": 10538,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 10520,
											"end": 10524,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10526,
											"end": 10528,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10530,
											"end": 10537,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10510,
											"end": 10519,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 10510,
											"end": 10538,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10510,
											"end": 10538,
											"name": "tag",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 10510,
											"end": 10538,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10552,
											"end": 10565,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10565,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "133"
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10572,
											"end": 10628,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10609,
											"end": 10611,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10613,
											"end": 10620,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10622,
											"end": 10627,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10572,
											"end": 10602,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 10572,
											"end": 10628,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10572,
											"end": 10628,
											"name": "tag",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 10572,
											"end": 10628,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10571,
											"end": 10628,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "tag",
											"source": 11,
											"value": "133"
										},
										{
											"begin": 10552,
											"end": 10628,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10548,
											"end": 10702,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10548,
											"end": 10702,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "136"
										},
										{
											"begin": 10548,
											"end": 10702,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10651,
											"end": 10691,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 10548,
											"end": 10702,
											"name": "tag",
											"source": 11,
											"value": "136"
										},
										{
											"begin": 10548,
											"end": 10702,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10349,
											"end": 10708,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "tag",
											"source": 11,
											"value": "70"
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7982,
											"end": 7995,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 8012,
											"end": 8028,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 8020,
											"end": 8027,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8012,
											"end": 8019,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 8012,
											"end": 8028,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8012,
											"end": 8028,
											"name": "tag",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 8012,
											"end": 8028,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8007,
											"end": 8066,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "139"
										},
										{
											"begin": 8007,
											"end": 8066,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A14C4B5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8037,
											"end": 8066,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 8007,
											"end": 8066,
											"name": "tag",
											"source": 11,
											"value": "139"
										},
										{
											"begin": 8007,
											"end": 8066,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8077,
											"end": 8098,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8101,
											"end": 8111,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8539,
											"end": 8548,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8463,
											"end": 8555,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8101,
											"end": 8111,
											"name": "tag",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 8101,
											"end": 8111,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8077,
											"end": 8111,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8077,
											"end": 8111,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8134,
											"end": 8141,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8149,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8153,
											"end": 8154,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8128,
											"end": 8154,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "tag",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8181,
											"end": 8188,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8190,
											"end": 8208,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 8190,
											"end": 8197,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8190,
											"end": 8206,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "145"
										},
										{
											"begin": 8190,
											"end": 8208,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8190,
											"end": 8208,
											"name": "tag",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 8190,
											"end": 8208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "147"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "tag",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8164,
											"end": 8209,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "tag",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 8128,
											"end": 8215,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8121,
											"end": 8215,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7909,
											"end": 8222,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10954,
											"end": 11126,
											"name": "tag",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 10954,
											"end": 11126,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11011,
											"end": 11015,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11074,
											"end": 11087,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11074,
											"end": 11087,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 11064,
											"end": 11071,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11064,
											"end": 11087,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 11034,
											"end": 11119,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11034,
											"end": 11119,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 11034,
											"end": 11119,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 11034,
											"end": 11119,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11103,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11112,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 11092,
											"end": 11119,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 11091,
											"end": 11119,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 11091,
											"end": 11119,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10954,
											"end": 11126,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "tag",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19019,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19033,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 19004,
											"end": 19028,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "PUSH",
											"source": 11,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19048,
											"end": 19076,
											"name": "LOG4",
											"source": 11
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 18894,
											"end": 19083,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "tag",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14074,
											"end": 14109,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14112,
											"end": 14133,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 14125,
											"end": 14132,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14112,
											"end": 14124,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 14112,
											"end": 14133,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14112,
											"end": 14133,
											"name": "tag",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 14112,
											"end": 14133,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14074,
											"end": 14133,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14074,
											"end": 14133,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14170,
											"end": 14174,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14148,
											"end": 14174,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14148,
											"end": 14161,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14148,
											"end": 14166,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14148,
											"end": 14166,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14148,
											"end": 14166,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14148,
											"end": 14174,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14148,
											"end": 14174,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 14144,
											"end": 14211,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "159"
										},
										{
											"begin": 14144,
											"end": 14211,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A11481"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14183,
											"end": 14211,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14144,
											"end": 14211,
											"name": "tag",
											"source": 11,
											"value": "159"
										},
										{
											"begin": 14144,
											"end": 14211,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14222,
											"end": 14244,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14248,
											"end": 14268,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14268,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14268,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14268,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14320,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 14248,
											"end": 14320,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14284,
											"end": 14320,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 14301,
											"end": 14305,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 9650,
											"end": 9812,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14284,
											"end": 14320,
											"name": "tag",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 14284,
											"end": 14320,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 14336,
											"end": 14356,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 14348,
											"end": 14355,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14336,
											"end": 14347,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 14336,
											"end": 14356,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14336,
											"end": 14356,
											"name": "tag",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 14336,
											"end": 14356,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14336,
											"end": 14372,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14336,
											"end": 14372,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "tag",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 14248,
											"end": 14372,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14222,
											"end": 14373,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14222,
											"end": 14373,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14389,
											"end": 14406,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14384,
											"end": 14450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 14384,
											"end": 14450,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CE44B5F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 14450,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14384,
											"end": 14450,
											"name": "tag",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 14384,
											"end": 14450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14464,
											"end": 14480,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14464,
											"end": 14480,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14460,
											"end": 14512,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "168"
										},
										{
											"begin": 14460,
											"end": 14512,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A954ECD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14489,
											"end": 14512,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14460,
											"end": 14512,
											"name": "tag",
											"source": 11,
											"value": "168"
										},
										{
											"begin": 14460,
											"end": 14512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14628,
											"end": 14663,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 14645,
											"end": 14646,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14649,
											"end": 14656,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14658,
											"end": 14662,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 14628,
											"end": 14636,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 14628,
											"end": 14663,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14628,
											"end": 14663,
											"name": "tag",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 14628,
											"end": 14663,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14965,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 14953,
											"end": 14984,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15014,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14998,
											"end": 15027,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15087,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 15110,
											"end": 15128,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15110,
											"end": 15128,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "OR",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15175,
											"end": 15190,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 15142,
											"end": 15191,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 15461,
											"end": 15472,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 15461,
											"end": 15472,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 15562,
											"end": 15575,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15562,
											"end": 15575,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15076,
											"end": 15096,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15520,
											"end": 15544,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15562,
											"end": 15575,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15558,
											"end": 15935,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 15558,
											"end": 15935,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 15769,
											"end": 15782,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 15769,
											"end": 15782,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 15754,
											"end": 15765,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 15754,
											"end": 15782,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 15750,
											"end": 15921,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 15750,
											"end": 15921,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 15806,
											"end": 15826,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15806,
											"end": 15826,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 15874,
											"end": 15902,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 15874,
											"end": 15902,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 15874,
											"end": 15902,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 15874,
											"end": 15902,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15806,
											"end": 15826,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 15806,
											"end": 15826,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 15848,
											"end": 15902,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 15750,
											"end": 15921,
											"name": "tag",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 15750,
											"end": 15921,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14929,
											"end": 15945,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14929,
											"end": 15945,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14929,
											"end": 15945,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 15979,
											"end": 15986,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 15975,
											"end": 15977,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15969,
											"end": 15973,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "PUSH",
											"source": 11,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15960,
											"end": 15987,
											"name": "LOG4",
											"source": 11
										},
										{
											"begin": 14064,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14064,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13964,
											"end": 16046,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "tag",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6363,
											"end": 6370,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6443,
											"end": 6456,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6443,
											"end": 6456,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6440,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6456,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "181"
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6507,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6521,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6510,
											"end": 6527,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6476,
											"end": 6527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6545,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 6545,
											"end": 7259,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6594,
											"end": 6608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6594,
											"end": 6608,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6594,
											"end": 6622,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6594,
											"end": 6622,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6590,
											"end": 6689,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 6590,
											"end": 6689,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6657,
											"end": 6666,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6590,
											"end": 6689,
											"name": "tag",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 6590,
											"end": 6689,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7025,
											"end": 7031,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7080,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7069,
											"end": 7086,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7086,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7116,
											"end": 7144,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7112,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "186"
										},
										{
											"begin": 7112,
											"end": 7219,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7183,
											"end": 7192,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6253,
											"end": 7337,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7112,
											"end": 7219,
											"name": "tag",
											"source": 11,
											"value": "186"
										},
										{
											"begin": 7112,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6986,
											"end": 7241,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 6986,
											"end": 7241,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6986,
											"end": 7241,
											"name": "tag",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 6986,
											"end": 7241,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6458,
											"end": 7273,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "tag",
											"source": 11,
											"value": "181"
										},
										{
											"begin": 6405,
											"end": 7273,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F96CDA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7299,
											"end": 7330,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "tag",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19722,
											"end": 19726,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19722,
											"end": 19726,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "PUSH",
											"source": 11,
											"value": "150B7A02"
										},
										{
											"begin": 19742,
											"end": 19778,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "190"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 19793,
											"end": 19797,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 19793,
											"end": 19797,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19799,
											"end": 19806,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 19799,
											"end": 19806,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19808,
											"end": 19813,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 19808,
											"end": 19813,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "tag",
											"source": 11,
											"value": "190"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "CALL",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "tag",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "tag",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 19742,
											"end": 19814,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "3F"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "199"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "tag",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "tag",
											"source": 11,
											"value": "199"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19973,
											"end": 19979,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 19973,
											"end": 19986,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 19990,
											"end": 19991,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 19973,
											"end": 19991,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 19969,
											"end": 20198,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 19969,
											"end": 20198,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 20018,
											"end": 20058,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 19969,
											"end": 20198,
											"name": "tag",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 19969,
											"end": 20198,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 20158,
											"end": 20164,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 20152,
											"end": 20165,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 20143,
											"end": 20149,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 20139,
											"end": 20141,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 20135,
											"end": 20150,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 20128,
											"end": 20166,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19860,
											"end": 19915,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19860,
											"end": 19915,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 19860,
											"end": 19915,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "tag",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 19738,
											"end": 20208,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 19564,
											"end": 20214,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "tag",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 384,
											"end": 397,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 601,
											"end": 606,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 610,
											"end": 611,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 601,
											"end": 611,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 597,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "206"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "tag",
											"source": 7,
											"value": "206"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 672,
											"end": 677,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 657,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 7,
											"value": "207"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 718,
											"end": 727,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 718,
											"end": 727,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "208"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "210"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "tag",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 773,
											"end": 775,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "tag",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "207"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 7,
											"value": "208"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 795,
											"end": 814,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "215"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 795,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 795,
											"end": 834,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "tag",
											"source": 7,
											"value": "217"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 851,
											"end": 861,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 851,
											"end": 861,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "219"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "tag",
											"source": 7,
											"value": "219"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 945,
											"end": 950,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "tag",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 932,
											"end": 934,
											"name": "PUSH",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 919,
											"end": 958,
											"name": "PUSH",
											"source": 7,
											"value": "F8"
										},
										{
											"begin": 919,
											"end": 958,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 902,
											"end": 908,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 909,
											"end": 915,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "tag",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 902,
											"end": 958,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 958,
											"name": "BYTE",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "MSTORE8",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 981,
											"end": 983,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "tag",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "217"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 12,
											"value": "231"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 88,
											"end": 120,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 88,
											"end": 120,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 78,
											"end": 121,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 78,
											"end": 121,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 68,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "239"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 68,
											"end": 139,
											"name": "tag",
											"source": 12,
											"value": "239"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14,
											"end": 145,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 208,
											"end": 214,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 240,
											"end": 247,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 236,
											"end": 259,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 232,
											"end": 264,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "241"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 277,
											"end": 278,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 267,
											"end": 279,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 12,
											"value": "241"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 316,
											"end": 325,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 303,
											"end": 326,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 359,
											"end": 364,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "231"
										},
										{
											"begin": 335,
											"end": 365,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 592,
											"end": 850,
											"name": "tag",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 592,
											"end": 850,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 664,
											"end": 665,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "tag",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 688,
											"end": 694,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 685,
											"end": 686,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 682,
											"end": 695,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 674,
											"end": 787,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 674,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "247"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 764,
											"end": 775,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 764,
											"end": 775,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 764,
											"end": 775,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 758,
											"end": 776,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 745,
											"end": 756,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 745,
											"end": 756,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 745,
											"end": 756,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 738,
											"end": 777,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 710,
											"end": 712,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 703,
											"end": 713,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 674,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 674,
											"end": 787,
											"name": "tag",
											"source": 12,
											"value": "247"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 805,
											"end": 811,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 802,
											"end": 803,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 799,
											"end": 812,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 796,
											"end": 844,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 796,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "136"
										},
										{
											"begin": 796,
											"end": 844,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 840,
											"end": 841,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 838,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 822,
											"end": 838,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 815,
											"end": 842,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 592,
											"end": 850,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "tag",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 897,
											"end": 900,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 935,
											"end": 940,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 929,
											"end": 941,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 962,
											"end": 968,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 957,
											"end": 960,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 950,
											"end": 969,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "250"
										},
										{
											"begin": 1034,
											"end": 1040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1027,
											"end": 1031,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1022,
											"end": 1025,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1018,
											"end": 1032,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1011,
											"end": 1015,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1000,
											"end": 1016,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "tag",
											"source": 12,
											"value": "250"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1095,
											"end": 1097,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 1074,
											"end": 1089,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1070,
											"end": 1099,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1102,
											"end": 1106,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1057,
											"end": 1107,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1057,
											"end": 1107,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1118,
											"end": 1338,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 1118,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1267,
											"end": 1269,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1256,
											"end": 1265,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1249,
											"end": 1270,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1230,
											"end": 1234,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 1328,
											"end": 1330,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1317,
											"end": 1326,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1313,
											"end": 1331,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1305,
											"end": 1311,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "tag",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1402,
											"end": 1408,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1455,
											"end": 1457,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1443,
											"end": 1452,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 1441,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1430,
											"end": 1453,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1426,
											"end": 1458,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "254"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1471,
											"end": 1472,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1468,
											"end": 1469,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1461,
											"end": 1473,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "tag",
											"source": 12,
											"value": "254"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "tag",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1804,
											"end": 1824,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1804,
											"end": 1824,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1853,
											"end": 1884,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1853,
											"end": 1884,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1843,
											"end": 1885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1843,
											"end": 1885,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1896,
											"end": 1897,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1889,
											"end": 1901,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "tag",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "tag",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1982,
											"end": 1988,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1990,
											"end": 1996,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2043,
											"end": 2045,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2031,
											"end": 2040,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2022,
											"end": 2029,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2018,
											"end": 2041,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2014,
											"end": 2046,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2059,
											"end": 2060,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2056,
											"end": 2057,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2049,
											"end": 2061,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "tag",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 2101,
											"end": 2110,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "tag",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2072,
											"end": 2111,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 2158,
											"end": 2160,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2130,
											"end": 2162,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2130,
											"end": 2162,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "tag",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2432,
											"end": 2438,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2440,
											"end": 2446,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2448,
											"end": 2454,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2501,
											"end": 2503,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2489,
											"end": 2498,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2480,
											"end": 2487,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2476,
											"end": 2499,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2472,
											"end": 2504,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2517,
											"end": 2518,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2514,
											"end": 2515,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2519,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "tag",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 2559,
											"end": 2568,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "tag",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2530,
											"end": 2569,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2530,
											"end": 2569,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2622,
											"end": 2624,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2611,
											"end": 2620,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2607,
											"end": 2625,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "tag",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2578,
											"end": 2626,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2578,
											"end": 2626,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2673,
											"end": 2675,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2662,
											"end": 2671,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2658,
											"end": 2676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2645,
											"end": 2677,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2635,
											"end": 2677,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2635,
											"end": 2677,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2688,
											"end": 2874,
											"name": "tag",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 2688,
											"end": 2874,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2747,
											"end": 2753,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2800,
											"end": 2802,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2788,
											"end": 2797,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2779,
											"end": 2786,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2775,
											"end": 2798,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2771,
											"end": 2803,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2816,
											"end": 2817,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2813,
											"end": 2814,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2806,
											"end": 2818,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "tag",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2839,
											"end": 2868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 2858,
											"end": 2867,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2839,
											"end": 2868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 2839,
											"end": 2868,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "tag",
											"source": 12,
											"value": "62"
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2944,
											"end": 2950,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2952,
											"end": 2958,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2984,
											"end": 2991,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2980,
											"end": 3003,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2976,
											"end": 3008,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "270"
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3021,
											"end": 3022,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3018,
											"end": 3019,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "tag",
											"source": 12,
											"value": "270"
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 3063,
											"end": 3072,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "tag",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3034,
											"end": 3073,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3034,
											"end": 3073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3123,
											"end": 3125,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3112,
											"end": 3121,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3095,
											"end": 3127,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3170,
											"end": 3175,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3163,
											"end": 3176,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3156,
											"end": 3177,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3149,
											"end": 3154,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3146,
											"end": 3178,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3192,
											"end": 3193,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3189,
											"end": 3190,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3182,
											"end": 3194,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "tag",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3215,
											"end": 3220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3231,
											"end": 3358,
											"name": "tag",
											"source": 12,
											"value": "215"
										},
										{
											"begin": 3231,
											"end": 3358,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3292,
											"end": 3302,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 3287,
											"end": 3290,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 3283,
											"end": 3303,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 3280,
											"end": 3281,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3273,
											"end": 3304,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3323,
											"end": 3327,
											"name": "PUSH",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 3320,
											"end": 3321,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3313,
											"end": 3328,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3347,
											"end": 3351,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 3344,
											"end": 3345,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3337,
											"end": 3352,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "tag",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3458,
											"end": 3464,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3466,
											"end": 3472,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3474,
											"end": 3480,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3482,
											"end": 3488,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3535,
											"end": 3538,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 3523,
											"end": 3532,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3514,
											"end": 3521,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3510,
											"end": 3533,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3506,
											"end": 3539,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3552,
											"end": 3553,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3549,
											"end": 3550,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3542,
											"end": 3554,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "tag",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 3594,
											"end": 3603,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "tag",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3565,
											"end": 3604,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 3565,
											"end": 3604,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "277"
										},
										{
											"begin": 3657,
											"end": 3659,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3646,
											"end": 3655,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3642,
											"end": 3660,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "tag",
											"source": 12,
											"value": "277"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3613,
											"end": 3661,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3708,
											"end": 3710,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3693,
											"end": 3711,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3693,
											"end": 3711,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3680,
											"end": 3712,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3680,
											"end": 3712,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3763,
											"end": 3765,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 3748,
											"end": 3766,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3748,
											"end": 3766,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3735,
											"end": 3767,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3816,
											"end": 3830,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3816,
											"end": 3830,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3816,
											"end": 3830,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "278"
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3843,
											"end": 3844,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3840,
											"end": 3841,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3833,
											"end": 3845,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "tag",
											"source": 12,
											"value": "278"
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3881,
											"end": 3887,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3870,
											"end": 3879,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3866,
											"end": 3888,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3856,
											"end": 3888,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3856,
											"end": 3888,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3919,
											"end": 3923,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 3915,
											"end": 3917,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3911,
											"end": 3924,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3907,
											"end": 3934,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3948,
											"end": 3949,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3945,
											"end": 3946,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3938,
											"end": 3950,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "tag",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3984,
											"end": 3986,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3971,
											"end": 3987,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 4006,
											"end": 4008,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4002,
											"end": 4004,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3999,
											"end": 4009,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "215"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "tag",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4087,
											"end": 4089,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4081,
											"end": 4090,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4055,
											"end": 4057,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 4141,
											"end": 4154,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4141,
											"end": 4154,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4161,
											"end": 4163,
											"name": "PUSH",
											"source": 12,
											"value": "3F"
										},
										{
											"begin": 4133,
											"end": 4164,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4129,
											"end": 4169,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 4182,
											"end": 4228,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "215"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "tag",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4271,
											"end": 4281,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4267,
											"end": 4269,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4260,
											"end": 4282,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4306,
											"end": 4308,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4298,
											"end": 4304,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4291,
											"end": 4309,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4346,
											"end": 4353,
											"name": "DUP11",
											"source": 12
										},
										{
											"begin": 4341,
											"end": 4343,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4336,
											"end": 4338,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4332,
											"end": 4334,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 4328,
											"end": 4339,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4324,
											"end": 4344,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4321,
											"end": 4354,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4367,
											"end": 4368,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4364,
											"end": 4365,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4357,
											"end": 4369,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "tag",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4423,
											"end": 4425,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4418,
											"end": 4420,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4414,
											"end": 4416,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4410,
											"end": 4421,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4405,
											"end": 4407,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4397,
											"end": 4403,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4393,
											"end": 4408,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4380,
											"end": 4426,
											"name": "CALLDATACOPY",
											"source": 12
										},
										{
											"begin": 4468,
											"end": 4469,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4463,
											"end": 4465,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4458,
											"end": 4460,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4450,
											"end": 4456,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4446,
											"end": 4461,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4442,
											"end": 4466,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4435,
											"end": 4470,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4489,
											"end": 4495,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "tag",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4574,
											"end": 4580,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4582,
											"end": 4588,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4635,
											"end": 4637,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4623,
											"end": 4632,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4614,
											"end": 4621,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4610,
											"end": 4633,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4606,
											"end": 4638,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4651,
											"end": 4652,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4648,
											"end": 4649,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4641,
											"end": 4653,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "tag",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "287"
										},
										{
											"begin": 4693,
											"end": 4702,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "tag",
											"source": 12,
											"value": "287"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4664,
											"end": 4703,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4664,
											"end": 4703,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 4756,
											"end": 4758,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4745,
											"end": 4754,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "tag",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4712,
											"end": 4760,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4712,
											"end": 4760,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "tag",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4850,
											"end": 4851,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4968,
											"end": 4972,
											"name": "PUSH",
											"source": 12,
											"value": "7F"
										},
										{
											"begin": 4960,
											"end": 4966,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4956,
											"end": 4973,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4946,
											"end": 4973,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4946,
											"end": 4973,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "tag",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5021,
											"end": 5023,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5013,
											"end": 5019,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5010,
											"end": 5024,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 4990,
											"end": 5008,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4987,
											"end": 5025,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "291"
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5067,
											"end": 5077,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 5062,
											"end": 5065,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 5058,
											"end": 5078,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 5055,
											"end": 5056,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5048,
											"end": 5079,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5102,
											"end": 5106,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 5099,
											"end": 5100,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5092,
											"end": 5107,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5130,
											"end": 5134,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 5127,
											"end": 5128,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5120,
											"end": 5135,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "tag",
											"source": 12,
											"value": "291"
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5156,
											"end": 5626,
											"name": "tag",
											"source": 12,
											"value": "147"
										},
										{
											"begin": 5156,
											"end": 5626,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5335,
											"end": 5338,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5373,
											"end": 5379,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5367,
											"end": 5380,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 5435,
											"end": 5441,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5430,
											"end": 5433,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5423,
											"end": 5427,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5415,
											"end": 5421,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 5411,
											"end": 5428,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "tag",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5505,
											"end": 5518,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5505,
											"end": 5518,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 5505,
											"end": 5518,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5561,
											"end": 5565,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5549,
											"end": 5566,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 5549,
											"end": 5566,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "tag",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5600,
											"end": 5620,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5600,
											"end": 5620,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 5156,
											"end": 5626,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5156,
											"end": 5626,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5631,
											"end": 6120,
											"name": "tag",
											"source": 12,
											"value": "191"
										},
										{
											"begin": 5631,
											"end": 6120,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5900,
											"end": 5915,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5900,
											"end": 5915,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5900,
											"end": 5915,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5882,
											"end": 5916,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5882,
											"end": 5916,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5952,
											"end": 5967,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5952,
											"end": 5967,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5947,
											"end": 5949,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5932,
											"end": 5950,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5932,
											"end": 5950,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5925,
											"end": 5968,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5999,
											"end": 6001,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5984,
											"end": 6002,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5984,
											"end": 6002,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5977,
											"end": 6011,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5977,
											"end": 6011,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5977,
											"end": 6011,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6047,
											"end": 6050,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 6042,
											"end": 6044,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6027,
											"end": 6045,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6027,
											"end": 6045,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6020,
											"end": 6051,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6020,
											"end": 6051,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6020,
											"end": 6051,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5825,
											"end": 5829,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5825,
											"end": 5829,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6094,
											"end": 6113,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6094,
											"end": 6113,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6086,
											"end": 6092,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "tag",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6060,
											"end": 6114,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": 5631,
											"end": 6120,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5631,
											"end": 6120,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6125,
											"end": 6374,
											"name": "tag",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 6125,
											"end": 6374,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6194,
											"end": 6200,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6247,
											"end": 6249,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6235,
											"end": 6244,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6226,
											"end": 6233,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6222,
											"end": 6245,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6218,
											"end": 6250,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "298"
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6263,
											"end": 6264,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6260,
											"end": 6261,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6253,
											"end": 6265,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "tag",
											"source": 12,
											"value": "298"
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6295,
											"end": 6304,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6289,
											"end": 6305,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6314,
											"end": 6344,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 6338,
											"end": 6343,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6314,
											"end": 6344,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "231"
										},
										{
											"begin": 6314,
											"end": 6344,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6379,
											"end": 6506,
											"name": "tag",
											"source": 12,
											"value": "235"
										},
										{
											"begin": 6379,
											"end": 6506,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6440,
											"end": 6450,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 6435,
											"end": 6438,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 6431,
											"end": 6451,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 6428,
											"end": 6429,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6421,
											"end": 6452,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6471,
											"end": 6475,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 6468,
											"end": 6469,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6461,
											"end": 6476,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6495,
											"end": 6499,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 6492,
											"end": 6493,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6485,
											"end": 6500,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6511,
											"end": 6646,
											"name": "tag",
											"source": 12,
											"value": "210"
										},
										{
											"begin": 6511,
											"end": 6646,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6550,
											"end": 6553,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6571,
											"end": 6588,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6571,
											"end": 6588,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6571,
											"end": 6588,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6568,
											"end": 6611,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 6568,
											"end": 6611,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "235"
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "tag",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6638,
											"end": 6639,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6627,
											"end": 6640,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6627,
											"end": 6640,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6511,
											"end": 6646,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6651,
											"end": 6778,
											"name": "tag",
											"source": 12,
											"value": "236"
										},
										{
											"begin": 6651,
											"end": 6778,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6712,
											"end": 6722,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 6707,
											"end": 6710,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 6703,
											"end": 6723,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 6700,
											"end": 6701,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6693,
											"end": 6724,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6743,
											"end": 6747,
											"name": "PUSH",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 6740,
											"end": 6741,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6733,
											"end": 6748,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6767,
											"end": 6771,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 6764,
											"end": 6765,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6757,
											"end": 6772,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6783,
											"end": 6903,
											"name": "tag",
											"source": 12,
											"value": "212"
										},
										{
											"begin": 6783,
											"end": 6903,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6823,
											"end": 6824,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6849,
											"end": 6850,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6839,
											"end": 6874,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "307"
										},
										{
											"begin": 6839,
											"end": 6874,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "307"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "236"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "tag",
											"source": 12,
											"value": "307"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6888,
											"end": 6897,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 6888,
											"end": 6897,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6783,
											"end": 6903,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6908,
											"end": 7033,
											"name": "tag",
											"source": 12,
											"value": "220"
										},
										{
											"begin": 6908,
											"end": 7033,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6948,
											"end": 6952,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6976,
											"end": 6977,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6973,
											"end": 6974,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6970,
											"end": 6978,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6967,
											"end": 7001,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6967,
											"end": 7001,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 6967,
											"end": 7001,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "235"
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "tag",
											"source": 12,
											"value": "310"
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7018,
											"end": 7027,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7018,
											"end": 7027,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6908,
											"end": 7033,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7038,
											"end": 7150,
											"name": "tag",
											"source": 12,
											"value": "222"
										},
										{
											"begin": 7038,
											"end": 7150,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7070,
											"end": 7071,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7096,
											"end": 7097,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7086,
											"end": 7121,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 7086,
											"end": 7121,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "236"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "tag",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7135,
											"end": 7144,
											"name": "MOD",
											"source": 12
										},
										{
											"begin": 7135,
											"end": 7144,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7038,
											"end": 7150,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7155,
											"end": 7283,
											"name": "tag",
											"source": 12,
											"value": "224"
										},
										{
											"begin": 7155,
											"end": 7283,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7195,
											"end": 7198,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7226,
											"end": 7227,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7222,
											"end": 7228,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 7219,
											"end": 7220,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7216,
											"end": 7229,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7213,
											"end": 7252,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7213,
											"end": 7252,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 7213,
											"end": 7252,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "235"
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "tag",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7268,
											"end": 7277,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7268,
											"end": 7277,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7155,
											"end": 7283,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7288,
											"end": 7415,
											"name": "tag",
											"source": 12,
											"value": "227"
										},
										{
											"begin": 7288,
											"end": 7415,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7349,
											"end": 7359,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 7344,
											"end": 7347,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7340,
											"end": 7360,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7337,
											"end": 7338,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7330,
											"end": 7361,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7380,
											"end": 7384,
											"name": "PUSH",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 7377,
											"end": 7378,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7370,
											"end": 7385,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7404,
											"end": 7408,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7401,
											"end": 7402,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7394,
											"end": 7409,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/ERC721A.sol\":\"ERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"erc721a/contracts/ERC721A.sol\":{\"keccak256\":\"0x8ce51ff43bf1d6690341475ef3caf0929c43c63258fe56dc7fc301608ea9f30d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad7a49ea49d5b3dbe28c05bd863f7cb6adcd4ad7ed621bafa154b17d86c92056\",\"dweb:/ipfs/QmYw9nriaQkp2at42u9TD5SCXuJ9PgBq54zLCUUYphBvVk\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							582
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 583,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 582,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								582
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 572,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 572,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							895
						],
						"IERC721": [
							220
						]
					},
					"id": 221,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "93:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 107,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 221,
							"sourceUnit": 896,
							"src": "118:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 109,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 895,
										"src": "256:7:1"
									},
									"id": 110,
									"nodeType": "InheritanceSpecifier",
									"src": "256:7:1"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 108,
								"nodeType": "StructuredDocumentation",
								"src": "167:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 220,
							"linearizedBaseContracts": [
								220,
								895
							],
							"name": "IERC721",
							"nameLocation": "245:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "270:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 119,
									"name": "Transfer",
									"nameLocation": "369:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "394:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "378:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 115,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "416:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "400:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "400:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "436:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "420:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "377:67:1"
									},
									"src": "363:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "451:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 128,
									"name": "Approval",
									"nameLocation": "556:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "581:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "565:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 121,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "565:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "604:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "588:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "588:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 126,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "630:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "614:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "614:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "564:74:1"
									},
									"src": "550:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "645:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 137,
									"name": "ApprovalForAll",
									"nameLocation": "773:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "804:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "788:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "788:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "827:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "811:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "811:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "837:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 134,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "837:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "787:64:1"
									},
									"src": "767:85:1"
								},
								{
									"documentation": {
										"id": 138,
										"nodeType": "StructuredDocumentation",
										"src": "858:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "948:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "966:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "958:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "958:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "957:15:1"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1004:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "996:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "996:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "995:17:1"
									},
									"scope": 220,
									"src": "939:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "1019:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1164:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1180:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1172:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1172:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1171:17:1"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1220:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1212:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1212:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1211:15:1"
									},
									"scope": 220,
									"src": "1155:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "1233:690:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1937:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1971:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "1963:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1963:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1993:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "1985:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1985:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2013:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "2005:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 159,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2005:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1953:73:1"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2035:0:1"
									},
									"scope": 220,
									"src": "1928:108:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "2042:504:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 173,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2560:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2590:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "2582:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2582:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2612:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "2604:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2604:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2632:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "2624:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2624:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2572:73:1"
									},
									"returnParameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2654:0:1"
									},
									"scope": 220,
									"src": "2551:104:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "2661:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3127:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3143:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "3135:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3155:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "3147:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3147:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:29:1"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3172:0:1"
									},
									"scope": 220,
									"src": "3118:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "3179:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "3332:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3352:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3344:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3344:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3343:17:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3392:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3384:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3384:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3383:18:1"
									},
									"scope": 220,
									"src": "3323:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "3408:309:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "3731:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3757:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "3749:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3749:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "3772:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "3767:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 193,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3767:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3748:34:1"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3791:0:1"
									},
									"scope": 220,
									"src": "3722:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "3798:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 207,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "3950:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3975:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "3967:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3967:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3990:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "3982:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3982:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3966:33:1"
									},
									"returnParameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "4023:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 204,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4023:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4022:6:1"
									},
									"scope": 220,
									"src": "3941:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 208,
										"nodeType": "StructuredDocumentation",
										"src": "4035:556:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "4605:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4639:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4631:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4631:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4661:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4653:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4681:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4673:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4673:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4713:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4698:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 215,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4698:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4621:102:1"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4732:0:1"
									},
									"scope": 220,
									"src": "4596:137:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 221,
							"src": "235:4500:1",
							"usedErrors": []
						}
					],
					"src": "93:4643:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							238
						]
					},
					"id": 239,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 222,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 223,
								"nodeType": "StructuredDocumentation",
								"src": "126:152:2",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 238,
							"linearizedBaseContracts": [
								238
							],
							"name": "IERC721Receiver",
							"nameLocation": "289:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 224,
										"nodeType": "StructuredDocumentation",
										"src": "311:485:2",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "810:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "844:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "836:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "870:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "862:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "862:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "892:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "884:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "884:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "924:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "909:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 231,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "909:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "826:108:2"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "953:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 234,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "953:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "952:8:2"
									},
									"scope": 238,
									"src": "801:160:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 239,
							"src": "279:684:2",
							"usedErrors": []
						}
					],
					"src": "101:863:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							895
						],
						"IERC721": [
							220
						],
						"IERC721Metadata": [
							265
						]
					},
					"id": 266,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 240,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 241,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 266,
							"sourceUnit": 221,
							"src": "137:24:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 243,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "326:7:3"
									},
									"id": 244,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:3"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 242,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:3",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 265,
							"linearizedBaseContracts": [
								265,
								220,
								895
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:3",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 250,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:3"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "442:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 247,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:3"
									},
									"scope": 265,
									"src": "403:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 251,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:3",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 256,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 252,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:3"
									},
									"returnParameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "569:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 253,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:3"
									},
									"scope": 265,
									"src": "528:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:3",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 264,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:3"
									},
									"returnParameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "743:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 261,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:3"
									},
									"scope": 265,
									"src": "685:73:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 266,
							"src": "297:463:3",
							"usedErrors": []
						}
					],
					"src": "112:649:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							560
						]
					},
					"id": 561,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 267,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 268,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 560,
							"linearizedBaseContracts": [
								560
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 282,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 276,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 271,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 278,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 279,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 275,
												"id": 281,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 270,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 273,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 560,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 316,
										"nodeType": "Block",
										"src": "2483:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 294,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$560",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$560",
																				"typeString": "library Address"
																			}
																		],
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 292,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 295,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 297,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "2526:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 299,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 291,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 301,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:4"
											},
											{
												"assignments": [
													303,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 303,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 316,
														"src": "2578:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 302,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 310,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 304,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 286,
																"src": "2596:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 307,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 306,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "2618:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 312,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "2647:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 313,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 311,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 315,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:4"
											}
										]
									},
									"documentation": {
										"id": 284,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "2431:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "2458:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:4"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:4"
									},
									"scope": 560,
									"src": "2412:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "3555:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 328,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 320,
															"src": "3585:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 329,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "3593:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 327,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															334,
															354
														],
														"referencedDeclaration": 354,
														"src": "3572:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 326,
												"id": 332,
												"nodeType": "Return",
												"src": "3565:67:4"
											}
										]
									},
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3504:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:4"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3541:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 324,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:4"
									},
									"scope": 560,
									"src": "3466:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "4008:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "4047:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 348,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "4055:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 350,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "4064:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 346,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															374,
															424
														],
														"referencedDeclaration": 424,
														"src": "4025:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 345,
												"id": 352,
												"nodeType": "Return",
												"src": "4018:59:4"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3892:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3916:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 338,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3943:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 340,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:4"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3994:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 343,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:4"
									},
									"scope": 560,
									"src": "3861:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 373,
										"nodeType": "Block",
										"src": "4589:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 367,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "4628:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 368,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "4636:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 369,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "4642:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 370,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 366,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															374,
															424
														],
														"referencedDeclaration": 424,
														"src": "4606:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 365,
												"id": 372,
												"nodeType": "Return",
												"src": "4599:94:4"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4486:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4510:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 358,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4537:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:4"
									},
									"returnParameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4575:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 363,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:4"
									},
									"scope": 560,
									"src": "4446:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 423,
										"nodeType": "Block",
										"src": "5127:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 391,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$560",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$560",
																				"typeString": "library Address"
																			}
																		],
																		"id": 390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 389,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 392,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 393,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 394,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 381,
																"src": "5170:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 388,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 398,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 401,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 377,
																	"src": "5247:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 400,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "5236:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 399,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:4"
											},
											{
												"assignments": [
													407,
													409
												],
												"declarations": [
													{
														"constant": false,
														"id": 407,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 423,
														"src": "5300:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 406,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 409,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 423,
														"src": "5314:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 408,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 416,
												"initialValue": {
													"arguments": [
														{
															"id": 414,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 379,
															"src": "5367:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 410,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 377,
																"src": "5341:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 413,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 412,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 381,
																"src": "5360:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 418,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "5406:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 419,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "5415:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 420,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "5427:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 417,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 559,
														"src": "5389:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 387,
												"id": 422,
												"nodeType": "Return",
												"src": "5382:58:4"
											}
										]
									},
									"documentation": {
										"id": 375,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 424,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4988:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5012:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 378,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5039:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5062:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 382,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:4"
									},
									"returnParameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5113:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 385,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:4"
									},
									"scope": 560,
									"src": "4948:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 440,
										"nodeType": "Block",
										"src": "5724:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 435,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "5760:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 436,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "5768:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 434,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															441,
															476
														],
														"referencedDeclaration": 476,
														"src": "5741:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 433,
												"id": 439,
												"nodeType": "Return",
												"src": "5734:80:4"
											}
										]
									},
									"documentation": {
										"id": 425,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5668:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 428,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:4"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5710:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 431,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:4"
									},
									"scope": 560,
									"src": "5624:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "6163:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 455,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 444,
																	"src": "6192:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 454,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "6181:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 453,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 459,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:4"
											},
											{
												"assignments": [
													461,
													463
												],
												"declarations": [
													{
														"constant": false,
														"id": 461,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 475,
														"src": "6252:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 460,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 463,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 475,
														"src": "6266:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 462,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 468,
												"initialValue": {
													"arguments": [
														{
															"id": 466,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "6311:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 464,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "6293:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 470,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "6350:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 471,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "6359:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 472,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 448,
															"src": "6371:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 469,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 559,
														"src": "6333:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 452,
												"id": 474,
												"nodeType": "Return",
												"src": "6326:58:4"
											}
										]
									},
									"documentation": {
										"id": 442,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6042:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6066:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 445,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6093:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 447,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:4"
									},
									"returnParameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6149:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 450,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:4"
									},
									"scope": 560,
									"src": "6005:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "6667:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 487,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "6705:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 488,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "6713:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 486,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															493,
															528
														],
														"referencedDeclaration": 528,
														"src": "6684:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 485,
												"id": 491,
												"nodeType": "Return",
												"src": "6677:84:4"
											}
										]
									},
									"documentation": {
										"id": 477,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6600:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6616:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 480,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:4"
									},
									"returnParameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6653:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 483,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:4"
									},
									"scope": 560,
									"src": "6570:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 527,
										"nodeType": "Block",
										"src": "7109:232:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 507,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 496,
																	"src": "7138:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 506,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "7127:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 505,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 511,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:4"
											},
											{
												"assignments": [
													513,
													515
												],
												"declarations": [
													{
														"constant": false,
														"id": 513,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 527,
														"src": "7200:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 512,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 515,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 527,
														"src": "7214:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 514,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 520,
												"initialValue": {
													"arguments": [
														{
															"id": 518,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 498,
															"src": "7261:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 516,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 496,
															"src": "7241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 517,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 522,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "7300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 523,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 515,
															"src": "7309:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 524,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 500,
															"src": "7321:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 521,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 559,
														"src": "7283:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 504,
												"id": 526,
												"nodeType": "Return",
												"src": "7276:58:4"
											}
										]
									},
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 528,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "6993:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "7017:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 497,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "7044:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 499,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:4"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "7095:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:4"
									},
									"scope": 560,
									"src": "6954:387:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "7721:532:4",
										"statements": [
											{
												"condition": {
													"id": 540,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 531,
													"src": "7735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 556,
													"nodeType": "Block",
													"src": "7792:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 544,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 533,
																		"src": "7876:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 545,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 554,
																"nodeType": "Block",
																"src": "8184:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 551,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 535,
																					"src": "8209:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 550,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 552,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 553,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:4"
																	}
																]
															},
															"id": 555,
															"nodeType": "IfStatement",
															"src": "7872:365:4",
															"trueBody": {
																"id": 549,
																"nodeType": "Block",
																"src": "7899:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:4"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 533,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 533,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 548,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 557,
												"nodeType": "IfStatement",
												"src": "7731:516:4",
												"trueBody": {
													"id": 543,
													"nodeType": "Block",
													"src": "7744:42:4",
													"statements": [
														{
															"expression": {
																"id": 541,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 533,
																"src": "7765:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 539,
															"id": 542,
															"nodeType": "Return",
															"src": "7758:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 529,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "7596:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 530,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "7618:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 532,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "7651:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 534,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:4"
									},
									"returnParameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "7707:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 537,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:4"
									},
									"scope": 560,
									"src": "7561:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 561,
							"src": "194:8061:4",
							"usedErrors": []
						}
					],
					"src": "101:8155:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							582
						]
					},
					"id": 583,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 562,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 563,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 582,
							"linearizedBaseContracts": [
								582
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 571,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 568,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 567,
												"id": 570,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 572,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 582,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 580,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 577,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 576,
												"id": 579,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 581,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 574,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 582,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 583,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							656
						]
					},
					"id": 657,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 584,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Counters",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 585,
								"nodeType": "StructuredDocumentation",
								"src": "112:311:6",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 656,
							"linearizedBaseContracts": [
								656
							],
							"name": "Counters",
							"nameLocation": "432:8:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counters.Counter",
									"id": 588,
									"members": [
										{
											"constant": false,
											"id": 587,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "794:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 588,
											"src": "786:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 586,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "786:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "454:7:6",
									"nodeType": "StructDefinition",
									"scope": 656,
									"src": "447:374:6",
									"visibility": "public"
								},
								{
									"body": {
										"id": 599,
										"nodeType": "Block",
										"src": "901:38:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 596,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 591,
														"src": "918:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 597,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 587,
													"src": "918:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 595,
												"id": 598,
												"nodeType": "Return",
												"src": "911:21:6"
											}
										]
									},
									"id": 600,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "836:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "860:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 600,
												"src": "844:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 590,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 589,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 588,
														"src": "844:7:6"
													},
													"referencedDeclaration": 588,
													"src": "844:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:25:6"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 600,
												"src": "892:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 593,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:9:6"
									},
									"scope": 656,
									"src": "827:112:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 613,
										"nodeType": "Block",
										"src": "998:70:6",
										"statements": [
											{
												"id": 612,
												"nodeType": "UncheckedBlock",
												"src": "1008:54:6",
												"statements": [
													{
														"expression": {
															"id": 610,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 606,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 603,
																	"src": "1032:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 608,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 587,
																"src": "1032:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 609,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1050:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1032:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 611,
														"nodeType": "ExpressionStatement",
														"src": "1032:19:6"
													}
												]
											}
										]
									},
									"id": 614,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "954:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "980:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 614,
												"src": "964:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 602,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 601,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 588,
														"src": "964:7:6"
													},
													"referencedDeclaration": 588,
													"src": "964:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:25:6"
									},
									"returnParameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:0:6"
									},
									"scope": 656,
									"src": "945:123:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 641,
										"nodeType": "Block",
										"src": "1127:176:6",
										"statements": [
											{
												"assignments": [
													621
												],
												"declarations": [
													{
														"constant": false,
														"id": 621,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "1145:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 641,
														"src": "1137:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 620,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1137:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 624,
												"initialValue": {
													"expression": {
														"id": 622,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 617,
														"src": "1153:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 623,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 587,
													"src": "1153:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1137:30:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 626,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 621,
																"src": "1185:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 627,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1193:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1185:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1196:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 625,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1177:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1177:49:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 631,
												"nodeType": "ExpressionStatement",
												"src": "1177:49:6"
											},
											{
												"id": 640,
												"nodeType": "UncheckedBlock",
												"src": "1236:61:6",
												"statements": [
													{
														"expression": {
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 632,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 617,
																	"src": "1260:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 634,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 587,
																"src": "1260:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 637,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 635,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 621,
																	"src": "1277:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 636,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1285:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1277:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1260:26:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 639,
														"nodeType": "ExpressionStatement",
														"src": "1260:26:6"
													}
												]
											}
										]
									},
									"id": 642,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "1083:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1109:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "1093:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 616,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 615,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 588,
														"src": "1093:7:6"
													},
													"referencedDeclaration": 588,
													"src": "1093:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:25:6"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1127:0:6"
									},
									"scope": 656,
									"src": "1074:229:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 654,
										"nodeType": "Block",
										"src": "1358:35:6",
										"statements": [
											{
												"expression": {
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 648,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "1368:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 650,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 587,
														"src": "1368:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 651,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1385:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1368:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 653,
												"nodeType": "ExpressionStatement",
												"src": "1368:18:6"
											}
										]
									},
									"id": 655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "1318:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1340:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1324:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 644,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 643,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 588,
														"src": "1324:7:6"
													},
													"referencedDeclaration": 588,
													"src": "1324:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:25:6"
									},
									"returnParameters": {
										"id": 647,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1358:0:6"
									},
									"scope": 656,
									"src": "1309:84:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 657,
							"src": "424:971:6",
							"usedErrors": []
						}
					],
					"src": "87:1309:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							859
						]
					},
					"id": 860,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 658,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 659,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:7",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 859,
							"linearizedBaseContracts": [
								859
							],
							"name": "Strings",
							"nameLocation": "154:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 662,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 859,
									"src": "168:58:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 660,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 661,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:7",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 740,
										"nodeType": "Block",
										"src": "399:632:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 670,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 665,
														"src": "601:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 671,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 676,
												"nodeType": "IfStatement",
												"src": "597:51:7",
												"trueBody": {
													"id": 675,
													"nodeType": "Block",
													"src": "613:35:7",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 673,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 669,
															"id": 674,
															"nodeType": "Return",
															"src": "627:10:7"
														}
													]
												}
											},
											{
												"assignments": [
													678
												],
												"declarations": [
													{
														"constant": false,
														"id": 678,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:7",
														"nodeType": "VariableDeclaration",
														"scope": 740,
														"src": "657:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 677,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 680,
												"initialValue": {
													"id": 679,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 665,
													"src": "672:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:7"
											},
											{
												"assignments": [
													682
												],
												"declarations": [
													{
														"constant": false,
														"id": 682,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 740,
														"src": "687:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 681,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 683,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:7"
											},
											{
												"body": {
													"id": 694,
													"nodeType": "Block",
													"src": "729:57:7",
													"statements": [
														{
															"expression": {
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:7",
																"subExpression": {
																	"id": 687,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 682,
																	"src": "743:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 689,
															"nodeType": "ExpressionStatement",
															"src": "743:8:7"
														},
														{
															"expression": {
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 690,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 678,
																	"src": "765:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 693,
															"nodeType": "ExpressionStatement",
															"src": "765:10:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 686,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 684,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 678,
														"src": "718:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 685,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 695,
												"nodeType": "WhileStatement",
												"src": "711:75:7"
											},
											{
												"assignments": [
													697
												],
												"declarations": [
													{
														"constant": false,
														"id": 697,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 740,
														"src": "795:19:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 696,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 702,
												"initialValue": {
													"arguments": [
														{
															"id": 700,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 682,
															"src": "827:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 699,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 698,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 701,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:7"
											},
											{
												"body": {
													"id": 733,
													"nodeType": "Block",
													"src": "863:131:7",
													"statements": [
														{
															"expression": {
																"id": 708,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 706,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 682,
																	"src": "877:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 709,
															"nodeType": "ExpressionStatement",
															"src": "877:11:7"
														},
														{
															"expression": {
																"id": 727,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 710,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "902:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 712,
																	"indexExpression": {
																		"id": 711,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 682,
																		"src": "909:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 724,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 717,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 722,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 720,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 665,
																									"src": "945:5:7",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 721,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:7",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 719,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 718,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:7",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 723,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:7",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 716,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 715,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 714,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 713,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 726,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 728,
															"nodeType": "ExpressionStatement",
															"src": "902:56:7"
														},
														{
															"expression": {
																"id": 731,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 729,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 665,
																	"src": "972:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 730,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 732,
															"nodeType": "ExpressionStatement",
															"src": "972:11:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 703,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 665,
														"src": "851:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 704,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 734,
												"nodeType": "WhileStatement",
												"src": "844:150:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 737,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 697,
															"src": "1017:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 736,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 735,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:7",
															"typeDescriptions": {}
														}
													},
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 669,
												"id": 739,
												"nodeType": "Return",
												"src": "1003:21:7"
											}
										]
									},
									"documentation": {
										"id": 663,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 741,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "346:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:7"
									},
									"returnParameters": {
										"id": 669,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 668,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "384:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 667,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:7"
									},
									"scope": 859,
									"src": "328:703:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 781,
										"nodeType": "Block",
										"src": "1210:255:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 749,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "1224:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 750,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 755,
												"nodeType": "IfStatement",
												"src": "1220:54:7",
												"trueBody": {
													"id": 754,
													"nodeType": "Block",
													"src": "1236:38:7",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 752,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 748,
															"id": 753,
															"nodeType": "Return",
															"src": "1250:13:7"
														}
													]
												}
											},
											{
												"assignments": [
													757
												],
												"declarations": [
													{
														"constant": false,
														"id": 757,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:7",
														"nodeType": "VariableDeclaration",
														"scope": 781,
														"src": "1283:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 756,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 759,
												"initialValue": {
													"id": 758,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 744,
													"src": "1298:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:7"
											},
											{
												"assignments": [
													761
												],
												"declarations": [
													{
														"constant": false,
														"id": 761,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 781,
														"src": "1313:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 760,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 763,
												"initialValue": {
													"hexValue": "30",
													"id": 762,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:7"
											},
											{
												"body": {
													"id": 774,
													"nodeType": "Block",
													"src": "1359:57:7",
													"statements": [
														{
															"expression": {
																"id": 768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:7",
																"subExpression": {
																	"id": 767,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 761,
																	"src": "1373:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 769,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:7"
														},
														{
															"expression": {
																"id": 772,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 770,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "1395:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 773,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 764,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 757,
														"src": "1348:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 765,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 775,
												"nodeType": "WhileStatement",
												"src": "1341:75:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 777,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "1444:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 778,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "1451:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 776,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															782,
															858
														],
														"referencedDeclaration": 858,
														"src": "1432:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 748,
												"id": 780,
												"nodeType": "Return",
												"src": "1425:33:7"
											}
										]
									},
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 782,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "1157:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:7"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "1195:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 746,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:7"
									},
									"scope": 859,
									"src": "1136:329:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 857,
										"nodeType": "Block",
										"src": "1678:351:7",
										"statements": [
											{
												"assignments": [
													793
												],
												"declarations": [
													{
														"constant": false,
														"id": 793,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 857,
														"src": "1688:19:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 792,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 802,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 798,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 796,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 797,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 787,
																	"src": "1724:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 799,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 795,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 794,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:7"
											},
											{
												"expression": {
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 803,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "1745:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 805,
														"indexExpression": {
															"hexValue": "30",
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 808,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:7"
											},
											{
												"expression": {
													"id": 813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 809,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "1770:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 811,
														"indexExpression": {
															"hexValue": "31",
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 812,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 814,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:7"
											},
											{
												"body": {
													"id": 843,
													"nodeType": "Block",
													"src": "1840:87:7",
													"statements": [
														{
															"expression": {
																"id": 837,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 829,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 793,
																		"src": "1854:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 831,
																	"indexExpression": {
																		"id": 830,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 816,
																		"src": "1861:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 832,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 662,
																		"src": "1866:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 836,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 835,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 833,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 785,
																			"src": "1879:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 834,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 838,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:7"
														},
														{
															"expression": {
																"id": 841,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 839,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 785,
																	"src": "1905:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 840,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 842,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 823,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 816,
														"src": "1828:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 824,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 844,
												"initializationExpression": {
													"assignments": [
														816
													],
													"declarations": [
														{
															"constant": false,
															"id": 816,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:7",
															"nodeType": "VariableDeclaration",
															"scope": 844,
															"src": "1800:9:7",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 815,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 822,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 821,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 819,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 817,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 818,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 787,
																"src": "1816:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 820,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:7"
												},
												"loopExpression": {
													"expression": {
														"id": 827,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:7",
														"subExpression": {
															"id": 826,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 816,
															"src": "1837:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 828,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:7"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 846,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 785,
																"src": "1944:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 847,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 849,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 845,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 851,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 854,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "2015:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 853,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 852,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:7",
															"typeDescriptions": {}
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 791,
												"id": 856,
												"nodeType": "Return",
												"src": "2001:21:7"
											}
										]
									},
									"documentation": {
										"id": 783,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 858,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "1609:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 784,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "1624:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:7"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "1663:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 789,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:7"
									},
									"scope": 859,
									"src": "1588:441:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 860,
							"src": "146:1885:7",
							"usedErrors": []
						}
					],
					"src": "86:1946:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							883
						],
						"IERC165": [
							895
						]
					},
					"id": 884,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 861,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 862,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 884,
							"sourceUnit": 896,
							"src": "124:23:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 864,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 895,
										"src": "754:7:8"
									},
									"id": 865,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:8"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 863,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:8",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 883,
							"linearizedBaseContracts": [
								883,
								895
							],
							"name": "ERC165",
							"nameLocation": "744:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										894
									],
									"body": {
										"id": 881,
										"nodeType": "Block",
										"src": "920:64:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 874,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "937:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 876,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 895,
																	"src": "957:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$895_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$895_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 875,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 877,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$895",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 878,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 873,
												"id": 880,
												"nodeType": "Return",
												"src": "930:47:8"
											}
										]
									},
									"documentation": {
										"id": 866,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:8",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 882,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 870,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:8"
									},
									"parameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "856:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 867,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:8"
									},
									"returnParameters": {
										"id": 873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "914:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 871,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:8"
									},
									"scope": 883,
									"src": "829:155:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 884,
							"src": "726:260:8",
							"usedErrors": []
						}
					],
					"src": "99:888:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							895
						]
					},
					"id": 896,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 885,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 886,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:9",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 895,
							"linearizedBaseContracts": [
								895
							],
							"name": "IERC165",
							"nameLocation": "415:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 894,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "801:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 888,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:9"
									},
									"returnParameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "844:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 891,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:9"
									},
									"scope": 895,
									"src": "774:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 896,
							"src": "405:447:9",
							"usedErrors": []
						}
					],
					"src": "100:753:9"
				},
				"id": 9
			},
			"contracts/ToonzRewardsCardV2.sol": {
				"ast": {
					"absolutePath": "contracts/ToonzRewardsCardV2.sol",
					"exportedSymbols": {
						"Address": [
							560
						],
						"ApprovalCallerNotOwnerNorApproved": [
							1023
						],
						"ApprovalQueryForNonexistentToken": [
							1025
						],
						"ApprovalToCurrentOwner": [
							1029
						],
						"ApproveToCaller": [
							1027
						],
						"BalanceQueryForZeroAddress": [
							1031
						],
						"Context": [
							582
						],
						"Counters": [
							656
						],
						"ERC165": [
							883
						],
						"ERC721A": [
							2333
						],
						"IERC165": [
							895
						],
						"IERC721": [
							220
						],
						"IERC721Metadata": [
							265
						],
						"IERC721Receiver": [
							238
						],
						"MintToZeroAddress": [
							1033
						],
						"MintZeroQuantity": [
							1035
						],
						"Ownable": [
							104
						],
						"OwnerQueryForNonexistentToken": [
							1037
						],
						"Strings": [
							859
						],
						"ToonzRewardsCardV2": [
							1012
						],
						"TransferCallerNotOwnerNorApproved": [
							1039
						],
						"TransferFromIncorrectOwner": [
							1041
						],
						"TransferToNonERC721ReceiverImplementer": [
							1043
						],
						"TransferToZeroAddress": [
							1045
						],
						"URIQueryForNonexistentToken": [
							1047
						]
					},
					"id": 1013,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 897,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:10"
						},
						{
							"absolutePath": "erc721a/contracts/ERC721A.sol",
							"file": "erc721a/contracts/ERC721A.sol",
							"id": 898,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1013,
							"sourceUnit": 2334,
							"src": "59:39:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 899,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1013,
							"sourceUnit": 105,
							"src": "99:52:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
							"file": "@openzeppelin/contracts/utils/Counters.sol",
							"id": 900,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1013,
							"sourceUnit": 657,
							"src": "152:52:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 901,
										"name": "ERC721A",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2333,
										"src": "237:7:10"
									},
									"id": 902,
									"nodeType": "InheritanceSpecifier",
									"src": "237:7:10"
								},
								{
									"baseName": {
										"id": 903,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "246:7:10"
									},
									"id": 904,
									"nodeType": "InheritanceSpecifier",
									"src": "246:7:10"
								}
							],
							"canonicalName": "ToonzRewardsCardV2",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1012,
							"linearizedBaseContracts": [
								1012,
								104,
								2333,
								265,
								220,
								883,
								895,
								582
							],
							"name": "ToonzRewardsCardV2",
							"nameLocation": "215:18:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 907,
									"libraryName": {
										"id": 905,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 859,
										"src": "264:7:10"
									},
									"nodeType": "UsingForDirective",
									"src": "258:23:10",
									"typeName": {
										"id": 906,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "276:4:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"global": false,
									"id": 911,
									"libraryName": {
										"id": 908,
										"name": "Counters",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 656,
										"src": "290:8:10"
									},
									"nodeType": "UsingForDirective",
									"src": "284:36:10",
									"typeName": {
										"id": 910,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 909,
											"name": "Counters.Counter",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 588,
											"src": "303:16:10"
										},
										"referencedDeclaration": 588,
										"src": "303:16:10",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$588_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "6c0360eb",
									"id": 913,
									"mutability": "mutable",
									"name": "baseURI",
									"nameLocation": "338:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1012,
									"src": "324:21:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 912,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "324:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c6682862",
									"id": 915,
									"mutability": "mutable",
									"name": "baseExtension",
									"nameLocation": "363:13:10",
									"nodeType": "VariableDeclaration",
									"scope": 1012,
									"src": "349:27:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 914,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "349:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 922,
										"nodeType": "Block",
										"src": "441:2:10",
										"statements": []
									},
									"id": 923,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "546f6f6e7a204d696e74657220526577617264732043617264",
													"id": 918,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "403:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_97b891fde9c736a464bff90cb52cd833186881f31d1c42af3722f96d75df1638",
														"typeString": "literal_string \"Toonz Minter Rewards Card\""
													},
													"value": "Toonz Minter Rewards Card"
												},
												{
													"hexValue": "4d494e5452",
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "432:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_8a571b9f2cede2ce6402860bb65e617ec462daa1d8765ea0663ab60bb2cd1024",
														"typeString": "literal_string \"MINTR\""
													},
													"value": "MINTR"
												}
											],
											"id": 920,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 917,
												"name": "ERC721A",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2333,
												"src": "395:7:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "395:45:10"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "392:2:10"
									},
									"returnParameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "441:0:10"
									},
									"scope": 1012,
									"src": "381:62:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1439
									],
									"body": {
										"id": 959,
										"nodeType": "Block",
										"src": "532:208:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 933,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 925,
																	"src": "554:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 932,
																"name": "_exists",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1665,
																"src": "546:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view returns (bool)"
																}
															},
															"id": 934,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "546:16:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e",
															"id": 935,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "564:49:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
																"typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
															},
															"value": "ERC721Metadata: URI query for nonexistent token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
																"typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
															}
														],
														"id": 931,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "538:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "538:76:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 937,
												"nodeType": "ExpressionStatement",
												"src": "538:76:10"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 944,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 940,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 913,
																		"src": "633:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	],
																	"id": 939,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "627:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 938,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "627:5:10",
																		"typeDescriptions": {}
																	}
																},
																"id": 941,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "627:14:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_storage_ptr",
																	"typeString": "bytes storage pointer"
																}
															},
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "627:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 943,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "651:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "627:25:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 956,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "733:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "627:108:10",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 949,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 913,
																		"src": "687:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 950,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 925,
																				"src": "696:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 951,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 741,
																			"src": "696:16:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 952,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "696:18:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"id": 953,
																		"name": "baseExtension",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 915,
																		"src": "716:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	],
																	"expression": {
																		"id": 947,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "670:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "670:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 954,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "670:60:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 946,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "663:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 945,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "663:6:10",
																"typeDescriptions": {}
															}
														},
														"id": 955,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "663:68:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 930,
												"id": 958,
												"nodeType": "Return",
												"src": "620:115:10"
											}
										]
									},
									"functionSelector": "c87b56dd",
									"id": 960,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "456:8:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 927,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "499:8:10"
									},
									"parameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "470:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "465:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 924,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "465:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "464:14:10"
									},
									"returnParameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "517:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 928,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "517:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "516:15:10"
									},
									"scope": 1012,
									"src": "447:293:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 992,
										"nodeType": "Block",
										"src": "811:133:10",
										"statements": [
											{
												"assignments": [
													969
												],
												"declarations": [
													{
														"constant": false,
														"id": 969,
														"mutability": "mutable",
														"name": "_amount",
														"nameLocation": "822:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 992,
														"src": "817:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 968,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "817:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 972,
												"initialValue": {
													"expression": {
														"id": 970,
														"name": "_recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 963,
														"src": "832:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "832:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "817:33:10"
											},
											{
												"body": {
													"id": 990,
													"nodeType": "Block",
													"src": "893:47:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 984,
																			"name": "_recipients",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 963,
																			"src": "913:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 986,
																		"indexExpression": {
																			"id": 985,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 974,
																			"src": "925:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "913:14:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "31",
																		"id": 987,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "929:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 983,
																	"name": "_safeMint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1679,
																		1697
																	],
																	"referencedDeclaration": 1679,
																	"src": "903:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 988,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "903:28:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 989,
															"nodeType": "ExpressionStatement",
															"src": "903:28:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 977,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 974,
														"src": "875:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 978,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 969,
														"src": "879:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "875:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 991,
												"initializationExpression": {
													"assignments": [
														974
													],
													"declarations": [
														{
															"constant": false,
															"id": 974,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "868:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 991,
															"src": "863:6:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 973,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "863:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 976,
													"initialValue": {
														"hexValue": "30",
														"id": 975,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "872:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "863:10:10"
												},
												"loopExpression": {
													"expression": {
														"id": 981,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "888:3:10",
														"subExpression": {
															"id": 980,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 974,
															"src": "888:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 982,
													"nodeType": "ExpressionStatement",
													"src": "888:3:10"
												},
												"nodeType": "ForStatement",
												"src": "858:82:10"
											}
										]
									},
									"functionSelector": "7a2d0163",
									"id": 993,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 966,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 965,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "801:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "801:9:10"
										}
									],
									"name": "giftCard",
									"nameLocation": "753:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "_recipients",
												"nameLocation": "781:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "762:30:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 961,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "762:7:10",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 962,
													"nodeType": "ArrayTypeName",
													"src": "762:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "761:32:10"
									},
									"returnParameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "811:0:10"
									},
									"scope": 1012,
									"src": "744:200:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1010,
										"nodeType": "Block",
										"src": "1039:65:10",
										"statements": [
											{
												"expression": {
													"id": 1004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1002,
														"name": "baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 913,
														"src": "1045:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1003,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 995,
														"src": "1055:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1045:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1005,
												"nodeType": "ExpressionStatement",
												"src": "1045:18:10"
											},
											{
												"expression": {
													"id": 1008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1006,
														"name": "baseExtension",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 915,
														"src": "1069:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1007,
														"name": "_baseExtension",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 997,
														"src": "1085:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1069:30:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1009,
												"nodeType": "ExpressionStatement",
												"src": "1069:30:10"
											}
										]
									},
									"functionSelector": "6790a9de",
									"id": 1011,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1000,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 999,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1029:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1029:9:10"
										}
									],
									"name": "setBaseURI",
									"nameLocation": "957:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "_baseURI",
												"nameLocation": "982:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "968:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 994,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "968:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "_baseExtension",
												"nameLocation": "1006:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "992:28:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 996,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "992:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "967:54:10"
									},
									"returnParameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1039:0:10"
									},
									"scope": 1012,
									"src": "948:156:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1013,
							"src": "206:901:10",
							"usedErrors": [
								1023,
								1025,
								1027,
								1029,
								1031,
								1033,
								1035,
								1037,
								1039,
								1041,
								1043,
								1045
							]
						}
					],
					"src": "33:1074:10"
				},
				"id": 10
			},
			"erc721a/contracts/ERC721A.sol": {
				"ast": {
					"absolutePath": "erc721a/contracts/ERC721A.sol",
					"exportedSymbols": {
						"Address": [
							560
						],
						"ApprovalCallerNotOwnerNorApproved": [
							1023
						],
						"ApprovalQueryForNonexistentToken": [
							1025
						],
						"ApprovalToCurrentOwner": [
							1029
						],
						"ApproveToCaller": [
							1027
						],
						"BalanceQueryForZeroAddress": [
							1031
						],
						"Context": [
							582
						],
						"ERC165": [
							883
						],
						"ERC721A": [
							2333
						],
						"IERC165": [
							895
						],
						"IERC721": [
							220
						],
						"IERC721Metadata": [
							265
						],
						"IERC721Receiver": [
							238
						],
						"MintToZeroAddress": [
							1033
						],
						"MintZeroQuantity": [
							1035
						],
						"OwnerQueryForNonexistentToken": [
							1037
						],
						"Strings": [
							859
						],
						"TransferCallerNotOwnerNorApproved": [
							1039
						],
						"TransferFromIncorrectOwner": [
							1041
						],
						"TransferToNonERC721ReceiverImplementer": [
							1043
						],
						"TransferToZeroAddress": [
							1045
						],
						"URIQueryForNonexistentToken": [
							1047
						]
					},
					"id": 2334,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1014,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "56:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1015,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2334,
							"sourceUnit": 221,
							"src": "81:58:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 1016,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2334,
							"sourceUnit": 239,
							"src": "140:66:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 1017,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2334,
							"sourceUnit": 266,
							"src": "207:77:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "@openzeppelin/contracts/utils/Address.sol",
							"id": 1018,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2334,
							"sourceUnit": 561,
							"src": "285:51:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "@openzeppelin/contracts/utils/Context.sol",
							"id": 1019,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2334,
							"sourceUnit": 583,
							"src": "337:51:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 1020,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2334,
							"sourceUnit": 860,
							"src": "389:51:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"id": 1021,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2334,
							"sourceUnit": 884,
							"src": "441:64:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"errorSelector": "cfb3b942",
							"id": 1023,
							"name": "ApprovalCallerNotOwnerNorApproved",
							"nameLocation": "513:33:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1022,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "546:2:11"
							},
							"src": "507:42:11"
						},
						{
							"errorSelector": "cf4700e4",
							"id": 1025,
							"name": "ApprovalQueryForNonexistentToken",
							"nameLocation": "556:32:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1024,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "588:2:11"
							},
							"src": "550:41:11"
						},
						{
							"errorSelector": "b06307db",
							"id": 1027,
							"name": "ApproveToCaller",
							"nameLocation": "598:15:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1026,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "613:2:11"
							},
							"src": "592:24:11"
						},
						{
							"errorSelector": "943f7b8c",
							"id": 1029,
							"name": "ApprovalToCurrentOwner",
							"nameLocation": "623:22:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1028,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "645:2:11"
							},
							"src": "617:31:11"
						},
						{
							"errorSelector": "8f4eb604",
							"id": 1031,
							"name": "BalanceQueryForZeroAddress",
							"nameLocation": "655:26:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1030,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "681:2:11"
							},
							"src": "649:35:11"
						},
						{
							"errorSelector": "2e076300",
							"id": 1033,
							"name": "MintToZeroAddress",
							"nameLocation": "691:17:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1032,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "708:2:11"
							},
							"src": "685:26:11"
						},
						{
							"errorSelector": "b562e8dd",
							"id": 1035,
							"name": "MintZeroQuantity",
							"nameLocation": "718:16:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1034,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "734:2:11"
							},
							"src": "712:25:11"
						},
						{
							"errorSelector": "df2d9b42",
							"id": 1037,
							"name": "OwnerQueryForNonexistentToken",
							"nameLocation": "744:29:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1036,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "773:2:11"
							},
							"src": "738:38:11"
						},
						{
							"errorSelector": "59c896be",
							"id": 1039,
							"name": "TransferCallerNotOwnerNorApproved",
							"nameLocation": "783:33:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1038,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "816:2:11"
							},
							"src": "777:42:11"
						},
						{
							"errorSelector": "a1148100",
							"id": 1041,
							"name": "TransferFromIncorrectOwner",
							"nameLocation": "826:26:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1040,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "852:2:11"
							},
							"src": "820:35:11"
						},
						{
							"errorSelector": "d1a57ed6",
							"id": 1043,
							"name": "TransferToNonERC721ReceiverImplementer",
							"nameLocation": "862:38:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1042,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "900:2:11"
							},
							"src": "856:47:11"
						},
						{
							"errorSelector": "ea553b34",
							"id": 1045,
							"name": "TransferToZeroAddress",
							"nameLocation": "910:21:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1044,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "931:2:11"
							},
							"src": "904:30:11"
						},
						{
							"errorSelector": "a14c4b50",
							"id": 1047,
							"name": "URIQueryForNonexistentToken",
							"nameLocation": "941:27:11",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1046,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "968:2:11"
							},
							"src": "935:36:11"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1049,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 582,
										"src": "1484:7:11"
									},
									"id": 1050,
									"nodeType": "InheritanceSpecifier",
									"src": "1484:7:11"
								},
								{
									"baseName": {
										"id": 1051,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 883,
										"src": "1493:6:11"
									},
									"id": 1052,
									"nodeType": "InheritanceSpecifier",
									"src": "1493:6:11"
								},
								{
									"baseName": {
										"id": 1053,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "1501:7:11"
									},
									"id": 1054,
									"nodeType": "InheritanceSpecifier",
									"src": "1501:7:11"
								},
								{
									"baseName": {
										"id": 1055,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "1510:15:11"
									},
									"id": 1056,
									"nodeType": "InheritanceSpecifier",
									"src": "1510:15:11"
								}
							],
							"canonicalName": "ERC721A",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1048,
								"nodeType": "StructuredDocumentation",
								"src": "973:490:11",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension. Built to optimize for lower gas during batch mints.\n Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256)."
							},
							"fullyImplemented": true,
							"id": 2333,
							"linearizedBaseContracts": [
								2333,
								265,
								220,
								883,
								895,
								582
							],
							"name": "ERC721A",
							"nameLocation": "1473:7:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1059,
									"libraryName": {
										"id": 1057,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 560,
										"src": "1538:7:11"
									},
									"nodeType": "UsingForDirective",
									"src": "1532:26:11",
									"typeName": {
										"id": 1058,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1550:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"global": false,
									"id": 1062,
									"libraryName": {
										"id": 1060,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 859,
										"src": "1569:7:11"
									},
									"nodeType": "UsingForDirective",
									"src": "1563:26:11",
									"typeName": {
										"id": 1061,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1581:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "ERC721A.TokenOwnership",
									"id": 1069,
									"members": [
										{
											"constant": false,
											"id": 1064,
											"mutability": "mutable",
											"name": "addr",
											"nameLocation": "1730:4:11",
											"nodeType": "VariableDeclaration",
											"scope": 1069,
											"src": "1722:12:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1063,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1722:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1066,
											"mutability": "mutable",
											"name": "startTimestamp",
											"nameLocation": "1843:14:11",
											"nodeType": "VariableDeclaration",
											"scope": 1069,
											"src": "1836:21:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1065,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "1836:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1068,
											"mutability": "mutable",
											"name": "burned",
											"nameLocation": "1918:6:11",
											"nodeType": "VariableDeclaration",
											"scope": 1069,
											"src": "1913:11:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1067,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1913:4:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenOwnership",
									"nameLocation": "1660:14:11",
									"nodeType": "StructDefinition",
									"scope": 2333,
									"src": "1653:278:11",
									"visibility": "public"
								},
								{
									"canonicalName": "ERC721A.AddressData",
									"id": 1078,
									"members": [
										{
											"constant": false,
											"id": 1071,
											"mutability": "mutable",
											"name": "balance",
											"nameLocation": "2086:7:11",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2079:14:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1070,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2079:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1073,
											"mutability": "mutable",
											"name": "numberMinted",
											"nameLocation": "2185:12:11",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2178:19:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1072,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2178:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1075,
											"mutability": "mutable",
											"name": "numberBurned",
											"nameLocation": "2289:12:11",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2282:19:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1074,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2282:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1077,
											"mutability": "mutable",
											"name": "aux",
											"nameLocation": "2516:3:11",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2509:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1076,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2509:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressData",
									"nameLocation": "2002:11:11",
									"nodeType": "StructDefinition",
									"scope": 2333,
									"src": "1995:531:11",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1080,
									"mutability": "mutable",
									"name": "_currentIndex",
									"nameLocation": "2600:13:11",
									"nodeType": "VariableDeclaration",
									"scope": 2333,
									"src": "2583:30:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1079,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2583:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1082,
									"mutability": "mutable",
									"name": "_burnCounter",
									"nameLocation": "2673:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 2333,
									"src": "2656:29:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1081,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2656:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1084,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "2725:5:11",
									"nodeType": "VariableDeclaration",
									"scope": 2333,
									"src": "2710:20:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1083,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2710:6:11",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1086,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "2772:7:11",
									"nodeType": "VariableDeclaration",
									"scope": 2333,
									"src": "2757:22:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1085,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2757:6:11",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1091,
									"mutability": "mutable",
									"name": "_ownerships",
									"nameLocation": "3002:11:11",
									"nodeType": "VariableDeclaration",
									"scope": 2333,
									"src": "2958:55:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
										"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership)"
									},
									"typeName": {
										"id": 1090,
										"keyType": {
											"id": 1087,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2966:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "2958:34:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
											"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership)"
										},
										"valueType": {
											"id": 1089,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1088,
												"name": "TokenOwnership",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1069,
												"src": "2977:14:11"
											},
											"referencedDeclaration": 1069,
											"src": "2977:14:11",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
												"typeString": "struct ERC721A.TokenOwnership"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1096,
									"mutability": "mutable",
									"name": "_addressData",
									"nameLocation": "3105:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 2333,
									"src": "3065:52:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
										"typeString": "mapping(address => struct ERC721A.AddressData)"
									},
									"typeName": {
										"id": 1095,
										"keyType": {
											"id": 1092,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3073:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3065:31:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
											"typeString": "mapping(address => struct ERC721A.AddressData)"
										},
										"valueType": {
											"id": 1094,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1093,
												"name": "AddressData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1078,
												"src": "3084:11:11"
											},
											"referencedDeclaration": 1078,
											"src": "3084:11:11",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_AddressData_$1078_storage_ptr",
												"typeString": "struct ERC721A.AddressData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1100,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "3209:15:11",
									"nodeType": "VariableDeclaration",
									"scope": 2333,
									"src": "3173:51:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 1099,
										"keyType": {
											"id": 1097,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3181:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "3173:27:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 1098,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3192:7:11",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1106,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "3332:18:11",
									"nodeType": "VariableDeclaration",
									"scope": 2333,
									"src": "3279:71:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 1105,
										"keyType": {
											"id": 1101,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3287:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3279:44:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 1104,
											"keyType": {
												"id": 1102,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3306:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "3298:24:11",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 1103,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "3317:4:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1126,
										"nodeType": "Block",
										"src": "3413:98:11",
										"statements": [
											{
												"expression": {
													"id": 1115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1113,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1084,
														"src": "3423:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1114,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1108,
														"src": "3431:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3423:13:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1116,
												"nodeType": "ExpressionStatement",
												"src": "3423:13:11"
											},
											{
												"expression": {
													"id": 1119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1117,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1086,
														"src": "3446:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1118,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1110,
														"src": "3456:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3446:17:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1120,
												"nodeType": "ExpressionStatement",
												"src": "3446:17:11"
											},
											{
												"expression": {
													"id": 1124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1121,
														"name": "_currentIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1080,
														"src": "3473:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1122,
															"name": "_startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1136,
															"src": "3489:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1123,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3489:15:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3473:31:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1125,
												"nodeType": "ExpressionStatement",
												"src": "3473:31:11"
											}
										]
									},
									"id": 1127,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "3383:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "3369:19:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1107,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3369:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "3404:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "3390:21:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1109,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3390:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3368:44:11"
									},
									"returnParameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3413:0:11"
									},
									"scope": 2333,
									"src": "3357:154:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1135,
										"nodeType": "Block",
										"src": "3668:25:11",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1133,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3685:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1132,
												"id": 1134,
												"nodeType": "Return",
												"src": "3678:8:11"
											}
										]
									},
									"documentation": {
										"id": 1128,
										"nodeType": "StructuredDocumentation",
										"src": "3517:81:11",
										"text": " To change the starting tokenId, please override this function."
									},
									"id": 1136,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_startTokenId",
									"nameLocation": "3612:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3625:2:11"
									},
									"returnParameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "3659:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3659:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3658:9:11"
									},
									"scope": 2333,
									"src": "3603:90:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1150,
										"nodeType": "Block",
										"src": "3875:244:11",
										"statements": [
											{
												"id": 1149,
												"nodeType": "UncheckedBlock",
												"src": "4025:88:11",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1142,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1080,
																	"src": "4056:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1143,
																	"name": "_burnCounter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1082,
																	"src": "4072:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4056:28:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1145,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1136,
																	"src": "4087:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1146,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4087:15:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4056:46:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1141,
														"id": 1148,
														"nodeType": "Return",
														"src": "4049:53:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1137,
										"nodeType": "StructuredDocumentation",
										"src": "3699:118:11",
										"text": " @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
									},
									"functionSelector": "18160ddd",
									"id": 1151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3831:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3842:2:11"
									},
									"returnParameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "3866:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3866:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3865:9:11"
									},
									"scope": 2333,
									"src": "3822:297:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1163,
										"nodeType": "Block",
										"src": "4263:221:11",
										"statements": [
											{
												"id": 1162,
												"nodeType": "UncheckedBlock",
												"src": "4405:73:11",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1157,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1080,
																"src": "4436:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1158,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1136,
																	"src": "4452:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4452:15:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4436:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1156,
														"id": 1161,
														"nodeType": "Return",
														"src": "4429:38:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1152,
										"nodeType": "StructuredDocumentation",
										"src": "4125:77:11",
										"text": " Returns the total amount of tokens minted in the contract."
									},
									"id": 1164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_totalMinted",
									"nameLocation": "4216:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4228:2:11"
									},
									"returnParameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "4254:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4254:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4253:9:11"
									},
									"scope": 2333,
									"src": "4207:277:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										882,
										894
									],
									"body": {
										"id": 1194,
										"nodeType": "Block",
										"src": "4659:192:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1187,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1175,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1167,
																"src": "4688:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1177,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 220,
																			"src": "4708:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$220_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$220_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 1176,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "4703:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1178,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4703:13:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$220",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 1179,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "4703:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "4688:40:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1181,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1167,
																"src": "4744:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1183,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 265,
																			"src": "4764:15:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$265_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$265_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 1182,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "4759:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4759:21:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$265",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 1185,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "4759:33:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "4744:48:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "4688:104:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 1190,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1167,
																"src": "4832:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 1188,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "4808:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721A_$2333_$",
																	"typeString": "type(contract super ERC721A)"
																}
															},
															"id": 1189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 882,
															"src": "4808:23:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 1191,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4808:36:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4688:156:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1174,
												"id": 1193,
												"nodeType": "Return",
												"src": "4669:175:11"
											}
										]
									},
									"documentation": {
										"id": 1165,
										"nodeType": "StructuredDocumentation",
										"src": "4490:56:11",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1195,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "4560:17:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1171,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1169,
												"name": "ERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 883,
												"src": "4627:6:11"
											},
											{
												"id": 1170,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 895,
												"src": "4635:7:11"
											}
										],
										"src": "4618:25:11"
									},
									"parameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "4585:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "4578:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1166,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "4578:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4577:20:11"
									},
									"returnParameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "4653:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1172,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4653:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4652:6:11"
									},
									"scope": 2333,
									"src": "4551:300:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										145
									],
									"body": {
										"id": 1222,
										"nodeType": "Block",
										"src": "4983:130:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1204,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1198,
														"src": "4997:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5014:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1206,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5006:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1205,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5006:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1208,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5006:10:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4997:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1213,
												"nodeType": "IfStatement",
												"src": "4993:60:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1210,
															"name": "BalanceQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1031,
															"src": "5025:26:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1211,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5025:28:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1212,
													"nodeType": "RevertStatement",
													"src": "5018:35:11"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1216,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1096,
																	"src": "5078:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 1218,
																"indexExpression": {
																	"id": 1217,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1198,
																	"src": "5091:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5078:19:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 1219,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1071,
															"src": "5078:27:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1215,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5070:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1214,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5070:7:11",
															"typeDescriptions": {}
														}
													},
													"id": 1220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5070:36:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1203,
												"id": 1221,
												"nodeType": "Return",
												"src": "5063:43:11"
											}
										]
									},
									"documentation": {
										"id": 1196,
										"nodeType": "StructuredDocumentation",
										"src": "4857:48:11",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1223,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4919:9:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1200,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4956:8:11"
									},
									"parameters": {
										"id": 1199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4937:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "4929:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4929:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4928:15:11"
									},
									"returnParameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "4974:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4974:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4973:9:11"
									},
									"scope": 2333,
									"src": "4910:203:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1239,
										"nodeType": "Block",
										"src": "5260:65:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1233,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1096,
																	"src": "5285:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 1235,
																"indexExpression": {
																	"id": 1234,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1226,
																	"src": "5298:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5285:19:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 1236,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "numberMinted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1073,
															"src": "5285:32:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1232,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5277:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1231,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5277:7:11",
															"typeDescriptions": {}
														}
													},
													"id": 1237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5277:41:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1230,
												"id": 1238,
												"nodeType": "Return",
												"src": "5270:48:11"
											}
										]
									},
									"documentation": {
										"id": 1224,
										"nodeType": "StructuredDocumentation",
										"src": "5119:66:11",
										"text": " Returns the number of tokens minted by `owner`."
									},
									"id": 1240,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberMinted",
									"nameLocation": "5199:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1226,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5221:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "5213:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5213:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5212:15:11"
									},
									"returnParameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "5251:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5251:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5250:9:11"
									},
									"scope": 2333,
									"src": "5190:135:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1256,
										"nodeType": "Block",
										"src": "5488:65:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1250,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1096,
																	"src": "5513:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 1252,
																"indexExpression": {
																	"id": 1251,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1243,
																	"src": "5526:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5513:19:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 1253,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "numberBurned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1075,
															"src": "5513:32:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1249,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5505:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1248,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5505:7:11",
															"typeDescriptions": {}
														}
													},
													"id": 1254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5505:41:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1247,
												"id": 1255,
												"nodeType": "Return",
												"src": "5498:48:11"
											}
										]
									},
									"documentation": {
										"id": 1241,
										"nodeType": "StructuredDocumentation",
										"src": "5331:82:11",
										"text": " Returns the number of tokens burned by or on behalf of `owner`."
									},
									"id": 1257,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberBurned",
									"nameLocation": "5427:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5449:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "5441:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5441:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5440:15:11"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "5479:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5479:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5478:9:11"
									},
									"scope": 2333,
									"src": "5418:135:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1270,
										"nodeType": "Block",
										"src": "5729:47:11",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 1265,
															"name": "_addressData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1096,
															"src": "5746:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
															}
														},
														"id": 1267,
														"indexExpression": {
															"id": 1266,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1260,
															"src": "5759:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5746:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressData_$1078_storage",
															"typeString": "struct ERC721A.AddressData storage ref"
														}
													},
													"id": 1268,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "aux",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1077,
													"src": "5746:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 1264,
												"id": 1269,
												"nodeType": "Return",
												"src": "5739:30:11"
											}
										]
									},
									"documentation": {
										"id": 1258,
										"nodeType": "StructuredDocumentation",
										"src": "5559:102:11",
										"text": " Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used)."
									},
									"id": 1271,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAux",
									"nameLocation": "5675:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5691:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1271,
												"src": "5683:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5683:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5682:15:11"
									},
									"returnParameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1271,
												"src": "5721:6:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1262,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5721:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5720:8:11"
									},
									"scope": 2333,
									"src": "5666:110:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1286,
										"nodeType": "Block",
										"src": "6011:46:11",
										"statements": [
											{
												"expression": {
													"id": 1284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1279,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1096,
																"src": "6021:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																	"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																}
															},
															"id": 1281,
															"indexExpression": {
																"id": 1280,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1274,
																"src": "6034:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6021:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																"typeString": "struct ERC721A.AddressData storage ref"
															}
														},
														"id": 1282,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "aux",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1077,
														"src": "6021:23:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1283,
														"name": "aux",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1276,
														"src": "6047:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6021:29:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 1285,
												"nodeType": "ExpressionStatement",
												"src": "6021:29:11"
											}
										]
									},
									"documentation": {
										"id": 1272,
										"nodeType": "StructuredDocumentation",
										"src": "5782:171:11",
										"text": " Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n If there are multiple variables, please pack them into a uint64."
									},
									"id": 1287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setAux",
									"nameLocation": "5967:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1274,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5983:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "5975:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5975:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "aux",
												"nameLocation": "5997:3:11",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "5990:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1275,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5990:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5974:27:11"
									},
									"returnParameters": {
										"id": 1278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6011:0:11"
									},
									"scope": 2333,
									"src": "5958:99:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1360,
										"nodeType": "Block",
										"src": "6338:999:11",
										"statements": [
											{
												"assignments": [
													1297
												],
												"declarations": [
													{
														"constant": false,
														"id": 1297,
														"mutability": "mutable",
														"name": "curr",
														"nameLocation": "6356:4:11",
														"nodeType": "VariableDeclaration",
														"scope": 1360,
														"src": "6348:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1296,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6348:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1299,
												"initialValue": {
													"id": 1298,
													"name": "tokenId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1290,
													"src": "6363:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6348:22:11"
											},
											{
												"id": 1356,
												"nodeType": "UncheckedBlock",
												"src": "6381:902:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1307,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1300,
																		"name": "_startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1136,
																		"src": "6409:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 1301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6409:15:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1302,
																	"name": "curr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1297,
																	"src": "6428:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6409:23:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1304,
																	"name": "curr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1297,
																	"src": "6436:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1305,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1080,
																	"src": "6443:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6436:20:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "6409:47:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1355,
														"nodeType": "IfStatement",
														"src": "6405:868:11",
														"trueBody": {
															"id": 1354,
															"nodeType": "Block",
															"src": "6458:815:11",
															"statements": [
																{
																	"assignments": [
																		1310
																	],
																	"declarations": [
																		{
																			"constant": false,
																			"id": 1310,
																			"mutability": "mutable",
																			"name": "ownership",
																			"nameLocation": "6498:9:11",
																			"nodeType": "VariableDeclaration",
																			"scope": 1354,
																			"src": "6476:31:11",
																			"stateVariable": false,
																			"storageLocation": "memory",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																				"typeString": "struct ERC721A.TokenOwnership"
																			},
																			"typeName": {
																				"id": 1309,
																				"nodeType": "UserDefinedTypeName",
																				"pathNode": {
																					"id": 1308,
																					"name": "TokenOwnership",
																					"nodeType": "IdentifierPath",
																					"referencedDeclaration": 1069,
																					"src": "6476:14:11"
																				},
																				"referencedDeclaration": 1069,
																				"src": "6476:14:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																					"typeString": "struct ERC721A.TokenOwnership"
																				}
																			},
																			"visibility": "internal"
																		}
																	],
																	"id": 1314,
																	"initialValue": {
																		"baseExpression": {
																			"id": 1311,
																			"name": "_ownerships",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "6510:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																				"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																			}
																		},
																		"id": 1313,
																		"indexExpression": {
																			"id": 1312,
																			"name": "curr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1297,
																			"src": "6522:4:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6510:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																			"typeString": "struct ERC721A.TokenOwnership storage ref"
																		}
																	},
																	"nodeType": "VariableDeclarationStatement",
																	"src": "6476:51:11"
																},
																{
																	"condition": {
																		"id": 1317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "!",
																		"prefix": true,
																		"src": "6549:17:11",
																		"subExpression": {
																			"expression": {
																				"id": 1315,
																				"name": "ownership",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1310,
																				"src": "6550:9:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																					"typeString": "struct ERC721A.TokenOwnership memory"
																				}
																			},
																			"id": 1316,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "burned",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1068,
																			"src": "6550:16:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1353,
																	"nodeType": "IfStatement",
																	"src": "6545:714:11",
																	"trueBody": {
																		"id": 1352,
																		"nodeType": "Block",
																		"src": "6568:691:11",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					"id": 1324,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 1318,
																							"name": "ownership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1310,
																							"src": "6594:9:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 1319,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1064,
																						"src": "6594:14:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "!=",
																					"rightExpression": {
																						"arguments": [
																							{
																								"hexValue": "30",
																								"id": 1322,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "6620:1:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								},
																								"value": "0"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								}
																							],
																							"id": 1321,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "6612:7:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 1320,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "6612:7:11",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 1323,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "6612:10:11",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "6594:28:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1328,
																				"nodeType": "IfStatement",
																				"src": "6590:99:11",
																				"trueBody": {
																					"id": 1327,
																					"nodeType": "Block",
																					"src": "6624:65:11",
																					"statements": [
																						{
																							"expression": {
																								"id": 1325,
																								"name": "ownership",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1310,
																								"src": "6657:9:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																									"typeString": "struct ERC721A.TokenOwnership memory"
																								}
																							},
																							"functionReturnParameters": 1295,
																							"id": 1326,
																							"nodeType": "Return",
																							"src": "6650:16:11"
																						}
																					]
																				}
																			},
																			{
																				"body": {
																					"id": 1350,
																					"nodeType": "Block",
																					"src": "6999:242:11",
																					"statements": [
																						{
																							"expression": {
																								"id": 1331,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "UnaryOperation",
																								"operator": "--",
																								"prefix": false,
																								"src": "7025:6:11",
																								"subExpression": {
																									"id": 1330,
																									"name": "curr",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1297,
																									"src": "7025:4:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"id": 1332,
																							"nodeType": "ExpressionStatement",
																							"src": "7025:6:11"
																						},
																						{
																							"expression": {
																								"id": 1337,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftHandSide": {
																									"id": 1333,
																									"name": "ownership",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1310,
																									"src": "7057:9:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																										"typeString": "struct ERC721A.TokenOwnership memory"
																									}
																								},
																								"nodeType": "Assignment",
																								"operator": "=",
																								"rightHandSide": {
																									"baseExpression": {
																										"id": 1334,
																										"name": "_ownerships",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1091,
																										"src": "7069:11:11",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																											"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																										}
																									},
																									"id": 1336,
																									"indexExpression": {
																										"id": 1335,
																										"name": "curr",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1297,
																										"src": "7081:4:11",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "7069:17:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																										"typeString": "struct ERC721A.TokenOwnership storage ref"
																									}
																								},
																								"src": "7057:29:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																									"typeString": "struct ERC721A.TokenOwnership memory"
																								}
																							},
																							"id": 1338,
																							"nodeType": "ExpressionStatement",
																							"src": "7057:29:11"
																						},
																						{
																							"condition": {
																								"commonType": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								"id": 1345,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"expression": {
																										"id": 1339,
																										"name": "ownership",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1310,
																										"src": "7116:9:11",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																											"typeString": "struct ERC721A.TokenOwnership memory"
																										}
																									},
																									"id": 1340,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "addr",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1064,
																									"src": "7116:14:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "!=",
																								"rightExpression": {
																									"arguments": [
																										{
																											"hexValue": "30",
																											"id": 1343,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "7142:1:11",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_0_by_1",
																												"typeString": "int_const 0"
																											},
																											"value": "0"
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_rational_0_by_1",
																												"typeString": "int_const 0"
																											}
																										],
																										"id": 1342,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"lValueRequested": false,
																										"nodeType": "ElementaryTypeNameExpression",
																										"src": "7134:7:11",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_address_$",
																											"typeString": "type(address)"
																										},
																										"typeName": {
																											"id": 1341,
																											"name": "address",
																											"nodeType": "ElementaryTypeName",
																											"src": "7134:7:11",
																											"typeDescriptions": {}
																										}
																									},
																									"id": 1344,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "typeConversion",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "7134:10:11",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"src": "7116:28:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bool",
																									"typeString": "bool"
																								}
																							},
																							"id": 1349,
																							"nodeType": "IfStatement",
																							"src": "7112:107:11",
																							"trueBody": {
																								"id": 1348,
																								"nodeType": "Block",
																								"src": "7146:73:11",
																								"statements": [
																									{
																										"expression": {
																											"id": 1346,
																											"name": "ownership",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1310,
																											"src": "7183:9:11",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																												"typeString": "struct ERC721A.TokenOwnership memory"
																											}
																										},
																										"functionReturnParameters": 1295,
																										"id": 1347,
																										"nodeType": "Return",
																										"src": "7176:16:11"
																									}
																								]
																							}
																						}
																					]
																				},
																				"condition": {
																					"hexValue": "74727565",
																					"id": 1329,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6993:4:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				"id": 1351,
																				"nodeType": "WhileStatement",
																				"src": "6986:255:11"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"errorCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1357,
														"name": "OwnerQueryForNonexistentToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1037,
														"src": "7299:29:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_error_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 1358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7299:31:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1359,
												"nodeType": "RevertStatement",
												"src": "7292:38:11"
											}
										]
									},
									"documentation": {
										"id": 1288,
										"nodeType": "StructuredDocumentation",
										"src": "6063:185:11",
										"text": " Gas spent here starts off proportional to the maximum mint batch size.\n It gradually moves to O(1) as tokens get transferred around in the collection over time."
									},
									"id": 1361,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownershipOf",
									"nameLocation": "6262:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6283:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "6275:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6275:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6274:17:11"
									},
									"returnParameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "6315:21:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
													"typeString": "struct ERC721A.TokenOwnership"
												},
												"typeName": {
													"id": 1293,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1292,
														"name": "TokenOwnership",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1069,
														"src": "6315:14:11"
													},
													"referencedDeclaration": 1069,
													"src": "6315:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
														"typeString": "struct ERC721A.TokenOwnership"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6314:23:11"
									},
									"scope": 2333,
									"src": "6253:1084:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										153
									],
									"body": {
										"id": 1375,
										"nodeType": "Block",
										"src": "7467:50:11",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1371,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1364,
																"src": "7497:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1370,
															"name": "_ownershipOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1361,
															"src": "7484:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$1069_memory_ptr_$",
																"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
															}
														},
														"id": 1372,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7484:21:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership memory"
														}
													},
													"id": 1373,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1064,
													"src": "7484:26:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1369,
												"id": 1374,
												"nodeType": "Return",
												"src": "7477:33:11"
											}
										]
									},
									"documentation": {
										"id": 1362,
										"nodeType": "StructuredDocumentation",
										"src": "7343:46:11",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 1376,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "7403:7:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1366,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7440:8:11"
									},
									"parameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7419:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1376,
												"src": "7411:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7411:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7410:17:11"
									},
									"returnParameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1376,
												"src": "7458:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7458:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7457:9:11"
									},
									"scope": 2333,
									"src": "7394:123:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										250
									],
									"body": {
										"id": 1385,
										"nodeType": "Block",
										"src": "7648:29:11",
										"statements": [
											{
												"expression": {
													"id": 1383,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1084,
													"src": "7665:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1382,
												"id": 1384,
												"nodeType": "Return",
												"src": "7658:12:11"
											}
										]
									},
									"documentation": {
										"id": 1377,
										"nodeType": "StructuredDocumentation",
										"src": "7523:51:11",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 1386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "7588:4:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1379,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7615:8:11"
									},
									"parameters": {
										"id": 1378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7592:2:11"
									},
									"returnParameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1386,
												"src": "7633:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1380,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7633:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7632:15:11"
									},
									"scope": 2333,
									"src": "7579:98:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										256
									],
									"body": {
										"id": 1395,
										"nodeType": "Block",
										"src": "7812:31:11",
										"statements": [
											{
												"expression": {
													"id": 1393,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1086,
													"src": "7829:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1392,
												"id": 1394,
												"nodeType": "Return",
												"src": "7822:14:11"
											}
										]
									},
									"documentation": {
										"id": 1387,
										"nodeType": "StructuredDocumentation",
										"src": "7683:53:11",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 1396,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "7750:6:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1389,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7779:8:11"
									},
									"parameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7756:2:11"
									},
									"returnParameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1396,
												"src": "7797:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1390,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7797:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7796:15:11"
									},
									"scope": 2333,
									"src": "7741:102:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										264
									],
									"body": {
										"id": 1438,
										"nodeType": "Block",
										"src": "7997:225:11",
										"statements": [
											{
												"condition": {
													"id": 1408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "8011:17:11",
													"subExpression": {
														"arguments": [
															{
																"id": 1406,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1399,
																"src": "8020:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1405,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1665,
															"src": "8012:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 1407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8012:16:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1412,
												"nodeType": "IfStatement",
												"src": "8007:59:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1409,
															"name": "URIQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1047,
															"src": "8037:27:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1410,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8037:29:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1411,
													"nodeType": "RevertStatement",
													"src": "8030:36:11"
												}
											},
											{
												"assignments": [
													1414
												],
												"declarations": [
													{
														"constant": false,
														"id": 1414,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "8091:7:11",
														"nodeType": "VariableDeclaration",
														"scope": 1438,
														"src": "8077:21:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1413,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "8077:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1417,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1415,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "8101:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 1416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8101:10:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8077:34:11"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1420,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1414,
																		"src": "8134:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1419,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8128:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1418,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "8128:5:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1421,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8128:14:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8128:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1423,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8153:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8128:26:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 1435,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8213:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 1436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8128:87:11",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1429,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1414,
																		"src": "8181:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 1430,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1399,
																				"src": "8190:7:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1431,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 741,
																			"src": "8190:16:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 1432,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8190:18:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 1427,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "8164:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "8164:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1433,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8164:45:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1426,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8157:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1425,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "8157:6:11",
																"typeDescriptions": {}
															}
														},
														"id": 1434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8157:53:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1404,
												"id": 1437,
												"nodeType": "Return",
												"src": "8121:94:11"
											}
										]
									},
									"documentation": {
										"id": 1397,
										"nodeType": "StructuredDocumentation",
										"src": "7849:55:11",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 1439,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "7918:8:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1401,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7964:8:11"
									},
									"parameters": {
										"id": 1400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1399,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7935:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1439,
												"src": "7927:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7927:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7926:17:11"
									},
									"returnParameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1439,
												"src": "7982:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1402,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7982:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7981:15:11"
									},
									"scope": 2333,
									"src": "7909:313:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1447,
										"nodeType": "Block",
										"src": "8529:26:11",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 1445,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8546:2:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 1444,
												"id": 1446,
												"nodeType": "Return",
												"src": "8539:9:11"
											}
										]
									},
									"documentation": {
										"id": 1440,
										"nodeType": "StructuredDocumentation",
										"src": "8228:230:11",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overriden in child contracts."
									},
									"id": 1448,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "8472:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8480:2:11"
									},
									"returnParameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "8514:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1442,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8514:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8513:15:11"
									},
									"scope": 2333,
									"src": "8463:92:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										181
									],
									"body": {
										"id": 1493,
										"nodeType": "Block",
										"src": "8674:300:11",
										"statements": [
											{
												"assignments": [
													1458
												],
												"declarations": [
													{
														"constant": false,
														"id": 1458,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "8692:5:11",
														"nodeType": "VariableDeclaration",
														"scope": 1493,
														"src": "8684:13:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1457,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8684:7:11",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1463,
												"initialValue": {
													"arguments": [
														{
															"id": 1461,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1453,
															"src": "8716:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1459,
															"name": "ERC721A",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2333,
															"src": "8700:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721A_$2333_$",
																"typeString": "type(contract ERC721A)"
															}
														},
														"id": 1460,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1376,
														"src": "8700:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8700:24:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8684:40:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1464,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1451,
														"src": "8738:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1465,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1458,
														"src": "8744:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8738:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1470,
												"nodeType": "IfStatement",
												"src": "8734:48:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1467,
															"name": "ApprovalToCurrentOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1029,
															"src": "8758:22:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1468,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8758:24:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1469,
													"nodeType": "RevertStatement",
													"src": "8751:31:11"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1474,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1471,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 572,
																"src": "8797:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1472,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8797:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 1473,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "8813:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "8797:21:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "8822:38:11",
														"subExpression": {
															"arguments": [
																{
																	"id": 1476,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1458,
																	"src": "8840:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1477,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 572,
																		"src": "8847:10:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1478,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8847:12:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1475,
																"name": "isApprovedForAll",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1568,
																"src": "8823:16:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address,address) view returns (bool)"
																}
															},
															"id": 1479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8823:37:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8797:63:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1486,
												"nodeType": "IfStatement",
												"src": "8793:136:11",
												"trueBody": {
													"id": 1485,
													"nodeType": "Block",
													"src": "8862:67:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1482,
																	"name": "ApprovalCallerNotOwnerNorApproved",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1023,
																	"src": "8883:33:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8883:35:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1484,
															"nodeType": "RevertStatement",
															"src": "8876:42:11"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1488,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1451,
															"src": "8948:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1489,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1453,
															"src": "8952:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1490,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "8961:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1487,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2251,
														"src": "8939:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8939:28:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1492,
												"nodeType": "ExpressionStatement",
												"src": "8939:28:11"
											}
										]
									},
									"documentation": {
										"id": 1449,
										"nodeType": "StructuredDocumentation",
										"src": "8561:46:11",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 1494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "8621:7:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1455,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8665:8:11"
									},
									"parameters": {
										"id": 1454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8637:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "8629:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8629:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8649:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "8641:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1452,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8641:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8628:29:11"
									},
									"returnParameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8674:0:11"
									},
									"scope": 2333,
									"src": "8612:362:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										189
									],
									"body": {
										"id": 1515,
										"nodeType": "Block",
										"src": "9112:123:11",
										"statements": [
											{
												"condition": {
													"id": 1506,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "9126:17:11",
													"subExpression": {
														"arguments": [
															{
																"id": 1504,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1497,
																"src": "9135:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1503,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1665,
															"src": "9127:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 1505,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9127:16:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1510,
												"nodeType": "IfStatement",
												"src": "9122:64:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1507,
															"name": "ApprovalQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1025,
															"src": "9152:32:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9152:34:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1509,
													"nodeType": "RevertStatement",
													"src": "9145:41:11"
												}
											},
											{
												"expression": {
													"baseExpression": {
														"id": 1511,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "9204:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 1513,
													"indexExpression": {
														"id": 1512,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1497,
														"src": "9220:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9204:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1502,
												"id": 1514,
												"nodeType": "Return",
												"src": "9197:31:11"
											}
										]
									},
									"documentation": {
										"id": 1495,
										"nodeType": "StructuredDocumentation",
										"src": "8980:50:11",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 1516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "9044:11:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1499,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9085:8:11"
									},
									"parameters": {
										"id": 1498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1497,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9064:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1516,
												"src": "9056:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9056:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9055:17:11"
									},
									"returnParameters": {
										"id": 1502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1501,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1516,
												"src": "9103:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9103:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9102:9:11"
									},
									"scope": 2333,
									"src": "9035:200:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										197
									],
									"body": {
										"id": 1549,
										"nodeType": "Block",
										"src": "9386:198:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1525,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1519,
														"src": "9400:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1526,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 572,
															"src": "9412:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1527,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9412:12:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9400:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1532,
												"nodeType": "IfStatement",
												"src": "9396:54:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1529,
															"name": "ApproveToCaller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1027,
															"src": "9433:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1530,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9433:17:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1531,
													"nodeType": "RevertStatement",
													"src": "9426:24:11"
												}
											},
											{
												"expression": {
													"id": 1540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1533,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1106,
																"src": "9461:18:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 1537,
															"indexExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1534,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 572,
																	"src": "9480:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9480:12:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9461:32:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1538,
														"indexExpression": {
															"id": 1536,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1519,
															"src": "9494:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9461:42:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1539,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1521,
														"src": "9506:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9461:53:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1541,
												"nodeType": "ExpressionStatement",
												"src": "9461:53:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1543,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 572,
																"src": "9544:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9544:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1545,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1519,
															"src": "9558:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1546,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1521,
															"src": "9568:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1542,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 137,
														"src": "9529:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 1547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9529:48:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1548,
												"nodeType": "EmitStatement",
												"src": "9524:53:11"
											}
										]
									},
									"documentation": {
										"id": 1517,
										"nodeType": "StructuredDocumentation",
										"src": "9241:56:11",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 1550,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "9311:17:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1523,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9377:8:11"
									},
									"parameters": {
										"id": 1522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9337:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1550,
												"src": "9329:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1518,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9329:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1521,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "9352:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1550,
												"src": "9347:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1520,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9347:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9328:33:11"
									},
									"returnParameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9386:0:11"
									},
									"scope": 2333,
									"src": "9302:282:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										207
									],
									"body": {
										"id": 1567,
										"nodeType": "Block",
										"src": "9753:59:11",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1561,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1106,
															"src": "9770:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 1563,
														"indexExpression": {
															"id": 1562,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1553,
															"src": "9789:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "9770:25:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 1565,
													"indexExpression": {
														"id": 1564,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1555,
														"src": "9796:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9770:35:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1560,
												"id": 1566,
												"nodeType": "Return",
												"src": "9763:42:11"
											}
										]
									},
									"documentation": {
										"id": 1551,
										"nodeType": "StructuredDocumentation",
										"src": "9590:55:11",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 1568,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "9659:16:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1557,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9729:8:11"
									},
									"parameters": {
										"id": 1556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9684:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1568,
												"src": "9676:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1552,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9676:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9699:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1568,
												"src": "9691:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1554,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9691:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9675:33:11"
									},
									"returnParameters": {
										"id": 1560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1568,
												"src": "9747:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1558,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9747:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9746:6:11"
									},
									"scope": 2333,
									"src": "9650:162:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										173
									],
									"body": {
										"id": 1585,
										"nodeType": "Block",
										"src": "9993:45:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1580,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1571,
															"src": "10013:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1581,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1573,
															"src": "10019:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1582,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1575,
															"src": "10023:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1579,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2034,
														"src": "10003:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10003:28:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1584,
												"nodeType": "ExpressionStatement",
												"src": "10003:28:11"
											}
										]
									},
									"documentation": {
										"id": 1569,
										"nodeType": "StructuredDocumentation",
										"src": "9818:51:11",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 1586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "9883:12:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1577,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9984:8:11"
									},
									"parameters": {
										"id": 1576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1571,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "9913:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1586,
												"src": "9905:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9905:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1573,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9935:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1586,
												"src": "9927:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9927:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9955:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1586,
												"src": "9947:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9947:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9895:73:11"
									},
									"returnParameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9993:0:11"
									},
									"scope": 2333,
									"src": "9874:164:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										163
									],
									"body": {
										"id": 1604,
										"nodeType": "Block",
										"src": "10227:56:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1598,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1589,
															"src": "10254:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1599,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1591,
															"src": "10260:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1600,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1593,
															"src": "10264:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1601,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10273:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1597,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1605,
															1641
														],
														"referencedDeclaration": 1641,
														"src": "10237:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10237:39:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1603,
												"nodeType": "ExpressionStatement",
												"src": "10237:39:11"
											}
										]
									},
									"documentation": {
										"id": 1587,
										"nodeType": "StructuredDocumentation",
										"src": "10044:55:11",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 1605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "10113:16:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1595,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10218:8:11"
									},
									"parameters": {
										"id": 1594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1589,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10147:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1605,
												"src": "10139:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1588,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10139:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10169:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1605,
												"src": "10161:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10161:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1593,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10189:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1605,
												"src": "10181:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10181:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10129:73:11"
									},
									"returnParameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10227:0:11"
									},
									"scope": 2333,
									"src": "10104:179:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										219
									],
									"body": {
										"id": 1640,
										"nodeType": "Block",
										"src": "10500:208:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1619,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1608,
															"src": "10520:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1620,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1610,
															"src": "10526:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1621,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1612,
															"src": "10530:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1618,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2034,
														"src": "10510:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10510:28:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1623,
												"nodeType": "ExpressionStatement",
												"src": "10510:28:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 1624,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1610,
																"src": "10552:2:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 283,
															"src": "10552:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 1626,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10552:15:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1633,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "10571:57:11",
														"subExpression": {
															"arguments": [
																{
																	"id": 1628,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1608,
																	"src": "10603:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1629,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1610,
																	"src": "10609:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1630,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1612,
																	"src": "10613:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1631,
																	"name": "_data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1614,
																	"src": "10622:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1627,
																"name": "_checkContractOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2306,
																"src": "10572:30:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 1632,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10572:56:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "10552:76:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1639,
												"nodeType": "IfStatement",
												"src": "10548:154:11",
												"trueBody": {
													"id": 1638,
													"nodeType": "Block",
													"src": "10630:72:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1635,
																	"name": "TransferToNonERC721ReceiverImplementer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1043,
																	"src": "10651:38:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1636,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10651:40:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1637,
															"nodeType": "RevertStatement",
															"src": "10644:47:11"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1606,
										"nodeType": "StructuredDocumentation",
										"src": "10289:55:11",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 1641,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "10358:16:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1616,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10491:8:11"
									},
									"parameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1608,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10392:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "10384:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10384:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1610,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10414:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "10406:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10406:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10434:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "10426:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10426:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10464:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "10451:18:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1613,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10451:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10374:101:11"
									},
									"returnParameters": {
										"id": 1617,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10500:0:11"
									},
									"scope": 2333,
									"src": "10349:359:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1664,
										"nodeType": "Block",
										"src": "11017:109:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1656,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1649,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1136,
																	"src": "11034:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11034:15:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1651,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1644,
																"src": "11053:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11034:26:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1655,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1653,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1644,
																"src": "11064:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1654,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1080,
																"src": "11074:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11064:23:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "11034:53:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1661,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "11091:28:11",
														"subExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1657,
																	"name": "_ownerships",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1091,
																	"src": "11092:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																		"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																	}
																},
																"id": 1659,
																"indexExpression": {
																	"id": 1658,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1644,
																	"src": "11104:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11092:20:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																	"typeString": "struct ERC721A.TokenOwnership storage ref"
																}
															},
															"id": 1660,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "burned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1068,
															"src": "11092:27:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "11034:85:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1648,
												"id": 1663,
												"nodeType": "Return",
												"src": "11027:92:11"
											}
										]
									},
									"documentation": {
										"id": 1642,
										"nodeType": "StructuredDocumentation",
										"src": "10714:235:11",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),"
									},
									"id": 1665,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "10963:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1644,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10979:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "10971:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10971:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10970:17:11"
									},
									"returnParameters": {
										"id": 1648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1647,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "11011:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1646,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11011:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11010:6:11"
									},
									"scope": 2333,
									"src": "10954:172:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1678,
										"nodeType": "Block",
										"src": "11190:44:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1673,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1667,
															"src": "11210:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1674,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1669,
															"src": "11214:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1675,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11224:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1672,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1679,
															1697
														],
														"referencedDeclaration": 1697,
														"src": "11200:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 1676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11200:27:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1677,
												"nodeType": "ExpressionStatement",
												"src": "11200:27:11"
											}
										]
									},
									"id": 1679,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "11141:9:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1667,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11159:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1679,
												"src": "11151:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11151:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "11171:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1679,
												"src": "11163:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11163:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11150:30:11"
									},
									"returnParameters": {
										"id": 1671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11190:0:11"
									},
									"scope": 2333,
									"src": "11132:102:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1696,
										"nodeType": "Block",
										"src": "11693:49:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1690,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1682,
															"src": "11709:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1691,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1684,
															"src": "11713:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1692,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1686,
															"src": "11723:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1693,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11730:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1689,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1864,
														"src": "11703:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,uint256,bytes memory,bool)"
														}
													},
													"id": 1694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11703:32:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1695,
												"nodeType": "ExpressionStatement",
												"src": "11703:32:11"
											}
										]
									},
									"documentation": {
										"id": 1680,
										"nodeType": "StructuredDocumentation",
										"src": "11240:340:11",
										"text": " @dev Safely mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 1697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "11594:9:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1682,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11621:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "11613:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1681,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11613:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1684,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "11641:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "11633:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11633:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "11672:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "11659:18:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1685,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11659:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11603:80:11"
									},
									"returnParameters": {
										"id": 1688,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11693:0:11"
									},
									"scope": 2333,
									"src": "11585:157:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1863,
										"nodeType": "Block",
										"src": "12112:1610:11",
										"statements": [
											{
												"assignments": [
													1710
												],
												"declarations": [
													{
														"constant": false,
														"id": 1710,
														"mutability": "mutable",
														"name": "startTokenId",
														"nameLocation": "12130:12:11",
														"nodeType": "VariableDeclaration",
														"scope": 1863,
														"src": "12122:20:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1709,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12122:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1712,
												"initialValue": {
													"id": 1711,
													"name": "_currentIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1080,
													"src": "12145:13:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12122:36:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1713,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1700,
														"src": "12172:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1716,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12186:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1715,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12178:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1714,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12178:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1717,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12178:10:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12172:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1722,
												"nodeType": "IfStatement",
												"src": "12168:48:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1719,
															"name": "MintToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1033,
															"src": "12197:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1720,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12197:19:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1721,
													"nodeType": "RevertStatement",
													"src": "12190:26:11"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1723,
														"name": "quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1702,
														"src": "12230:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1724,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12242:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "12230:13:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1729,
												"nodeType": "IfStatement",
												"src": "12226:44:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1726,
															"name": "MintZeroQuantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "12252:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1727,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12252:18:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1728,
													"nodeType": "RevertStatement",
													"src": "12245:25:11"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1733,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12311:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1732,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12303:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1731,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12303:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1734,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12303:10:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1735,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1700,
															"src": "12315:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1736,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1710,
															"src": "12319:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1737,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1702,
															"src": "12333:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1730,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2319,
														"src": "12281:21:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12281:61:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1739,
												"nodeType": "ExpressionStatement",
												"src": "12281:61:11"
											},
											{
												"id": 1852,
												"nodeType": "UncheckedBlock",
												"src": "12589:1057:11",
												"statements": [
													{
														"expression": {
															"id": 1748,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1740,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1096,
																		"src": "12613:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1742,
																	"indexExpression": {
																		"id": 1741,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1700,
																		"src": "12626:2:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12613:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 1743,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1071,
																"src": "12613:24:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1746,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1702,
																		"src": "12648:8:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1745,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12641:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1744,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12641:6:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1747,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12641:16:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12613:44:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1749,
														"nodeType": "ExpressionStatement",
														"src": "12613:44:11"
													},
													{
														"expression": {
															"id": 1758,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1750,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1096,
																		"src": "12671:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1752,
																	"indexExpression": {
																		"id": 1751,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1700,
																		"src": "12684:2:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12671:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 1753,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberMinted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1073,
																"src": "12671:29:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1756,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1702,
																		"src": "12711:8:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1755,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12704:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1754,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12704:6:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1757,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12704:16:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12671:49:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1759,
														"nodeType": "ExpressionStatement",
														"src": "12671:49:11"
													},
													{
														"expression": {
															"id": 1765,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1760,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1091,
																		"src": "12735:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1762,
																	"indexExpression": {
																		"id": 1761,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1710,
																		"src": "12747:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12735:25:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1763,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1064,
																"src": "12735:30:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1764,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1700,
																"src": "12768:2:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12735:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1766,
														"nodeType": "ExpressionStatement",
														"src": "12735:35:11"
													},
													{
														"expression": {
															"id": 1776,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1767,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1091,
																		"src": "12784:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1769,
																	"indexExpression": {
																		"id": 1768,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1710,
																		"src": "12796:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12784:25:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1770,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1066,
																"src": "12784:40:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1773,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "12834:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1774,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "12834:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1772,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12827:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1771,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12827:6:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1775,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12827:23:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12784:66:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1777,
														"nodeType": "ExpressionStatement",
														"src": "12784:66:11"
													},
													{
														"assignments": [
															1779
														],
														"declarations": [
															{
																"constant": false,
																"id": 1779,
																"mutability": "mutable",
																"name": "updatedIndex",
																"nameLocation": "12873:12:11",
																"nodeType": "VariableDeclaration",
																"scope": 1852,
																"src": "12865:20:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1778,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12865:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1781,
														"initialValue": {
															"id": 1780,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1710,
															"src": "12888:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12865:35:11"
													},
													{
														"assignments": [
															1783
														],
														"declarations": [
															{
																"constant": false,
																"id": 1783,
																"mutability": "mutable",
																"name": "end",
																"nameLocation": "12922:3:11",
																"nodeType": "VariableDeclaration",
																"scope": 1852,
																"src": "12914:11:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1782,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12914:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1787,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1784,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1779,
																"src": "12928:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1785,
																"name": "quantity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1702,
																"src": "12943:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "12928:23:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12914:37:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1792,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1788,
																"name": "safe",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1706,
																"src": "12970:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1789,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1700,
																		"src": "12978:2:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 1790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "isContract",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 283,
																	"src": "12978:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
																		"typeString": "function (address) view returns (bool)"
																	}
																},
																"id": 1791,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12978:15:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "12970:23:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 1846,
															"nodeType": "Block",
															"src": "13444:150:11",
															"statements": [
																{
																	"body": {
																		"id": 1841,
																		"nodeType": "Block",
																		"src": "13465:86:11",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 1834,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "13509:1:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 1833,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "13501:7:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 1832,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "13501:7:11",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1835,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "13501:10:11",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1836,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1700,
																							"src": "13513:2:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1838,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "UnaryOperation",
																							"operator": "++",
																							"prefix": false,
																							"src": "13517:14:11",
																							"subExpression": {
																								"id": 1837,
																								"name": "updatedIndex",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1779,
																								"src": "13517:12:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1831,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 119,
																						"src": "13492:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 1839,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "13492:40:11",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 1840,
																				"nodeType": "EmitStatement",
																				"src": "13487:45:11"
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1844,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1842,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1779,
																			"src": "13559:12:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1843,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1783,
																			"src": "13575:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13559:19:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1845,
																	"nodeType": "DoWhileStatement",
																	"src": "13462:118:11"
																}
															]
														},
														"id": 1847,
														"nodeType": "IfStatement",
														"src": "12966:628:11",
														"trueBody": {
															"id": 1830,
															"nodeType": "Block",
															"src": "12995:443:11",
															"statements": [
																{
																	"body": {
																		"id": 1818,
																		"nodeType": "Block",
																		"src": "13016:277:11",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 1796,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "13060:1:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 1795,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "13052:7:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 1794,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "13052:7:11",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1797,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "13052:10:11",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1798,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1700,
																							"src": "13064:2:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1799,
																							"name": "updatedIndex",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1779,
																							"src": "13068:12:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1793,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 119,
																						"src": "13043:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 1800,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "13043:38:11",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 1801,
																				"nodeType": "EmitStatement",
																				"src": "13038:43:11"
																			},
																			{
																				"condition": {
																					"id": 1812,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "!",
																					"prefix": true,
																					"src": "13107:70:11",
																					"subExpression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"hexValue": "30",
																										"id": 1805,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "13147:1:11",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										},
																										"value": "0"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										}
																									],
																									"id": 1804,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "13139:7:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_address_$",
																										"typeString": "type(address)"
																									},
																									"typeName": {
																										"id": 1803,
																										"name": "address",
																										"nodeType": "ElementaryTypeName",
																										"src": "13139:7:11",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 1806,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "13139:10:11",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 1807,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1700,
																								"src": "13151:2:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 1809,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "UnaryOperation",
																								"operator": "++",
																								"prefix": false,
																								"src": "13155:14:11",
																								"subExpression": {
																									"id": 1808,
																									"name": "updatedIndex",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1779,
																									"src": "13155:12:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"id": 1810,
																								"name": "_data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1704,
																								"src": "13171:5:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 1802,
																							"name": "_checkContractOnERC721Received",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2306,
																							"src": "13108:30:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																								"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																							}
																						},
																						"id": 1811,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "13108:69:11",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1817,
																				"nodeType": "IfStatement",
																				"src": "13103:172:11",
																				"trueBody": {
																					"id": 1816,
																					"nodeType": "Block",
																					"src": "13179:96:11",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [],
																								"expression": {
																									"argumentTypes": [],
																									"id": 1813,
																									"name": "TransferToNonERC721ReceiverImplementer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1043,
																									"src": "13212:38:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$__$returns$__$",
																										"typeString": "function () pure"
																									}
																								},
																								"id": 1814,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "13212:40:11",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 1815,
																							"nodeType": "RevertStatement",
																							"src": "13205:47:11"
																						}
																					]
																				}
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1821,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1819,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1779,
																			"src": "13301:12:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1820,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1783,
																			"src": "13317:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13301:19:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1822,
																	"nodeType": "DoWhileStatement",
																	"src": "13013:309:11"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1825,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1823,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1080,
																			"src": "13384:13:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1824,
																			"name": "startTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1710,
																			"src": "13401:12:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13384:29:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1829,
																	"nodeType": "IfStatement",
																	"src": "13380:43:11",
																	"trueBody": {
																		"expression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1826,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "13415:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1827,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "13415:8:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1828,
																		"nodeType": "ExpressionStatement",
																		"src": "13415:8:11"
																	}
																}
															]
														}
													},
													{
														"expression": {
															"id": 1850,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1848,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1080,
																"src": "13607:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1849,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1779,
																"src": "13623:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13607:28:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1851,
														"nodeType": "ExpressionStatement",
														"src": "13607:28:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1856,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13684:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1855,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "13676:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1854,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "13676:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1857,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13676:10:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1858,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1700,
															"src": "13688:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1859,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1710,
															"src": "13692:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1860,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1702,
															"src": "13706:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1853,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2332,
														"src": "13655:20:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13655:60:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1862,
												"nodeType": "ExpressionStatement",
												"src": "13655:60:11"
											}
										]
									},
									"documentation": {
										"id": 1698,
										"nodeType": "StructuredDocumentation",
										"src": "11748:236:11",
										"text": " @dev Mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 1864,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "11998:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1700,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12021:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1864,
												"src": "12013:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12013:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "12041:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1864,
												"src": "12033:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1701,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12033:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1704,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "12072:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1864,
												"src": "12059:18:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1703,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12059:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"mutability": "mutable",
												"name": "safe",
												"nameLocation": "12092:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1864,
												"src": "12087:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1705,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12087:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12003:99:11"
									},
									"returnParameters": {
										"id": 1708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12112:0:11"
									},
									"scope": 2333,
									"src": "11989:1733:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2033,
										"nodeType": "Block",
										"src": "14064:1982:11",
										"statements": [
											{
												"assignments": [
													1876
												],
												"declarations": [
													{
														"constant": false,
														"id": 1876,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "14096:13:11",
														"nodeType": "VariableDeclaration",
														"scope": 2033,
														"src": "14074:35:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 1875,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1874,
																"name": "TokenOwnership",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1069,
																"src": "14074:14:11"
															},
															"referencedDeclaration": 1069,
															"src": "14074:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																"typeString": "struct ERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1880,
												"initialValue": {
													"arguments": [
														{
															"id": 1878,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1871,
															"src": "14125:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1877,
														"name": "_ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1361,
														"src": "14112:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$1069_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
														}
													},
													"id": 1879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14112:21:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
														"typeString": "struct ERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14074:59:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1884,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1881,
															"name": "prevOwnership",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1876,
															"src": "14148:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																"typeString": "struct ERC721A.TokenOwnership memory"
															}
														},
														"id": 1882,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "addr",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1064,
														"src": "14148:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1883,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1867,
														"src": "14170:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "14148:26:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1888,
												"nodeType": "IfStatement",
												"src": "14144:67:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1885,
															"name": "TransferFromIncorrectOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1041,
															"src": "14183:26:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1886,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14183:28:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1887,
													"nodeType": "RevertStatement",
													"src": "14176:35:11"
												}
											},
											{
												"assignments": [
													1890
												],
												"declarations": [
													{
														"constant": false,
														"id": 1890,
														"mutability": "mutable",
														"name": "isApprovedOrOwner",
														"nameLocation": "14227:17:11",
														"nodeType": "VariableDeclaration",
														"scope": 2033,
														"src": "14222:22:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1889,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "14222:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1909,
												"initialValue": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1907,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1900,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 1894,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1891,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 572,
																			"src": "14248:10:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 1892,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14248:12:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 1893,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1867,
																		"src": "14264:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "14248:20:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 1896,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1867,
																			"src": "14301:4:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1897,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 572,
																				"src": "14307:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																					"typeString": "function () view returns (address)"
																				}
																			},
																			"id": 1898,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "14307:12:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1895,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1568,
																		"src": "14284:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 1899,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14284:36:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "14248:72:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1906,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1902,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1871,
																			"src": "14348:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1901,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1516,
																		"src": "14336:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 1903,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14336:20:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1904,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 572,
																		"src": "14360:10:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1905,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14360:12:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "14336:36:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "14248:124:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 1908,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "14247:126:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14222:151:11"
											},
											{
												"condition": {
													"id": 1911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "14388:18:11",
													"subExpression": {
														"id": 1910,
														"name": "isApprovedOrOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1890,
														"src": "14389:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1915,
												"nodeType": "IfStatement",
												"src": "14384:66:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1912,
															"name": "TransferCallerNotOwnerNorApproved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1039,
															"src": "14415:33:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1913,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14415:35:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1914,
													"nodeType": "RevertStatement",
													"src": "14408:42:11"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1921,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1916,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1869,
														"src": "14464:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1919,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14478:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1918,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "14470:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1917,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "14470:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1920,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14470:10:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "14464:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1925,
												"nodeType": "IfStatement",
												"src": "14460:52:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1922,
															"name": "TransferToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1045,
															"src": "14489:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1923,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14489:23:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1924,
													"nodeType": "RevertStatement",
													"src": "14482:30:11"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1927,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1867,
															"src": "14545:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1928,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1869,
															"src": "14551:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1929,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1871,
															"src": "14555:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 1930,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14564:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 1926,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2319,
														"src": "14523:21:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14523:43:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1932,
												"nodeType": "ExpressionStatement",
												"src": "14523:43:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1936,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14645:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1935,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14637:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1934,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "14637:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1937,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14637:10:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1938,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1871,
															"src": "14649:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1939,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1867,
															"src": "14658:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1933,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2251,
														"src": "14628:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1940,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14628:35:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1941,
												"nodeType": "ExpressionStatement",
												"src": "14628:35:11"
											},
											{
												"id": 2019,
												"nodeType": "UncheckedBlock",
												"src": "14929:1016:11",
												"statements": [
													{
														"expression": {
															"id": 1947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1942,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1096,
																		"src": "14953:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1944,
																	"indexExpression": {
																		"id": 1943,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1867,
																		"src": "14966:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14953:18:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 1945,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1071,
																"src": "14953:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1946,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14983:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "14953:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1948,
														"nodeType": "ExpressionStatement",
														"src": "14953:31:11"
													},
													{
														"expression": {
															"id": 1954,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1949,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1096,
																		"src": "14998:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1951,
																	"indexExpression": {
																		"id": 1950,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1869,
																		"src": "15011:2:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14998:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 1952,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1071,
																"src": "14998:24:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1953,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15026:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "14998:29:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1955,
														"nodeType": "ExpressionStatement",
														"src": "14998:29:11"
													},
													{
														"assignments": [
															1958
														],
														"declarations": [
															{
																"constant": false,
																"id": 1958,
																"mutability": "mutable",
																"name": "currSlot",
																"nameLocation": "15065:8:11",
																"nodeType": "VariableDeclaration",
																"scope": 2019,
																"src": "15042:31:11",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																	"typeString": "struct ERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 1957,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 1956,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 1069,
																		"src": "15042:14:11"
																	},
																	"referencedDeclaration": 1069,
																	"src": "15042:14:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1962,
														"initialValue": {
															"baseExpression": {
																"id": 1959,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1091,
																"src": "15076:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																	"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 1961,
															"indexExpression": {
																"id": 1960,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1871,
																"src": "15088:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15076:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																"typeString": "struct ERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15042:54:11"
													},
													{
														"expression": {
															"id": 1967,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1963,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1958,
																	"src": "15110:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1965,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1064,
																"src": "15110:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1966,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1869,
																"src": "15126:2:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15110:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1968,
														"nodeType": "ExpressionStatement",
														"src": "15110:18:11"
													},
													{
														"expression": {
															"id": 1977,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1969,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1958,
																	"src": "15142:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1971,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1066,
																"src": "15142:23:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1974,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "15175:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1975,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "15175:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15168:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1972,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "15168:6:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1976,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15168:23:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "15142:49:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1978,
														"nodeType": "ExpressionStatement",
														"src": "15142:49:11"
													},
													{
														"assignments": [
															1980
														],
														"declarations": [
															{
																"constant": false,
																"id": 1980,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "15447:11:11",
																"nodeType": "VariableDeclaration",
																"scope": 2019,
																"src": "15439:19:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1979,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "15439:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1984,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1983,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1981,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1871,
																"src": "15461:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1982,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15471:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15461:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15439:33:11"
													},
													{
														"assignments": [
															1987
														],
														"declarations": [
															{
																"constant": false,
																"id": 1987,
																"mutability": "mutable",
																"name": "nextSlot",
																"nameLocation": "15509:8:11",
																"nodeType": "VariableDeclaration",
																"scope": 2019,
																"src": "15486:31:11",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																	"typeString": "struct ERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 1986,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 1985,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 1069,
																		"src": "15486:14:11"
																	},
																	"referencedDeclaration": 1069,
																	"src": "15486:14:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1991,
														"initialValue": {
															"baseExpression": {
																"id": 1988,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1091,
																"src": "15520:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																	"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 1990,
															"indexExpression": {
																"id": 1989,
																"name": "nextTokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1980,
																"src": "15532:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15520:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																"typeString": "struct ERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15486:58:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1992,
																	"name": "nextSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1987,
																	"src": "15562:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1993,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1064,
																"src": "15562:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1996,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15587:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1995,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15579:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1994,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "15579:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1997,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15579:10:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15562:27:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2018,
														"nodeType": "IfStatement",
														"src": "15558:377:11",
														"trueBody": {
															"id": 2017,
															"nodeType": "Block",
															"src": "15591:344:11",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2001,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1999,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1980,
																			"src": "15754:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2000,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1080,
																			"src": "15769:13:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "15754:28:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2016,
																	"nodeType": "IfStatement",
																	"src": "15750:171:11",
																	"trueBody": {
																		"id": 2015,
																		"nodeType": "Block",
																		"src": "15784:137:11",
																		"statements": [
																			{
																				"expression": {
																					"id": 2006,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 2002,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1987,
																							"src": "15806:8:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																								"typeString": "struct ERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 2004,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1064,
																						"src": "15806:13:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 2005,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1867,
																						"src": "15822:4:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "15806:20:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 2007,
																				"nodeType": "ExpressionStatement",
																				"src": "15806:20:11"
																			},
																			{
																				"expression": {
																					"id": 2013,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 2008,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1987,
																							"src": "15848:8:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																								"typeString": "struct ERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 2010,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1066,
																						"src": "15848:23:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 2011,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1876,
																							"src": "15874:13:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2012,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1066,
																						"src": "15874:28:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "15848:54:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 2014,
																				"nodeType": "ExpressionStatement",
																				"src": "15848:54:11"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2021,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1867,
															"src": "15969:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2022,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1869,
															"src": "15975:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2023,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1871,
															"src": "15979:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2020,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 119,
														"src": "15960:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2024,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15960:27:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2025,
												"nodeType": "EmitStatement",
												"src": "15955:32:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2027,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1867,
															"src": "16018:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2028,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1869,
															"src": "16024:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2029,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1871,
															"src": "16028:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2030,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16037:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2026,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2332,
														"src": "15997:20:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15997:42:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2032,
												"nodeType": "ExpressionStatement",
												"src": "15997:42:11"
											}
										]
									},
									"documentation": {
										"id": 1865,
										"nodeType": "StructuredDocumentation",
										"src": "13728:231:11",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 2034,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "13973:9:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1867,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14000:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 2034,
												"src": "13992:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13992:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1869,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14022:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 2034,
												"src": "14014:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14014:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1871,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14042:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2034,
												"src": "14034:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14034:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13982:73:11"
									},
									"returnParameters": {
										"id": 1873,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14064:0:11"
									},
									"scope": 2333,
									"src": "13964:2082:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2045,
										"nodeType": "Block",
										"src": "16173:38:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2041,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2037,
															"src": "16189:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 2042,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16198:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2040,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2046,
															2228
														],
														"referencedDeclaration": 2228,
														"src": "16183:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (uint256,bool)"
														}
													},
													"id": 2043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16183:21:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2044,
												"nodeType": "ExpressionStatement",
												"src": "16183:21:11"
											}
										]
									},
									"documentation": {
										"id": 2035,
										"nodeType": "StructuredDocumentation",
										"src": "16052:67:11",
										"text": " @dev This is equivalent to _burn(tokenId, false)"
									},
									"id": 2046,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "16133:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16147:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "16139:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16139:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16138:17:11"
									},
									"returnParameters": {
										"id": 2039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16173:0:11"
									},
									"scope": 2333,
									"src": "16124:87:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2227,
										"nodeType": "Block",
										"src": "16497:2286:11",
										"statements": [
											{
												"assignments": [
													2056
												],
												"declarations": [
													{
														"constant": false,
														"id": 2056,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "16529:13:11",
														"nodeType": "VariableDeclaration",
														"scope": 2227,
														"src": "16507:35:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 2055,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2054,
																"name": "TokenOwnership",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1069,
																"src": "16507:14:11"
															},
															"referencedDeclaration": 1069,
															"src": "16507:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																"typeString": "struct ERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2060,
												"initialValue": {
													"arguments": [
														{
															"id": 2058,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2049,
															"src": "16558:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2057,
														"name": "_ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1361,
														"src": "16545:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$1069_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
														}
													},
													"id": 2059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16545:21:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
														"typeString": "struct ERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16507:59:11"
											},
											{
												"assignments": [
													2062
												],
												"declarations": [
													{
														"constant": false,
														"id": 2062,
														"mutability": "mutable",
														"name": "from",
														"nameLocation": "16585:4:11",
														"nodeType": "VariableDeclaration",
														"scope": 2227,
														"src": "16577:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2061,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "16577:7:11",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2065,
												"initialValue": {
													"expression": {
														"id": 2063,
														"name": "prevOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2056,
														"src": "16592:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership memory"
														}
													},
													"id": 2064,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1064,
													"src": "16592:18:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16577:33:11"
											},
											{
												"condition": {
													"id": 2066,
													"name": "approvalCheck",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2051,
													"src": "16625:13:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2095,
												"nodeType": "IfStatement",
												"src": "16621:284:11",
												"trueBody": {
													"id": 2094,
													"nodeType": "Block",
													"src": "16640:265:11",
													"statements": [
														{
															"assignments": [
																2068
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2068,
																	"mutability": "mutable",
																	"name": "isApprovedOrOwner",
																	"nameLocation": "16659:17:11",
																	"nodeType": "VariableDeclaration",
																	"scope": 2094,
																	"src": "16654:22:11",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2067,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "16654:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2087,
															"initialValue": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2085,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2078,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				"id": 2072,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2069,
																						"name": "_msgSender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 572,
																						"src": "16680:10:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																							"typeString": "function () view returns (address)"
																						}
																					},
																					"id": 2070,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "16680:12:11",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"id": 2071,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2062,
																					"src": "16696:4:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"src": "16680:20:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"arguments": [
																					{
																						"id": 2074,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2062,
																						"src": "16737:4:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [],
																						"expression": {
																							"argumentTypes": [],
																							"id": 2075,
																							"name": "_msgSender",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 572,
																							"src": "16743:10:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																								"typeString": "function () view returns (address)"
																							}
																						},
																						"id": 2076,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "16743:12:11",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 2073,
																					"name": "isApprovedForAll",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1568,
																					"src": "16720:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address,address) view returns (bool)"
																					}
																				},
																				"id": 2077,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16720:36:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "16680:76:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			"id": 2084,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2080,
																						"name": "tokenId",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2049,
																						"src": "16788:7:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"id": 2079,
																					"name": "getApproved",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1516,
																					"src": "16776:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																						"typeString": "function (uint256) view returns (address)"
																					}
																				},
																				"id": 2081,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16776:20:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 2082,
																					"name": "_msgSender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 572,
																					"src": "16800:10:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																						"typeString": "function () view returns (address)"
																					}
																				},
																				"id": 2083,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16800:12:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"src": "16776:36:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "16680:132:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2086,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "16679:134:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "16654:159:11"
														},
														{
															"condition": {
																"id": 2089,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "16832:18:11",
																"subExpression": {
																	"id": 2088,
																	"name": "isApprovedOrOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2068,
																	"src": "16833:17:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2093,
															"nodeType": "IfStatement",
															"src": "16828:66:11",
															"trueBody": {
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2090,
																		"name": "TransferCallerNotOwnerNorApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1039,
																		"src": "16859:33:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 2091,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16859:35:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 2092,
																"nodeType": "RevertStatement",
																"src": "16852:42:11"
															}
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2097,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2062,
															"src": "16937:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2100,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "16951:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2099,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16943:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2098,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16943:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 2101,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16943:10:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2102,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2049,
															"src": "16955:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2103,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16964:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2096,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2319,
														"src": "16915:21:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16915:51:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2105,
												"nodeType": "ExpressionStatement",
												"src": "16915:51:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2109,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17045:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2108,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17037:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2107,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17037:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 2110,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17037:10:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2111,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2049,
															"src": "17049:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2112,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2062,
															"src": "17058:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2106,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2251,
														"src": "17028:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 2113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17028:35:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2114,
												"nodeType": "ExpressionStatement",
												"src": "17028:35:11"
											},
											{
												"id": 2203,
												"nodeType": "UncheckedBlock",
												"src": "17329:1190:11",
												"statements": [
													{
														"assignments": [
															2117
														],
														"declarations": [
															{
																"constant": false,
																"id": 2117,
																"mutability": "mutable",
																"name": "addressData",
																"nameLocation": "17373:11:11",
																"nodeType": "VariableDeclaration",
																"scope": 2203,
																"src": "17353:31:11",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$1078_storage_ptr",
																	"typeString": "struct ERC721A.AddressData"
																},
																"typeName": {
																	"id": 2116,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 2115,
																		"name": "AddressData",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 1078,
																		"src": "17353:11:11"
																	},
																	"referencedDeclaration": 1078,
																	"src": "17353:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1078_storage_ptr",
																		"typeString": "struct ERC721A.AddressData"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2121,
														"initialValue": {
															"baseExpression": {
																"id": 2118,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1096,
																"src": "17387:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1078_storage_$",
																	"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																}
															},
															"id": 2120,
															"indexExpression": {
																"id": 2119,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2062,
																"src": "17400:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "17387:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$1078_storage",
																"typeString": "struct ERC721A.AddressData storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "17353:52:11"
													},
													{
														"expression": {
															"id": 2126,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2122,
																	"name": "addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2117,
																	"src": "17419:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1078_storage_ptr",
																		"typeString": "struct ERC721A.AddressData storage pointer"
																	}
																},
																"id": 2124,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1071,
																"src": "17419:19:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2125,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17442:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17419:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2127,
														"nodeType": "ExpressionStatement",
														"src": "17419:24:11"
													},
													{
														"expression": {
															"id": 2132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2128,
																	"name": "addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2117,
																	"src": "17457:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1078_storage_ptr",
																		"typeString": "struct ERC721A.AddressData storage pointer"
																	}
																},
																"id": 2130,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberBurned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1075,
																"src": "17457:24:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2131,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17485:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17457:29:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2133,
														"nodeType": "ExpressionStatement",
														"src": "17457:29:11"
													},
													{
														"assignments": [
															2136
														],
														"declarations": [
															{
																"constant": false,
																"id": 2136,
																"mutability": "mutable",
																"name": "currSlot",
																"nameLocation": "17605:8:11",
																"nodeType": "VariableDeclaration",
																"scope": 2203,
																"src": "17582:31:11",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																	"typeString": "struct ERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 2135,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 2134,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 1069,
																		"src": "17582:14:11"
																	},
																	"referencedDeclaration": 1069,
																	"src": "17582:14:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2140,
														"initialValue": {
															"baseExpression": {
																"id": 2137,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1091,
																"src": "17616:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																	"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 2139,
															"indexExpression": {
																"id": 2138,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2049,
																"src": "17628:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "17616:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																"typeString": "struct ERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "17582:54:11"
													},
													{
														"expression": {
															"id": 2145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2141,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2136,
																	"src": "17650:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2143,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1064,
																"src": "17650:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2144,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2062,
																"src": "17666:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "17650:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2146,
														"nodeType": "ExpressionStatement",
														"src": "17650:20:11"
													},
													{
														"expression": {
															"id": 2155,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2147,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2136,
																	"src": "17684:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2149,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1066,
																"src": "17684:23:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2152,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "17717:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 2153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "17717:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "17710:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2150,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "17710:6:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17710:23:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "17684:49:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2156,
														"nodeType": "ExpressionStatement",
														"src": "17684:49:11"
													},
													{
														"expression": {
															"id": 2161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2157,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2136,
																	"src": "17747:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2159,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "burned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1068,
																"src": "17747:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"hexValue": "74727565",
																"id": 2160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17765:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "17747:22:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2162,
														"nodeType": "ExpressionStatement",
														"src": "17747:22:11"
													},
													{
														"assignments": [
															2164
														],
														"declarations": [
															{
																"constant": false,
																"id": 2164,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "18021:11:11",
																"nodeType": "VariableDeclaration",
																"scope": 2203,
																"src": "18013:19:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2163,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "18013:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2168,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2167,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2165,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2049,
																"src": "18035:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2166,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "18045:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "18035:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "18013:33:11"
													},
													{
														"assignments": [
															2171
														],
														"declarations": [
															{
																"constant": false,
																"id": 2171,
																"mutability": "mutable",
																"name": "nextSlot",
																"nameLocation": "18083:8:11",
																"nodeType": "VariableDeclaration",
																"scope": 2203,
																"src": "18060:31:11",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																	"typeString": "struct ERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 2170,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 2169,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 1069,
																		"src": "18060:14:11"
																	},
																	"referencedDeclaration": 1069,
																	"src": "18060:14:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2175,
														"initialValue": {
															"baseExpression": {
																"id": 2172,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1091,
																"src": "18094:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1069_storage_$",
																	"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 2174,
															"indexExpression": {
																"id": 2173,
																"name": "nextTokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2164,
																"src": "18106:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18094:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage",
																"typeString": "struct ERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "18060:58:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2182,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2176,
																	"name": "nextSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2171,
																	"src": "18136:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2177,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1064,
																"src": "18136:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2180,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "18161:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "18153:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2178,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "18153:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2181,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18153:10:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "18136:27:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2202,
														"nodeType": "IfStatement",
														"src": "18132:377:11",
														"trueBody": {
															"id": 2201,
															"nodeType": "Block",
															"src": "18165:344:11",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2185,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2183,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2164,
																			"src": "18328:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2184,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1080,
																			"src": "18343:13:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "18328:28:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2200,
																	"nodeType": "IfStatement",
																	"src": "18324:171:11",
																	"trueBody": {
																		"id": 2199,
																		"nodeType": "Block",
																		"src": "18358:137:11",
																		"statements": [
																			{
																				"expression": {
																					"id": 2190,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 2186,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2171,
																							"src": "18380:8:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																								"typeString": "struct ERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 2188,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1064,
																						"src": "18380:13:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 2189,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2062,
																						"src": "18396:4:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "18380:20:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 2191,
																				"nodeType": "ExpressionStatement",
																				"src": "18380:20:11"
																			},
																			{
																				"expression": {
																					"id": 2197,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 2192,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2171,
																							"src": "18422:8:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1069_storage_ptr",
																								"typeString": "struct ERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 2194,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1066,
																						"src": "18422:23:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 2195,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2056,
																							"src": "18448:13:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1069_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2196,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1066,
																						"src": "18448:28:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "18422:54:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 2198,
																				"nodeType": "ExpressionStatement",
																				"src": "18422:54:11"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2205,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2062,
															"src": "18543:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2208,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18557:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18549:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2206,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18549:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 2209,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18549:10:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2210,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2049,
															"src": "18561:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2204,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 119,
														"src": "18534:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18534:35:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2212,
												"nodeType": "EmitStatement",
												"src": "18529:40:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2214,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2062,
															"src": "18600:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2217,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18614:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2216,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18606:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2215,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18606:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 2218,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18606:10:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2219,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2049,
															"src": "18618:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2220,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18627:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2213,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2332,
														"src": "18579:20:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18579:50:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2222,
												"nodeType": "ExpressionStatement",
												"src": "18579:50:11"
											},
											{
												"id": 2226,
												"nodeType": "UncheckedBlock",
												"src": "18728:49:11",
												"statements": [
													{
														"expression": {
															"id": 2224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "18752:14:11",
															"subExpression": {
																"id": 2223,
																"name": "_burnCounter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1082,
																"src": "18752:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2225,
														"nodeType": "ExpressionStatement",
														"src": "18752:14:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2047,
										"nodeType": "StructuredDocumentation",
										"src": "16217:206:11",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 2228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "16437:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2049,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16451:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2228,
												"src": "16443:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2048,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16443:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2051,
												"mutability": "mutable",
												"name": "approvalCheck",
												"nameLocation": "16465:13:11",
												"nodeType": "VariableDeclaration",
												"scope": 2228,
												"src": "16460:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2050,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16460:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16442:37:11"
									},
									"returnParameters": {
										"id": 2053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16497:0:11"
									},
									"scope": 2333,
									"src": "16428:2355:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2250,
										"nodeType": "Block",
										"src": "18994:89:11",
										"statements": [
											{
												"expression": {
													"id": 2242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2238,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "19004:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2240,
														"indexExpression": {
															"id": 2239,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2233,
															"src": "19020:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "19004:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2241,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2231,
														"src": "19031:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "19004:29:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2243,
												"nodeType": "ExpressionStatement",
												"src": "19004:29:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2245,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2235,
															"src": "19057:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2246,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2231,
															"src": "19064:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2247,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2233,
															"src": "19068:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2244,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "19048:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19048:28:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2249,
												"nodeType": "EmitStatement",
												"src": "19043:33:11"
											}
										]
									},
									"documentation": {
										"id": 2229,
										"nodeType": "StructuredDocumentation",
										"src": "18789:100:11",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."
									},
									"id": 2251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "18903:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2231,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "18929:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 2251,
												"src": "18921:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18921:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2233,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "18949:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2251,
												"src": "18941:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18941:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2235,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "18974:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2251,
												"src": "18966:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18966:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18911:74:11"
									},
									"returnParameters": {
										"id": 2237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18994:0:11"
									},
									"scope": 2333,
									"src": "18894:189:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2305,
										"nodeType": "Block",
										"src": "19728:486:11",
										"statements": [
											{
												"clauses": [
													{
														"block": {
															"id": 2286,
															"nodeType": "Block",
															"src": "19839:87:11",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		},
																		"id": 2284,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2278,
																			"name": "retval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "19860:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"expression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 2280,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2256,
																							"src": "19886:2:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 2279,
																						"name": "IERC721Receiver",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 238,
																						"src": "19870:15:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$238_$",
																							"typeString": "type(contract IERC721Receiver)"
																						}
																					},
																					"id": 2281,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "19870:19:11",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC721Receiver_$238",
																						"typeString": "contract IERC721Receiver"
																					}
																				},
																				"id": 2282,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "onERC721Received",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 237,
																				"src": "19870:36:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																					"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																				}
																			},
																			"id": 2283,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "19870:45:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"src": "19860:55:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"functionReturnParameters": 2264,
																	"id": 2285,
																	"nodeType": "Return",
																	"src": "19853:62:11"
																}
															]
														},
														"errorName": "",
														"id": 2287,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 2277,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 2276,
																	"mutability": "mutable",
																	"name": "retval",
																	"nameLocation": "19831:6:11",
																	"nodeType": "VariableDeclaration",
																	"scope": 2287,
																	"src": "19824:13:11",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	"typeName": {
																		"id": 2275,
																		"name": "bytes4",
																		"nodeType": "ElementaryTypeName",
																		"src": "19824:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "19823:15:11"
														},
														"src": "19815:111:11"
													},
													{
														"block": {
															"id": 2302,
															"nodeType": "Block",
															"src": "19955:253:11",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2291,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2289,
																				"src": "19973:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "19973:13:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "19990:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "19973:18:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseBody": {
																		"id": 2300,
																		"nodeType": "Block",
																		"src": "20079:119:11",
																		"statements": [
																			{
																				"AST": {
																					"nodeType": "YulBlock",
																					"src": "20106:78:11",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"kind": "number",
																												"nodeType": "YulLiteral",
																												"src": "20139:2:11",
																												"type": "",
																												"value": "32"
																											},
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "20143:6:11"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "20135:3:11"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "20135:15:11"
																									},
																									{
																										"arguments": [
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "20158:6:11"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "20152:5:11"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "20152:13:11"
																									}
																								],
																								"functionName": {
																									"name": "revert",
																									"nodeType": "YulIdentifier",
																									"src": "20128:6:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "20128:38:11"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "20128:38:11"
																						}
																					]
																				},
																				"evmVersion": "london",
																				"externalReferences": [
																					{
																						"declaration": 2289,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "20143:6:11",
																						"valueSize": 1
																					},
																					{
																						"declaration": 2289,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "20158:6:11",
																						"valueSize": 1
																					}
																				],
																				"id": 2299,
																				"nodeType": "InlineAssembly",
																				"src": "20097:87:11"
																			}
																		]
																	},
																	"id": 2301,
																	"nodeType": "IfStatement",
																	"src": "19969:229:11",
																	"trueBody": {
																		"id": 2298,
																		"nodeType": "Block",
																		"src": "19993:80:11",
																		"statements": [
																			{
																				"errorCall": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2295,
																						"name": "TransferToNonERC721ReceiverImplementer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1043,
																						"src": "20018:38:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_error_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 2296,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "20018:40:11",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 2297,
																				"nodeType": "RevertStatement",
																				"src": "20011:47:11"
																			}
																		]
																	}
																}
															]
														},
														"errorName": "",
														"id": 2303,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 2290,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 2289,
																	"mutability": "mutable",
																	"name": "reason",
																	"nameLocation": "19947:6:11",
																	"nodeType": "VariableDeclaration",
																	"scope": 2303,
																	"src": "19934:19:11",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 2288,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "19934:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "19933:21:11"
														},
														"src": "19927:281:11"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2269,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 572,
																"src": "19779:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2270,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19779:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2271,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2254,
															"src": "19793:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2272,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2258,
															"src": "19799:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2273,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2260,
															"src": "19808:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2266,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2256,
																	"src": "19758:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2265,
																"name": "IERC721Receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 238,
																"src": "19742:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$238_$",
																	"typeString": "type(contract IERC721Receiver)"
																}
															},
															"id": 2267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19742:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721Receiver_$238",
																"typeString": "contract IERC721Receiver"
															}
														},
														"id": 2268,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 237,
														"src": "19742:36:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 2274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19742:72:11",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"id": 2304,
												"nodeType": "TryStatement",
												"src": "19738:470:11"
											}
										]
									},
									"documentation": {
										"id": 2252,
										"nodeType": "StructuredDocumentation",
										"src": "19089:470:11",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 2306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkContractOnERC721Received",
									"nameLocation": "19573:30:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2254,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "19621:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 2306,
												"src": "19613:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19613:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2256,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "19643:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 2306,
												"src": "19635:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19635:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2258,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "19663:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2306,
												"src": "19655:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19655:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2260,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19693:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2306,
												"src": "19680:18:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2259,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19680:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19603:101:11"
									},
									"returnParameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2306,
												"src": "19722:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2262,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "19722:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19721:6:11"
									},
									"scope": 2333,
									"src": "19564:650:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2318,
										"nodeType": "Block",
										"src": "20997:2:11",
										"statements": []
									},
									"documentation": {
										"id": 2307,
										"nodeType": "StructuredDocumentation",
										"src": "20220:620:11",
										"text": " @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n And also called before burning one token.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 2319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfers",
									"nameLocation": "20854:21:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2309,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "20893:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "20885:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20885:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2311,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "20915:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "20907:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20907:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2313,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "20935:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "20927:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20927:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2315,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "20965:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "20957:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20957:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20875:104:11"
									},
									"returnParameters": {
										"id": 2317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20997:0:11"
									},
									"scope": 2333,
									"src": "20845:154:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2331,
										"nodeType": "Block",
										"src": "21791:2:11",
										"statements": []
									},
									"documentation": {
										"id": 2320,
										"nodeType": "StructuredDocumentation",
										"src": "21005:630:11",
										"text": " @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n minting.\n And also called after one token has been burned.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n transferred to `to`.\n - When `from` is zero, `tokenId` has been minted for `to`.\n - When `to` is zero, `tokenId` has been burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 2332,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfers",
									"nameLocation": "21649:20:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2322,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "21687:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "21679:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21679:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2324,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "21709:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "21701:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21701:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2326,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "21729:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "21721:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2325,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21721:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2328,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "21759:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "21751:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21751:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21669:104:11"
									},
									"returnParameters": {
										"id": 2330,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21791:0:11"
									},
									"scope": 2333,
									"src": "21640:153:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2334,
							"src": "1464:20331:11",
							"usedErrors": [
								1023,
								1025,
								1027,
								1029,
								1031,
								1037,
								1039,
								1041,
								1043,
								1045,
								1047
							]
						}
					],
					"src": "56:21740:11"
				},
				"id": 11
			}
		}
	}
}